
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model TwoFactor
 * 
 */
export type TwoFactor = $Result.DefaultSelection<Prisma.$TwoFactorPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model OauthApplication
 * 
 */
export type OauthApplication = $Result.DefaultSelection<Prisma.$OauthApplicationPayload>
/**
 * Model OauthAccessToken
 * 
 */
export type OauthAccessToken = $Result.DefaultSelection<Prisma.$OauthAccessTokenPayload>
/**
 * Model OauthConsent
 * 
 */
export type OauthConsent = $Result.DefaultSelection<Prisma.$OauthConsentPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model App
 * 
 */
export type App = $Result.DefaultSelection<Prisma.$AppPayload>
/**
 * Model AppOrganization
 * 
 */
export type AppOrganization = $Result.DefaultSelection<Prisma.$AppOrganizationPayload>
/**
 * Model AppMenuItem
 * 
 */
export type AppMenuItem = $Result.DefaultSelection<Prisma.$AppMenuItemPayload>
/**
 * Model AppAction
 * 
 */
export type AppAction = $Result.DefaultSelection<Prisma.$AppActionPayload>
/**
 * Model MenuPermission
 * 
 */
export type MenuPermission = $Result.DefaultSelection<Prisma.$MenuPermissionPayload>
/**
 * Model ActionPermission
 * 
 */
export type ActionPermission = $Result.DefaultSelection<Prisma.$ActionPermissionPayload>
/**
 * Model RBAC
 * 
 */
export type RBAC = $Result.DefaultSelection<Prisma.$RBACPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AppType: {
  platform: 'platform',
  custom: 'custom'
};

export type AppType = (typeof AppType)[keyof typeof AppType]


export const AppActionType: {
  button: 'button',
  link: 'link'
};

export type AppActionType = (typeof AppActionType)[keyof typeof AppActionType]

}

export type AppType = $Enums.AppType

export const AppType: typeof $Enums.AppType

export type AppActionType = $Enums.AppActionType

export const AppActionType: typeof $Enums.AppActionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.twoFactor`: Exposes CRUD operations for the **TwoFactor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwoFactors
    * const twoFactors = await prisma.twoFactor.findMany()
    * ```
    */
  get twoFactor(): Prisma.TwoFactorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oauthApplication`: Exposes CRUD operations for the **OauthApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OauthApplications
    * const oauthApplications = await prisma.oauthApplication.findMany()
    * ```
    */
  get oauthApplication(): Prisma.OauthApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oauthAccessToken`: Exposes CRUD operations for the **OauthAccessToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OauthAccessTokens
    * const oauthAccessTokens = await prisma.oauthAccessToken.findMany()
    * ```
    */
  get oauthAccessToken(): Prisma.OauthAccessTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oauthConsent`: Exposes CRUD operations for the **OauthConsent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OauthConsents
    * const oauthConsents = await prisma.oauthConsent.findMany()
    * ```
    */
  get oauthConsent(): Prisma.OauthConsentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apps
    * const apps = await prisma.app.findMany()
    * ```
    */
  get app(): Prisma.AppDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appOrganization`: Exposes CRUD operations for the **AppOrganization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppOrganizations
    * const appOrganizations = await prisma.appOrganization.findMany()
    * ```
    */
  get appOrganization(): Prisma.AppOrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appMenuItem`: Exposes CRUD operations for the **AppMenuItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppMenuItems
    * const appMenuItems = await prisma.appMenuItem.findMany()
    * ```
    */
  get appMenuItem(): Prisma.AppMenuItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appAction`: Exposes CRUD operations for the **AppAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppActions
    * const appActions = await prisma.appAction.findMany()
    * ```
    */
  get appAction(): Prisma.AppActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.menuPermission`: Exposes CRUD operations for the **MenuPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuPermissions
    * const menuPermissions = await prisma.menuPermission.findMany()
    * ```
    */
  get menuPermission(): Prisma.MenuPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.actionPermission`: Exposes CRUD operations for the **ActionPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionPermissions
    * const actionPermissions = await prisma.actionPermission.findMany()
    * ```
    */
  get actionPermission(): Prisma.ActionPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rBAC`: Exposes CRUD operations for the **RBAC** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RBACS
    * const rBACS = await prisma.rBAC.findMany()
    * ```
    */
  get rBAC(): Prisma.RBACDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    TwoFactor: 'TwoFactor',
    Organization: 'Organization',
    Member: 'Member',
    Invitation: 'Invitation',
    OauthApplication: 'OauthApplication',
    OauthAccessToken: 'OauthAccessToken',
    OauthConsent: 'OauthConsent',
    Role: 'Role',
    App: 'App',
    AppOrganization: 'AppOrganization',
    AppMenuItem: 'AppMenuItem',
    AppAction: 'AppAction',
    MenuPermission: 'MenuPermission',
    ActionPermission: 'ActionPermission',
    RBAC: 'RBAC'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "account" | "verification" | "twoFactor" | "organization" | "member" | "invitation" | "oauthApplication" | "oauthAccessToken" | "oauthConsent" | "role" | "app" | "appOrganization" | "appMenuItem" | "appAction" | "menuPermission" | "actionPermission" | "rBAC"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      TwoFactor: {
        payload: Prisma.$TwoFactorPayload<ExtArgs>
        fields: Prisma.TwoFactorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TwoFactorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TwoFactorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          findFirst: {
            args: Prisma.TwoFactorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TwoFactorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          findMany: {
            args: Prisma.TwoFactorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>[]
          }
          create: {
            args: Prisma.TwoFactorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          createMany: {
            args: Prisma.TwoFactorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TwoFactorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>[]
          }
          delete: {
            args: Prisma.TwoFactorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          update: {
            args: Prisma.TwoFactorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          deleteMany: {
            args: Prisma.TwoFactorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TwoFactorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TwoFactorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>[]
          }
          upsert: {
            args: Prisma.TwoFactorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TwoFactorPayload>
          }
          aggregate: {
            args: Prisma.TwoFactorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTwoFactor>
          }
          groupBy: {
            args: Prisma.TwoFactorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorGroupByOutputType>[]
          }
          count: {
            args: Prisma.TwoFactorCountArgs<ExtArgs>
            result: $Utils.Optional<TwoFactorCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      OauthApplication: {
        payload: Prisma.$OauthApplicationPayload<ExtArgs>
        fields: Prisma.OauthApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OauthApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OauthApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          findFirst: {
            args: Prisma.OauthApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OauthApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          findMany: {
            args: Prisma.OauthApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>[]
          }
          create: {
            args: Prisma.OauthApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          createMany: {
            args: Prisma.OauthApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OauthApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>[]
          }
          delete: {
            args: Prisma.OauthApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          update: {
            args: Prisma.OauthApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          deleteMany: {
            args: Prisma.OauthApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OauthApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OauthApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>[]
          }
          upsert: {
            args: Prisma.OauthApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthApplicationPayload>
          }
          aggregate: {
            args: Prisma.OauthApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOauthApplication>
          }
          groupBy: {
            args: Prisma.OauthApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OauthApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OauthApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<OauthApplicationCountAggregateOutputType> | number
          }
        }
      }
      OauthAccessToken: {
        payload: Prisma.$OauthAccessTokenPayload<ExtArgs>
        fields: Prisma.OauthAccessTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OauthAccessTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OauthAccessTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          findFirst: {
            args: Prisma.OauthAccessTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OauthAccessTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          findMany: {
            args: Prisma.OauthAccessTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>[]
          }
          create: {
            args: Prisma.OauthAccessTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          createMany: {
            args: Prisma.OauthAccessTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OauthAccessTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>[]
          }
          delete: {
            args: Prisma.OauthAccessTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          update: {
            args: Prisma.OauthAccessTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          deleteMany: {
            args: Prisma.OauthAccessTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OauthAccessTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OauthAccessTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>[]
          }
          upsert: {
            args: Prisma.OauthAccessTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthAccessTokenPayload>
          }
          aggregate: {
            args: Prisma.OauthAccessTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOauthAccessToken>
          }
          groupBy: {
            args: Prisma.OauthAccessTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<OauthAccessTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.OauthAccessTokenCountArgs<ExtArgs>
            result: $Utils.Optional<OauthAccessTokenCountAggregateOutputType> | number
          }
        }
      }
      OauthConsent: {
        payload: Prisma.$OauthConsentPayload<ExtArgs>
        fields: Prisma.OauthConsentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OauthConsentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OauthConsentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          findFirst: {
            args: Prisma.OauthConsentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OauthConsentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          findMany: {
            args: Prisma.OauthConsentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>[]
          }
          create: {
            args: Prisma.OauthConsentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          createMany: {
            args: Prisma.OauthConsentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OauthConsentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>[]
          }
          delete: {
            args: Prisma.OauthConsentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          update: {
            args: Prisma.OauthConsentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          deleteMany: {
            args: Prisma.OauthConsentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OauthConsentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OauthConsentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>[]
          }
          upsert: {
            args: Prisma.OauthConsentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OauthConsentPayload>
          }
          aggregate: {
            args: Prisma.OauthConsentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOauthConsent>
          }
          groupBy: {
            args: Prisma.OauthConsentGroupByArgs<ExtArgs>
            result: $Utils.Optional<OauthConsentGroupByOutputType>[]
          }
          count: {
            args: Prisma.OauthConsentCountArgs<ExtArgs>
            result: $Utils.Optional<OauthConsentCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      App: {
        payload: Prisma.$AppPayload<ExtArgs>
        fields: Prisma.AppFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          findFirst: {
            args: Prisma.AppFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          findMany: {
            args: Prisma.AppFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>[]
          }
          create: {
            args: Prisma.AppCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          createMany: {
            args: Prisma.AppCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>[]
          }
          delete: {
            args: Prisma.AppDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          update: {
            args: Prisma.AppUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          deleteMany: {
            args: Prisma.AppDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>[]
          }
          upsert: {
            args: Prisma.AppUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          aggregate: {
            args: Prisma.AppAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApp>
          }
          groupBy: {
            args: Prisma.AppGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppCountArgs<ExtArgs>
            result: $Utils.Optional<AppCountAggregateOutputType> | number
          }
        }
      }
      AppOrganization: {
        payload: Prisma.$AppOrganizationPayload<ExtArgs>
        fields: Prisma.AppOrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppOrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppOrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          findFirst: {
            args: Prisma.AppOrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppOrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          findMany: {
            args: Prisma.AppOrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>[]
          }
          create: {
            args: Prisma.AppOrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          createMany: {
            args: Prisma.AppOrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppOrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>[]
          }
          delete: {
            args: Prisma.AppOrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          update: {
            args: Prisma.AppOrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          deleteMany: {
            args: Prisma.AppOrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppOrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppOrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>[]
          }
          upsert: {
            args: Prisma.AppOrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppOrganizationPayload>
          }
          aggregate: {
            args: Prisma.AppOrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppOrganization>
          }
          groupBy: {
            args: Prisma.AppOrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppOrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppOrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<AppOrganizationCountAggregateOutputType> | number
          }
        }
      }
      AppMenuItem: {
        payload: Prisma.$AppMenuItemPayload<ExtArgs>
        fields: Prisma.AppMenuItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppMenuItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppMenuItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          findFirst: {
            args: Prisma.AppMenuItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppMenuItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          findMany: {
            args: Prisma.AppMenuItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>[]
          }
          create: {
            args: Prisma.AppMenuItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          createMany: {
            args: Prisma.AppMenuItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppMenuItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>[]
          }
          delete: {
            args: Prisma.AppMenuItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          update: {
            args: Prisma.AppMenuItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          deleteMany: {
            args: Prisma.AppMenuItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppMenuItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppMenuItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>[]
          }
          upsert: {
            args: Prisma.AppMenuItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppMenuItemPayload>
          }
          aggregate: {
            args: Prisma.AppMenuItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppMenuItem>
          }
          groupBy: {
            args: Prisma.AppMenuItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppMenuItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppMenuItemCountArgs<ExtArgs>
            result: $Utils.Optional<AppMenuItemCountAggregateOutputType> | number
          }
        }
      }
      AppAction: {
        payload: Prisma.$AppActionPayload<ExtArgs>
        fields: Prisma.AppActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          findFirst: {
            args: Prisma.AppActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          findMany: {
            args: Prisma.AppActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>[]
          }
          create: {
            args: Prisma.AppActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          createMany: {
            args: Prisma.AppActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>[]
          }
          delete: {
            args: Prisma.AppActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          update: {
            args: Prisma.AppActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          deleteMany: {
            args: Prisma.AppActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>[]
          }
          upsert: {
            args: Prisma.AppActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppActionPayload>
          }
          aggregate: {
            args: Prisma.AppActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppAction>
          }
          groupBy: {
            args: Prisma.AppActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppActionCountArgs<ExtArgs>
            result: $Utils.Optional<AppActionCountAggregateOutputType> | number
          }
        }
      }
      MenuPermission: {
        payload: Prisma.$MenuPermissionPayload<ExtArgs>
        fields: Prisma.MenuPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          findFirst: {
            args: Prisma.MenuPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          findMany: {
            args: Prisma.MenuPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>[]
          }
          create: {
            args: Prisma.MenuPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          createMany: {
            args: Prisma.MenuPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MenuPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>[]
          }
          delete: {
            args: Prisma.MenuPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          update: {
            args: Prisma.MenuPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          deleteMany: {
            args: Prisma.MenuPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MenuPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>[]
          }
          upsert: {
            args: Prisma.MenuPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPermissionPayload>
          }
          aggregate: {
            args: Prisma.MenuPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenuPermission>
          }
          groupBy: {
            args: Prisma.MenuPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<MenuPermissionCountAggregateOutputType> | number
          }
        }
      }
      ActionPermission: {
        payload: Prisma.$ActionPermissionPayload<ExtArgs>
        fields: Prisma.ActionPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          findFirst: {
            args: Prisma.ActionPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          findMany: {
            args: Prisma.ActionPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>[]
          }
          create: {
            args: Prisma.ActionPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          createMany: {
            args: Prisma.ActionPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>[]
          }
          delete: {
            args: Prisma.ActionPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          update: {
            args: Prisma.ActionPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          deleteMany: {
            args: Prisma.ActionPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActionPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>[]
          }
          upsert: {
            args: Prisma.ActionPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPermissionPayload>
          }
          aggregate: {
            args: Prisma.ActionPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActionPermission>
          }
          groupBy: {
            args: Prisma.ActionPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<ActionPermissionCountAggregateOutputType> | number
          }
        }
      }
      RBAC: {
        payload: Prisma.$RBACPayload<ExtArgs>
        fields: Prisma.RBACFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RBACFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RBACFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          findFirst: {
            args: Prisma.RBACFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RBACFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          findMany: {
            args: Prisma.RBACFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>[]
          }
          create: {
            args: Prisma.RBACCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          createMany: {
            args: Prisma.RBACCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RBACCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>[]
          }
          delete: {
            args: Prisma.RBACDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          update: {
            args: Prisma.RBACUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          deleteMany: {
            args: Prisma.RBACDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RBACUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RBACUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>[]
          }
          upsert: {
            args: Prisma.RBACUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RBACPayload>
          }
          aggregate: {
            args: Prisma.RBACAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRBAC>
          }
          groupBy: {
            args: Prisma.RBACGroupByArgs<ExtArgs>
            result: $Utils.Optional<RBACGroupByOutputType>[]
          }
          count: {
            args: Prisma.RBACCountArgs<ExtArgs>
            result: $Utils.Optional<RBACCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    twoFactor?: TwoFactorOmit
    organization?: OrganizationOmit
    member?: MemberOmit
    invitation?: InvitationOmit
    oauthApplication?: OauthApplicationOmit
    oauthAccessToken?: OauthAccessTokenOmit
    oauthConsent?: OauthConsentOmit
    role?: RoleOmit
    app?: AppOmit
    appOrganization?: AppOrganizationOmit
    appMenuItem?: AppMenuItemOmit
    appAction?: AppActionOmit
    menuPermission?: MenuPermissionOmit
    actionPermission?: ActionPermissionOmit
    rBAC?: RBACOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    twofactors: number
    members: number
    invitations: number
    rbac: number
    oauthapplications: number
    oauthaccesstokens: number
    oauthconsents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    twofactors?: boolean | UserCountOutputTypeCountTwofactorsArgs
    members?: boolean | UserCountOutputTypeCountMembersArgs
    invitations?: boolean | UserCountOutputTypeCountInvitationsArgs
    rbac?: boolean | UserCountOutputTypeCountRbacArgs
    oauthapplications?: boolean | UserCountOutputTypeCountOauthapplicationsArgs
    oauthaccesstokens?: boolean | UserCountOutputTypeCountOauthaccesstokensArgs
    oauthconsents?: boolean | UserCountOutputTypeCountOauthconsentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTwofactorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoFactorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RBACWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauthapplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthApplicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauthaccesstokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthAccessTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOauthconsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthConsentWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    members: number
    invitations: number
    appOrganization: number
    rbac: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | OrganizationCountOutputTypeCountMembersArgs
    invitations?: boolean | OrganizationCountOutputTypeCountInvitationsArgs
    appOrganization?: boolean | OrganizationCountOutputTypeCountAppOrganizationArgs
    rbac?: boolean | OrganizationCountOutputTypeCountRbacArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAppOrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppOrganizationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountRbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RBACWhereInput
  }


  /**
   * Count Type OauthApplicationCountOutputType
   */

  export type OauthApplicationCountOutputType = {
    oauthaccesstokens: number
    oauthconsents: number
  }

  export type OauthApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthaccesstokens?: boolean | OauthApplicationCountOutputTypeCountOauthaccesstokensArgs
    oauthconsents?: boolean | OauthApplicationCountOutputTypeCountOauthconsentsArgs
  }

  // Custom InputTypes
  /**
   * OauthApplicationCountOutputType without action
   */
  export type OauthApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplicationCountOutputType
     */
    select?: OauthApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OauthApplicationCountOutputType without action
   */
  export type OauthApplicationCountOutputTypeCountOauthaccesstokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthAccessTokenWhereInput
  }

  /**
   * OauthApplicationCountOutputType without action
   */
  export type OauthApplicationCountOutputTypeCountOauthconsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthConsentWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    menuPermission: number
    actionPermission: number
    rbac: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menuPermission?: boolean | RoleCountOutputTypeCountMenuPermissionArgs
    actionPermission?: boolean | RoleCountOutputTypeCountActionPermissionArgs
    rbac?: boolean | RoleCountOutputTypeCountRbacArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountMenuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuPermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountActionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionPermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountRbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RBACWhereInput
  }


  /**
   * Count Type AppCountOutputType
   */

  export type AppCountOutputType = {
    appMenuItems: number
    appActions: number
    appOrganization: number
    menuPermission: number
    actionPermission: number
  }

  export type AppCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appMenuItems?: boolean | AppCountOutputTypeCountAppMenuItemsArgs
    appActions?: boolean | AppCountOutputTypeCountAppActionsArgs
    appOrganization?: boolean | AppCountOutputTypeCountAppOrganizationArgs
    menuPermission?: boolean | AppCountOutputTypeCountMenuPermissionArgs
    actionPermission?: boolean | AppCountOutputTypeCountActionPermissionArgs
  }

  // Custom InputTypes
  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppCountOutputType
     */
    select?: AppCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountAppMenuItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppMenuItemWhereInput
  }

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountAppActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppActionWhereInput
  }

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountAppOrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppOrganizationWhereInput
  }

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountMenuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuPermissionWhereInput
  }

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountActionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionPermissionWhereInput
  }


  /**
   * Count Type AppMenuItemCountOutputType
   */

  export type AppMenuItemCountOutputType = {
    menuPermission: number
  }

  export type AppMenuItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menuPermission?: boolean | AppMenuItemCountOutputTypeCountMenuPermissionArgs
  }

  // Custom InputTypes
  /**
   * AppMenuItemCountOutputType without action
   */
  export type AppMenuItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItemCountOutputType
     */
    select?: AppMenuItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppMenuItemCountOutputType without action
   */
  export type AppMenuItemCountOutputTypeCountMenuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuPermissionWhereInput
  }


  /**
   * Count Type AppActionCountOutputType
   */

  export type AppActionCountOutputType = {
    actionPermission: number
  }

  export type AppActionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actionPermission?: boolean | AppActionCountOutputTypeCountActionPermissionArgs
  }

  // Custom InputTypes
  /**
   * AppActionCountOutputType without action
   */
  export type AppActionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppActionCountOutputType
     */
    select?: AppActionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppActionCountOutputType without action
   */
  export type AppActionCountOutputTypeCountActionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionPermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    twoFactorEnabled: boolean | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    username: string | null
    displayUsername: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    twoFactorEnabled: boolean | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    username: string | null
    displayUsername: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    twoFactorEnabled: number
    role: number
    banned: number
    banReason: number
    banExpires: number
    username: number
    displayUsername: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    twoFactorEnabled?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    username?: true
    displayUsername?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    twoFactorEnabled?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    username?: true
    displayUsername?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    twoFactorEnabled?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    username?: true
    displayUsername?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    twoFactorEnabled: boolean | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    username: string | null
    displayUsername: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    twoFactorEnabled?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    username?: boolean
    displayUsername?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    twofactors?: boolean | User$twofactorsArgs<ExtArgs>
    members?: boolean | User$membersArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    rbac?: boolean | User$rbacArgs<ExtArgs>
    oauthapplications?: boolean | User$oauthapplicationsArgs<ExtArgs>
    oauthaccesstokens?: boolean | User$oauthaccesstokensArgs<ExtArgs>
    oauthconsents?: boolean | User$oauthconsentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    twoFactorEnabled?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    username?: boolean
    displayUsername?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    twoFactorEnabled?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    username?: boolean
    displayUsername?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    twoFactorEnabled?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    username?: boolean
    displayUsername?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "twoFactorEnabled" | "role" | "banned" | "banReason" | "banExpires" | "username" | "displayUsername", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    twofactors?: boolean | User$twofactorsArgs<ExtArgs>
    members?: boolean | User$membersArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    rbac?: boolean | User$rbacArgs<ExtArgs>
    oauthapplications?: boolean | User$oauthapplicationsArgs<ExtArgs>
    oauthaccesstokens?: boolean | User$oauthaccesstokensArgs<ExtArgs>
    oauthconsents?: boolean | User$oauthconsentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      twofactors: Prisma.$TwoFactorPayload<ExtArgs>[]
      members: Prisma.$MemberPayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      rbac: Prisma.$RBACPayload<ExtArgs>[]
      oauthapplications: Prisma.$OauthApplicationPayload<ExtArgs>[]
      oauthaccesstokens: Prisma.$OauthAccessTokenPayload<ExtArgs>[]
      oauthconsents: Prisma.$OauthConsentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      twoFactorEnabled: boolean | null
      role: string | null
      banned: boolean | null
      banReason: string | null
      banExpires: Date | null
      username: string | null
      displayUsername: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    twofactors<T extends User$twofactorsArgs<ExtArgs> = {}>(args?: Subset<T, User$twofactorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends User$membersArgs<ExtArgs> = {}>(args?: Subset<T, User$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends User$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rbac<T extends User$rbacArgs<ExtArgs> = {}>(args?: Subset<T, User$rbacArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oauthapplications<T extends User$oauthapplicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$oauthapplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oauthaccesstokens<T extends User$oauthaccesstokensArgs<ExtArgs> = {}>(args?: Subset<T, User$oauthaccesstokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oauthconsents<T extends User$oauthconsentsArgs<ExtArgs> = {}>(args?: Subset<T, User$oauthconsentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly twoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
    readonly banned: FieldRef<"User", 'Boolean'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly banExpires: FieldRef<"User", 'DateTime'>
    readonly username: FieldRef<"User", 'String'>
    readonly displayUsername: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.twofactors
   */
  export type User$twofactorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    where?: TwoFactorWhereInput
    orderBy?: TwoFactorOrderByWithRelationInput | TwoFactorOrderByWithRelationInput[]
    cursor?: TwoFactorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TwoFactorScalarFieldEnum | TwoFactorScalarFieldEnum[]
  }

  /**
   * User.members
   */
  export type User$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * User.invitations
   */
  export type User$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * User.rbac
   */
  export type User$rbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    where?: RBACWhereInput
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    cursor?: RBACWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * User.oauthapplications
   */
  export type User$oauthapplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    where?: OauthApplicationWhereInput
    orderBy?: OauthApplicationOrderByWithRelationInput | OauthApplicationOrderByWithRelationInput[]
    cursor?: OauthApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthApplicationScalarFieldEnum | OauthApplicationScalarFieldEnum[]
  }

  /**
   * User.oauthaccesstokens
   */
  export type User$oauthaccesstokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    where?: OauthAccessTokenWhereInput
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    cursor?: OauthAccessTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthAccessTokenScalarFieldEnum | OauthAccessTokenScalarFieldEnum[]
  }

  /**
   * User.oauthconsents
   */
  export type User$oauthconsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    where?: OauthConsentWhereInput
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    cursor?: OauthConsentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthConsentScalarFieldEnum | OauthConsentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
    activeOrganizationId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
    activeOrganizationId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    impersonatedBy: number
    activeOrganizationId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    activeOrganizationId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    activeOrganizationId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    activeOrganizationId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    impersonatedBy: string | null
    activeOrganizationId: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    activeOrganizationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    activeOrganizationId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "impersonatedBy" | "activeOrganizationId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
      impersonatedBy: string | null
      activeOrganizationId: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly impersonatedBy: FieldRef<"Session", 'String'>
    readonly activeOrganizationId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model TwoFactor
   */

  export type AggregateTwoFactor = {
    _count: TwoFactorCountAggregateOutputType | null
    _min: TwoFactorMinAggregateOutputType | null
    _max: TwoFactorMaxAggregateOutputType | null
  }

  export type TwoFactorMinAggregateOutputType = {
    id: string | null
    secret: string | null
    backupCodes: string | null
    userId: string | null
  }

  export type TwoFactorMaxAggregateOutputType = {
    id: string | null
    secret: string | null
    backupCodes: string | null
    userId: string | null
  }

  export type TwoFactorCountAggregateOutputType = {
    id: number
    secret: number
    backupCodes: number
    userId: number
    _all: number
  }


  export type TwoFactorMinAggregateInputType = {
    id?: true
    secret?: true
    backupCodes?: true
    userId?: true
  }

  export type TwoFactorMaxAggregateInputType = {
    id?: true
    secret?: true
    backupCodes?: true
    userId?: true
  }

  export type TwoFactorCountAggregateInputType = {
    id?: true
    secret?: true
    backupCodes?: true
    userId?: true
    _all?: true
  }

  export type TwoFactorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactor to aggregate.
     */
    where?: TwoFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactors to fetch.
     */
    orderBy?: TwoFactorOrderByWithRelationInput | TwoFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwoFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwoFactors
    **/
    _count?: true | TwoFactorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwoFactorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwoFactorMaxAggregateInputType
  }

  export type GetTwoFactorAggregateType<T extends TwoFactorAggregateArgs> = {
        [P in keyof T & keyof AggregateTwoFactor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwoFactor[P]>
      : GetScalarType<T[P], AggregateTwoFactor[P]>
  }




  export type TwoFactorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoFactorWhereInput
    orderBy?: TwoFactorOrderByWithAggregationInput | TwoFactorOrderByWithAggregationInput[]
    by: TwoFactorScalarFieldEnum[] | TwoFactorScalarFieldEnum
    having?: TwoFactorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwoFactorCountAggregateInputType | true
    _min?: TwoFactorMinAggregateInputType
    _max?: TwoFactorMaxAggregateInputType
  }

  export type TwoFactorGroupByOutputType = {
    id: string
    secret: string
    backupCodes: string
    userId: string
    _count: TwoFactorCountAggregateOutputType | null
    _min: TwoFactorMinAggregateOutputType | null
    _max: TwoFactorMaxAggregateOutputType | null
  }

  type GetTwoFactorGroupByPayload<T extends TwoFactorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TwoFactorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwoFactorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwoFactorGroupByOutputType[P]>
            : GetScalarType<T[P], TwoFactorGroupByOutputType[P]>
        }
      >
    >


  export type TwoFactorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    secret?: boolean
    backupCodes?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactor"]>

  export type TwoFactorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    secret?: boolean
    backupCodes?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactor"]>

  export type TwoFactorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    secret?: boolean
    backupCodes?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["twoFactor"]>

  export type TwoFactorSelectScalar = {
    id?: boolean
    secret?: boolean
    backupCodes?: boolean
    userId?: boolean
  }

  export type TwoFactorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "secret" | "backupCodes" | "userId", ExtArgs["result"]["twoFactor"]>
  export type TwoFactorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TwoFactorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TwoFactorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TwoFactorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TwoFactor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      secret: string
      backupCodes: string
      userId: string
    }, ExtArgs["result"]["twoFactor"]>
    composites: {}
  }

  type TwoFactorGetPayload<S extends boolean | null | undefined | TwoFactorDefaultArgs> = $Result.GetResult<Prisma.$TwoFactorPayload, S>

  type TwoFactorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TwoFactorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TwoFactorCountAggregateInputType | true
    }

  export interface TwoFactorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TwoFactor'], meta: { name: 'TwoFactor' } }
    /**
     * Find zero or one TwoFactor that matches the filter.
     * @param {TwoFactorFindUniqueArgs} args - Arguments to find a TwoFactor
     * @example
     * // Get one TwoFactor
     * const twoFactor = await prisma.twoFactor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TwoFactorFindUniqueArgs>(args: SelectSubset<T, TwoFactorFindUniqueArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TwoFactor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TwoFactorFindUniqueOrThrowArgs} args - Arguments to find a TwoFactor
     * @example
     * // Get one TwoFactor
     * const twoFactor = await prisma.twoFactor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TwoFactorFindUniqueOrThrowArgs>(args: SelectSubset<T, TwoFactorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorFindFirstArgs} args - Arguments to find a TwoFactor
     * @example
     * // Get one TwoFactor
     * const twoFactor = await prisma.twoFactor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TwoFactorFindFirstArgs>(args?: SelectSubset<T, TwoFactorFindFirstArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TwoFactor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorFindFirstOrThrowArgs} args - Arguments to find a TwoFactor
     * @example
     * // Get one TwoFactor
     * const twoFactor = await prisma.twoFactor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TwoFactorFindFirstOrThrowArgs>(args?: SelectSubset<T, TwoFactorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TwoFactors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwoFactors
     * const twoFactors = await prisma.twoFactor.findMany()
     * 
     * // Get first 10 TwoFactors
     * const twoFactors = await prisma.twoFactor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twoFactorWithIdOnly = await prisma.twoFactor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TwoFactorFindManyArgs>(args?: SelectSubset<T, TwoFactorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TwoFactor.
     * @param {TwoFactorCreateArgs} args - Arguments to create a TwoFactor.
     * @example
     * // Create one TwoFactor
     * const TwoFactor = await prisma.twoFactor.create({
     *   data: {
     *     // ... data to create a TwoFactor
     *   }
     * })
     * 
     */
    create<T extends TwoFactorCreateArgs>(args: SelectSubset<T, TwoFactorCreateArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TwoFactors.
     * @param {TwoFactorCreateManyArgs} args - Arguments to create many TwoFactors.
     * @example
     * // Create many TwoFactors
     * const twoFactor = await prisma.twoFactor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TwoFactorCreateManyArgs>(args?: SelectSubset<T, TwoFactorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TwoFactors and returns the data saved in the database.
     * @param {TwoFactorCreateManyAndReturnArgs} args - Arguments to create many TwoFactors.
     * @example
     * // Create many TwoFactors
     * const twoFactor = await prisma.twoFactor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TwoFactors and only return the `id`
     * const twoFactorWithIdOnly = await prisma.twoFactor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TwoFactorCreateManyAndReturnArgs>(args?: SelectSubset<T, TwoFactorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TwoFactor.
     * @param {TwoFactorDeleteArgs} args - Arguments to delete one TwoFactor.
     * @example
     * // Delete one TwoFactor
     * const TwoFactor = await prisma.twoFactor.delete({
     *   where: {
     *     // ... filter to delete one TwoFactor
     *   }
     * })
     * 
     */
    delete<T extends TwoFactorDeleteArgs>(args: SelectSubset<T, TwoFactorDeleteArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TwoFactor.
     * @param {TwoFactorUpdateArgs} args - Arguments to update one TwoFactor.
     * @example
     * // Update one TwoFactor
     * const twoFactor = await prisma.twoFactor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TwoFactorUpdateArgs>(args: SelectSubset<T, TwoFactorUpdateArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TwoFactors.
     * @param {TwoFactorDeleteManyArgs} args - Arguments to filter TwoFactors to delete.
     * @example
     * // Delete a few TwoFactors
     * const { count } = await prisma.twoFactor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TwoFactorDeleteManyArgs>(args?: SelectSubset<T, TwoFactorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwoFactors
     * const twoFactor = await prisma.twoFactor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TwoFactorUpdateManyArgs>(args: SelectSubset<T, TwoFactorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwoFactors and returns the data updated in the database.
     * @param {TwoFactorUpdateManyAndReturnArgs} args - Arguments to update many TwoFactors.
     * @example
     * // Update many TwoFactors
     * const twoFactor = await prisma.twoFactor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TwoFactors and only return the `id`
     * const twoFactorWithIdOnly = await prisma.twoFactor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TwoFactorUpdateManyAndReturnArgs>(args: SelectSubset<T, TwoFactorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TwoFactor.
     * @param {TwoFactorUpsertArgs} args - Arguments to update or create a TwoFactor.
     * @example
     * // Update or create a TwoFactor
     * const twoFactor = await prisma.twoFactor.upsert({
     *   create: {
     *     // ... data to create a TwoFactor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwoFactor we want to update
     *   }
     * })
     */
    upsert<T extends TwoFactorUpsertArgs>(args: SelectSubset<T, TwoFactorUpsertArgs<ExtArgs>>): Prisma__TwoFactorClient<$Result.GetResult<Prisma.$TwoFactorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TwoFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorCountArgs} args - Arguments to filter TwoFactors to count.
     * @example
     * // Count the number of TwoFactors
     * const count = await prisma.twoFactor.count({
     *   where: {
     *     // ... the filter for the TwoFactors we want to count
     *   }
     * })
    **/
    count<T extends TwoFactorCountArgs>(
      args?: Subset<T, TwoFactorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwoFactorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwoFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwoFactorAggregateArgs>(args: Subset<T, TwoFactorAggregateArgs>): Prisma.PrismaPromise<GetTwoFactorAggregateType<T>>

    /**
     * Group by TwoFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFactorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwoFactorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwoFactorGroupByArgs['orderBy'] }
        : { orderBy?: TwoFactorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwoFactorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoFactorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TwoFactor model
   */
  readonly fields: TwoFactorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TwoFactor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TwoFactorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TwoFactor model
   */
  interface TwoFactorFieldRefs {
    readonly id: FieldRef<"TwoFactor", 'String'>
    readonly secret: FieldRef<"TwoFactor", 'String'>
    readonly backupCodes: FieldRef<"TwoFactor", 'String'>
    readonly userId: FieldRef<"TwoFactor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TwoFactor findUnique
   */
  export type TwoFactorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactor to fetch.
     */
    where: TwoFactorWhereUniqueInput
  }

  /**
   * TwoFactor findUniqueOrThrow
   */
  export type TwoFactorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactor to fetch.
     */
    where: TwoFactorWhereUniqueInput
  }

  /**
   * TwoFactor findFirst
   */
  export type TwoFactorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactor to fetch.
     */
    where?: TwoFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactors to fetch.
     */
    orderBy?: TwoFactorOrderByWithRelationInput | TwoFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactors.
     */
    cursor?: TwoFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactors.
     */
    distinct?: TwoFactorScalarFieldEnum | TwoFactorScalarFieldEnum[]
  }

  /**
   * TwoFactor findFirstOrThrow
   */
  export type TwoFactorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactor to fetch.
     */
    where?: TwoFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactors to fetch.
     */
    orderBy?: TwoFactorOrderByWithRelationInput | TwoFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwoFactors.
     */
    cursor?: TwoFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwoFactors.
     */
    distinct?: TwoFactorScalarFieldEnum | TwoFactorScalarFieldEnum[]
  }

  /**
   * TwoFactor findMany
   */
  export type TwoFactorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter, which TwoFactors to fetch.
     */
    where?: TwoFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwoFactors to fetch.
     */
    orderBy?: TwoFactorOrderByWithRelationInput | TwoFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwoFactors.
     */
    cursor?: TwoFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwoFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwoFactors.
     */
    skip?: number
    distinct?: TwoFactorScalarFieldEnum | TwoFactorScalarFieldEnum[]
  }

  /**
   * TwoFactor create
   */
  export type TwoFactorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * The data needed to create a TwoFactor.
     */
    data: XOR<TwoFactorCreateInput, TwoFactorUncheckedCreateInput>
  }

  /**
   * TwoFactor createMany
   */
  export type TwoFactorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TwoFactors.
     */
    data: TwoFactorCreateManyInput | TwoFactorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TwoFactor createManyAndReturn
   */
  export type TwoFactorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * The data used to create many TwoFactors.
     */
    data: TwoFactorCreateManyInput | TwoFactorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TwoFactor update
   */
  export type TwoFactorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * The data needed to update a TwoFactor.
     */
    data: XOR<TwoFactorUpdateInput, TwoFactorUncheckedUpdateInput>
    /**
     * Choose, which TwoFactor to update.
     */
    where: TwoFactorWhereUniqueInput
  }

  /**
   * TwoFactor updateMany
   */
  export type TwoFactorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TwoFactors.
     */
    data: XOR<TwoFactorUpdateManyMutationInput, TwoFactorUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactors to update
     */
    where?: TwoFactorWhereInput
    /**
     * Limit how many TwoFactors to update.
     */
    limit?: number
  }

  /**
   * TwoFactor updateManyAndReturn
   */
  export type TwoFactorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * The data used to update TwoFactors.
     */
    data: XOR<TwoFactorUpdateManyMutationInput, TwoFactorUncheckedUpdateManyInput>
    /**
     * Filter which TwoFactors to update
     */
    where?: TwoFactorWhereInput
    /**
     * Limit how many TwoFactors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TwoFactor upsert
   */
  export type TwoFactorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * The filter to search for the TwoFactor to update in case it exists.
     */
    where: TwoFactorWhereUniqueInput
    /**
     * In case the TwoFactor found by the `where` argument doesn't exist, create a new TwoFactor with this data.
     */
    create: XOR<TwoFactorCreateInput, TwoFactorUncheckedCreateInput>
    /**
     * In case the TwoFactor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwoFactorUpdateInput, TwoFactorUncheckedUpdateInput>
  }

  /**
   * TwoFactor delete
   */
  export type TwoFactorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
    /**
     * Filter which TwoFactor to delete.
     */
    where: TwoFactorWhereUniqueInput
  }

  /**
   * TwoFactor deleteMany
   */
  export type TwoFactorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TwoFactors to delete
     */
    where?: TwoFactorWhereInput
    /**
     * Limit how many TwoFactors to delete.
     */
    limit?: number
  }

  /**
   * TwoFactor without action
   */
  export type TwoFactorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TwoFactor
     */
    select?: TwoFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TwoFactor
     */
    omit?: TwoFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoFactorInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    logo: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    slug: string | null
    logo: string | null
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Organization$membersArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    appOrganization?: boolean | Organization$appOrganizationArgs<ExtArgs>
    rbac?: boolean | Organization$rbacArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "logo" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Organization$membersArgs<ExtArgs>
    invitations?: boolean | Organization$invitationsArgs<ExtArgs>
    appOrganization?: boolean | Organization$appOrganizationArgs<ExtArgs>
    rbac?: boolean | Organization$rbacArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      members: Prisma.$MemberPayload<ExtArgs>[]
      invitations: Prisma.$InvitationPayload<ExtArgs>[]
      appOrganization: Prisma.$AppOrganizationPayload<ExtArgs>[]
      rbac: Prisma.$RBACPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string | null
      logo: string | null
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends Organization$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appOrganization<T extends Organization$appOrganizationArgs<ExtArgs> = {}>(args?: Subset<T, Organization$appOrganizationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rbac<T extends Organization$rbacArgs<ExtArgs> = {}>(args?: Subset<T, Organization$rbacArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly logo: FieldRef<"Organization", 'String'>
    readonly metadata: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.members
   */
  export type Organization$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Organization.invitations
   */
  export type Organization$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Organization.appOrganization
   */
  export type Organization$appOrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    where?: AppOrganizationWhereInput
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    cursor?: AppOrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppOrganizationScalarFieldEnum | AppOrganizationScalarFieldEnum[]
  }

  /**
   * Organization.rbac
   */
  export type Organization$rbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    where?: RBACWhereInput
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    cursor?: RBACWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MemberMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: MemberCountAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["member"]>
  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members and returns the data updated in the database.
     * @param {MemberUpdateManyAndReturnArgs} args - Arguments to update many Members.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'String'>
    readonly organizationId: FieldRef<"Member", 'String'>
    readonly userId: FieldRef<"Member", 'String'>
    readonly role: FieldRef<"Member", 'String'>
    readonly createdAt: FieldRef<"Member", 'DateTime'>
    readonly updatedAt: FieldRef<"Member", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member updateManyAndReturn
   */
  export type MemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to delete.
     */
    limit?: number
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    role: string | null
    status: string | null
    expiresAt: Date | null
    inviterId: string | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    email: string | null
    role: string | null
    status: string | null
    expiresAt: Date | null
    inviterId: string | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    organizationId: number
    email: number
    role: number
    status: number
    expiresAt: number
    inviterId: number
    _all: number
  }


  export type InvitationMinAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    role?: true
    status?: true
    expiresAt?: true
    inviterId?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    id: string
    organizationId: string
    email: string
    role: string | null
    status: string
    expiresAt: Date
    inviterId: string
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectScalar = {
    id?: boolean
    organizationId?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    expiresAt?: boolean
    inviterId?: boolean
  }

  export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "email" | "role" | "status" | "expiresAt" | "inviterId", ExtArgs["result"]["invitation"]>
  export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      email: string
      role: string | null
      status: string
      expiresAt: Date
      inviterId: string
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invitations and returns the data saved in the database.
     * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations and returns the data updated in the database.
     * @param {InvitationUpdateManyAndReturnArgs} args - Arguments to update many Invitations.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, InvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */
  interface InvitationFieldRefs {
    readonly id: FieldRef<"Invitation", 'String'>
    readonly organizationId: FieldRef<"Invitation", 'String'>
    readonly email: FieldRef<"Invitation", 'String'>
    readonly role: FieldRef<"Invitation", 'String'>
    readonly status: FieldRef<"Invitation", 'String'>
    readonly expiresAt: FieldRef<"Invitation", 'DateTime'>
    readonly inviterId: FieldRef<"Invitation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation createManyAndReturn
   */
  export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
  }

  /**
   * Invitation updateManyAndReturn
   */
  export type InvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to delete.
     */
    limit?: number
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
  }


  /**
   * Model OauthApplication
   */

  export type AggregateOauthApplication = {
    _count: OauthApplicationCountAggregateOutputType | null
    _min: OauthApplicationMinAggregateOutputType | null
    _max: OauthApplicationMaxAggregateOutputType | null
  }

  export type OauthApplicationMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    metadata: string | null
    clientId: string | null
    clientSecret: string | null
    redirectURLs: string | null
    type: string | null
    disabled: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OauthApplicationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    metadata: string | null
    clientId: string | null
    clientSecret: string | null
    redirectURLs: string | null
    type: string | null
    disabled: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OauthApplicationCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    metadata: number
    clientId: number
    clientSecret: number
    redirectURLs: number
    type: number
    disabled: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OauthApplicationMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    metadata?: true
    clientId?: true
    clientSecret?: true
    redirectURLs?: true
    type?: true
    disabled?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OauthApplicationMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    metadata?: true
    clientId?: true
    clientSecret?: true
    redirectURLs?: true
    type?: true
    disabled?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OauthApplicationCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    metadata?: true
    clientId?: true
    clientSecret?: true
    redirectURLs?: true
    type?: true
    disabled?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OauthApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthApplication to aggregate.
     */
    where?: OauthApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthApplications to fetch.
     */
    orderBy?: OauthApplicationOrderByWithRelationInput | OauthApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OauthApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OauthApplications
    **/
    _count?: true | OauthApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OauthApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OauthApplicationMaxAggregateInputType
  }

  export type GetOauthApplicationAggregateType<T extends OauthApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateOauthApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOauthApplication[P]>
      : GetScalarType<T[P], AggregateOauthApplication[P]>
  }




  export type OauthApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthApplicationWhereInput
    orderBy?: OauthApplicationOrderByWithAggregationInput | OauthApplicationOrderByWithAggregationInput[]
    by: OauthApplicationScalarFieldEnum[] | OauthApplicationScalarFieldEnum
    having?: OauthApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OauthApplicationCountAggregateInputType | true
    _min?: OauthApplicationMinAggregateInputType
    _max?: OauthApplicationMaxAggregateInputType
  }

  export type OauthApplicationGroupByOutputType = {
    id: string
    name: string | null
    icon: string | null
    metadata: string | null
    clientId: string | null
    clientSecret: string | null
    redirectURLs: string | null
    type: string | null
    disabled: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: OauthApplicationCountAggregateOutputType | null
    _min: OauthApplicationMinAggregateOutputType | null
    _max: OauthApplicationMaxAggregateOutputType | null
  }

  type GetOauthApplicationGroupByPayload<T extends OauthApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OauthApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OauthApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OauthApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], OauthApplicationGroupByOutputType[P]>
        }
      >
    >


  export type OauthApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    metadata?: boolean
    clientId?: boolean
    clientSecret?: boolean
    redirectURLs?: boolean
    type?: boolean
    disabled?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | OauthApplication$userArgs<ExtArgs>
    oauthaccesstokens?: boolean | OauthApplication$oauthaccesstokensArgs<ExtArgs>
    oauthconsents?: boolean | OauthApplication$oauthconsentsArgs<ExtArgs>
    _count?: boolean | OauthApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oauthApplication"]>

  export type OauthApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    metadata?: boolean
    clientId?: boolean
    clientSecret?: boolean
    redirectURLs?: boolean
    type?: boolean
    disabled?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | OauthApplication$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthApplication"]>

  export type OauthApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    metadata?: boolean
    clientId?: boolean
    clientSecret?: boolean
    redirectURLs?: boolean
    type?: boolean
    disabled?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | OauthApplication$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthApplication"]>

  export type OauthApplicationSelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
    metadata?: boolean
    clientId?: boolean
    clientSecret?: boolean
    redirectURLs?: boolean
    type?: boolean
    disabled?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OauthApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "icon" | "metadata" | "clientId" | "clientSecret" | "redirectURLs" | "type" | "disabled" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["oauthApplication"]>
  export type OauthApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | OauthApplication$userArgs<ExtArgs>
    oauthaccesstokens?: boolean | OauthApplication$oauthaccesstokensArgs<ExtArgs>
    oauthconsents?: boolean | OauthApplication$oauthconsentsArgs<ExtArgs>
    _count?: boolean | OauthApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OauthApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | OauthApplication$userArgs<ExtArgs>
  }
  export type OauthApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | OauthApplication$userArgs<ExtArgs>
  }

  export type $OauthApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OauthApplication"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      oauthaccesstokens: Prisma.$OauthAccessTokenPayload<ExtArgs>[]
      oauthconsents: Prisma.$OauthConsentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      icon: string | null
      metadata: string | null
      clientId: string | null
      clientSecret: string | null
      redirectURLs: string | null
      type: string | null
      disabled: boolean | null
      userId: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["oauthApplication"]>
    composites: {}
  }

  type OauthApplicationGetPayload<S extends boolean | null | undefined | OauthApplicationDefaultArgs> = $Result.GetResult<Prisma.$OauthApplicationPayload, S>

  type OauthApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OauthApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OauthApplicationCountAggregateInputType | true
    }

  export interface OauthApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OauthApplication'], meta: { name: 'OauthApplication' } }
    /**
     * Find zero or one OauthApplication that matches the filter.
     * @param {OauthApplicationFindUniqueArgs} args - Arguments to find a OauthApplication
     * @example
     * // Get one OauthApplication
     * const oauthApplication = await prisma.oauthApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OauthApplicationFindUniqueArgs>(args: SelectSubset<T, OauthApplicationFindUniqueArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OauthApplication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OauthApplicationFindUniqueOrThrowArgs} args - Arguments to find a OauthApplication
     * @example
     * // Get one OauthApplication
     * const oauthApplication = await prisma.oauthApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OauthApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, OauthApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationFindFirstArgs} args - Arguments to find a OauthApplication
     * @example
     * // Get one OauthApplication
     * const oauthApplication = await prisma.oauthApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OauthApplicationFindFirstArgs>(args?: SelectSubset<T, OauthApplicationFindFirstArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationFindFirstOrThrowArgs} args - Arguments to find a OauthApplication
     * @example
     * // Get one OauthApplication
     * const oauthApplication = await prisma.oauthApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OauthApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, OauthApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OauthApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OauthApplications
     * const oauthApplications = await prisma.oauthApplication.findMany()
     * 
     * // Get first 10 OauthApplications
     * const oauthApplications = await prisma.oauthApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oauthApplicationWithIdOnly = await prisma.oauthApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OauthApplicationFindManyArgs>(args?: SelectSubset<T, OauthApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OauthApplication.
     * @param {OauthApplicationCreateArgs} args - Arguments to create a OauthApplication.
     * @example
     * // Create one OauthApplication
     * const OauthApplication = await prisma.oauthApplication.create({
     *   data: {
     *     // ... data to create a OauthApplication
     *   }
     * })
     * 
     */
    create<T extends OauthApplicationCreateArgs>(args: SelectSubset<T, OauthApplicationCreateArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OauthApplications.
     * @param {OauthApplicationCreateManyArgs} args - Arguments to create many OauthApplications.
     * @example
     * // Create many OauthApplications
     * const oauthApplication = await prisma.oauthApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OauthApplicationCreateManyArgs>(args?: SelectSubset<T, OauthApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OauthApplications and returns the data saved in the database.
     * @param {OauthApplicationCreateManyAndReturnArgs} args - Arguments to create many OauthApplications.
     * @example
     * // Create many OauthApplications
     * const oauthApplication = await prisma.oauthApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OauthApplications and only return the `id`
     * const oauthApplicationWithIdOnly = await prisma.oauthApplication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OauthApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, OauthApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OauthApplication.
     * @param {OauthApplicationDeleteArgs} args - Arguments to delete one OauthApplication.
     * @example
     * // Delete one OauthApplication
     * const OauthApplication = await prisma.oauthApplication.delete({
     *   where: {
     *     // ... filter to delete one OauthApplication
     *   }
     * })
     * 
     */
    delete<T extends OauthApplicationDeleteArgs>(args: SelectSubset<T, OauthApplicationDeleteArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OauthApplication.
     * @param {OauthApplicationUpdateArgs} args - Arguments to update one OauthApplication.
     * @example
     * // Update one OauthApplication
     * const oauthApplication = await prisma.oauthApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OauthApplicationUpdateArgs>(args: SelectSubset<T, OauthApplicationUpdateArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OauthApplications.
     * @param {OauthApplicationDeleteManyArgs} args - Arguments to filter OauthApplications to delete.
     * @example
     * // Delete a few OauthApplications
     * const { count } = await prisma.oauthApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OauthApplicationDeleteManyArgs>(args?: SelectSubset<T, OauthApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OauthApplications
     * const oauthApplication = await prisma.oauthApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OauthApplicationUpdateManyArgs>(args: SelectSubset<T, OauthApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthApplications and returns the data updated in the database.
     * @param {OauthApplicationUpdateManyAndReturnArgs} args - Arguments to update many OauthApplications.
     * @example
     * // Update many OauthApplications
     * const oauthApplication = await prisma.oauthApplication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OauthApplications and only return the `id`
     * const oauthApplicationWithIdOnly = await prisma.oauthApplication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OauthApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, OauthApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OauthApplication.
     * @param {OauthApplicationUpsertArgs} args - Arguments to update or create a OauthApplication.
     * @example
     * // Update or create a OauthApplication
     * const oauthApplication = await prisma.oauthApplication.upsert({
     *   create: {
     *     // ... data to create a OauthApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OauthApplication we want to update
     *   }
     * })
     */
    upsert<T extends OauthApplicationUpsertArgs>(args: SelectSubset<T, OauthApplicationUpsertArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OauthApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationCountArgs} args - Arguments to filter OauthApplications to count.
     * @example
     * // Count the number of OauthApplications
     * const count = await prisma.oauthApplication.count({
     *   where: {
     *     // ... the filter for the OauthApplications we want to count
     *   }
     * })
    **/
    count<T extends OauthApplicationCountArgs>(
      args?: Subset<T, OauthApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OauthApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OauthApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OauthApplicationAggregateArgs>(args: Subset<T, OauthApplicationAggregateArgs>): Prisma.PrismaPromise<GetOauthApplicationAggregateType<T>>

    /**
     * Group by OauthApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OauthApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OauthApplicationGroupByArgs['orderBy'] }
        : { orderBy?: OauthApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OauthApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOauthApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OauthApplication model
   */
  readonly fields: OauthApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OauthApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OauthApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends OauthApplication$userArgs<ExtArgs> = {}>(args?: Subset<T, OauthApplication$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    oauthaccesstokens<T extends OauthApplication$oauthaccesstokensArgs<ExtArgs> = {}>(args?: Subset<T, OauthApplication$oauthaccesstokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oauthconsents<T extends OauthApplication$oauthconsentsArgs<ExtArgs> = {}>(args?: Subset<T, OauthApplication$oauthconsentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OauthApplication model
   */
  interface OauthApplicationFieldRefs {
    readonly id: FieldRef<"OauthApplication", 'String'>
    readonly name: FieldRef<"OauthApplication", 'String'>
    readonly icon: FieldRef<"OauthApplication", 'String'>
    readonly metadata: FieldRef<"OauthApplication", 'String'>
    readonly clientId: FieldRef<"OauthApplication", 'String'>
    readonly clientSecret: FieldRef<"OauthApplication", 'String'>
    readonly redirectURLs: FieldRef<"OauthApplication", 'String'>
    readonly type: FieldRef<"OauthApplication", 'String'>
    readonly disabled: FieldRef<"OauthApplication", 'Boolean'>
    readonly userId: FieldRef<"OauthApplication", 'String'>
    readonly createdAt: FieldRef<"OauthApplication", 'DateTime'>
    readonly updatedAt: FieldRef<"OauthApplication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OauthApplication findUnique
   */
  export type OauthApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter, which OauthApplication to fetch.
     */
    where: OauthApplicationWhereUniqueInput
  }

  /**
   * OauthApplication findUniqueOrThrow
   */
  export type OauthApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter, which OauthApplication to fetch.
     */
    where: OauthApplicationWhereUniqueInput
  }

  /**
   * OauthApplication findFirst
   */
  export type OauthApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter, which OauthApplication to fetch.
     */
    where?: OauthApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthApplications to fetch.
     */
    orderBy?: OauthApplicationOrderByWithRelationInput | OauthApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthApplications.
     */
    cursor?: OauthApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthApplications.
     */
    distinct?: OauthApplicationScalarFieldEnum | OauthApplicationScalarFieldEnum[]
  }

  /**
   * OauthApplication findFirstOrThrow
   */
  export type OauthApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter, which OauthApplication to fetch.
     */
    where?: OauthApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthApplications to fetch.
     */
    orderBy?: OauthApplicationOrderByWithRelationInput | OauthApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthApplications.
     */
    cursor?: OauthApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthApplications.
     */
    distinct?: OauthApplicationScalarFieldEnum | OauthApplicationScalarFieldEnum[]
  }

  /**
   * OauthApplication findMany
   */
  export type OauthApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter, which OauthApplications to fetch.
     */
    where?: OauthApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthApplications to fetch.
     */
    orderBy?: OauthApplicationOrderByWithRelationInput | OauthApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OauthApplications.
     */
    cursor?: OauthApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthApplications.
     */
    skip?: number
    distinct?: OauthApplicationScalarFieldEnum | OauthApplicationScalarFieldEnum[]
  }

  /**
   * OauthApplication create
   */
  export type OauthApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a OauthApplication.
     */
    data: XOR<OauthApplicationCreateInput, OauthApplicationUncheckedCreateInput>
  }

  /**
   * OauthApplication createMany
   */
  export type OauthApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OauthApplications.
     */
    data: OauthApplicationCreateManyInput | OauthApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OauthApplication createManyAndReturn
   */
  export type OauthApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many OauthApplications.
     */
    data: OauthApplicationCreateManyInput | OauthApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthApplication update
   */
  export type OauthApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a OauthApplication.
     */
    data: XOR<OauthApplicationUpdateInput, OauthApplicationUncheckedUpdateInput>
    /**
     * Choose, which OauthApplication to update.
     */
    where: OauthApplicationWhereUniqueInput
  }

  /**
   * OauthApplication updateMany
   */
  export type OauthApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OauthApplications.
     */
    data: XOR<OauthApplicationUpdateManyMutationInput, OauthApplicationUncheckedUpdateManyInput>
    /**
     * Filter which OauthApplications to update
     */
    where?: OauthApplicationWhereInput
    /**
     * Limit how many OauthApplications to update.
     */
    limit?: number
  }

  /**
   * OauthApplication updateManyAndReturn
   */
  export type OauthApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * The data used to update OauthApplications.
     */
    data: XOR<OauthApplicationUpdateManyMutationInput, OauthApplicationUncheckedUpdateManyInput>
    /**
     * Filter which OauthApplications to update
     */
    where?: OauthApplicationWhereInput
    /**
     * Limit how many OauthApplications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthApplication upsert
   */
  export type OauthApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the OauthApplication to update in case it exists.
     */
    where: OauthApplicationWhereUniqueInput
    /**
     * In case the OauthApplication found by the `where` argument doesn't exist, create a new OauthApplication with this data.
     */
    create: XOR<OauthApplicationCreateInput, OauthApplicationUncheckedCreateInput>
    /**
     * In case the OauthApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OauthApplicationUpdateInput, OauthApplicationUncheckedUpdateInput>
  }

  /**
   * OauthApplication delete
   */
  export type OauthApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    /**
     * Filter which OauthApplication to delete.
     */
    where: OauthApplicationWhereUniqueInput
  }

  /**
   * OauthApplication deleteMany
   */
  export type OauthApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthApplications to delete
     */
    where?: OauthApplicationWhereInput
    /**
     * Limit how many OauthApplications to delete.
     */
    limit?: number
  }

  /**
   * OauthApplication.user
   */
  export type OauthApplication$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OauthApplication.oauthaccesstokens
   */
  export type OauthApplication$oauthaccesstokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    where?: OauthAccessTokenWhereInput
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    cursor?: OauthAccessTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthAccessTokenScalarFieldEnum | OauthAccessTokenScalarFieldEnum[]
  }

  /**
   * OauthApplication.oauthconsents
   */
  export type OauthApplication$oauthconsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    where?: OauthConsentWhereInput
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    cursor?: OauthConsentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OauthConsentScalarFieldEnum | OauthConsentScalarFieldEnum[]
  }

  /**
   * OauthApplication without action
   */
  export type OauthApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
  }


  /**
   * Model OauthAccessToken
   */

  export type AggregateOauthAccessToken = {
    _count: OauthAccessTokenCountAggregateOutputType | null
    _min: OauthAccessTokenMinAggregateOutputType | null
    _max: OauthAccessTokenMaxAggregateOutputType | null
  }

  export type OauthAccessTokenMinAggregateOutputType = {
    id: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OauthAccessTokenMaxAggregateOutputType = {
    id: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OauthAccessTokenCountAggregateOutputType = {
    id: number
    accessToken: number
    refreshToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    clientId: number
    userId: number
    scopes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OauthAccessTokenMinAggregateInputType = {
    id?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OauthAccessTokenMaxAggregateInputType = {
    id?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OauthAccessTokenCountAggregateInputType = {
    id?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OauthAccessTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthAccessToken to aggregate.
     */
    where?: OauthAccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthAccessTokens to fetch.
     */
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OauthAccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthAccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthAccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OauthAccessTokens
    **/
    _count?: true | OauthAccessTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OauthAccessTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OauthAccessTokenMaxAggregateInputType
  }

  export type GetOauthAccessTokenAggregateType<T extends OauthAccessTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateOauthAccessToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOauthAccessToken[P]>
      : GetScalarType<T[P], AggregateOauthAccessToken[P]>
  }




  export type OauthAccessTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthAccessTokenWhereInput
    orderBy?: OauthAccessTokenOrderByWithAggregationInput | OauthAccessTokenOrderByWithAggregationInput[]
    by: OauthAccessTokenScalarFieldEnum[] | OauthAccessTokenScalarFieldEnum
    having?: OauthAccessTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OauthAccessTokenCountAggregateInputType | true
    _min?: OauthAccessTokenMinAggregateInputType
    _max?: OauthAccessTokenMaxAggregateInputType
  }

  export type OauthAccessTokenGroupByOutputType = {
    id: string
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: OauthAccessTokenCountAggregateOutputType | null
    _min: OauthAccessTokenMinAggregateOutputType | null
    _max: OauthAccessTokenMaxAggregateOutputType | null
  }

  type GetOauthAccessTokenGroupByPayload<T extends OauthAccessTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OauthAccessTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OauthAccessTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OauthAccessTokenGroupByOutputType[P]>
            : GetScalarType<T[P], OauthAccessTokenGroupByOutputType[P]>
        }
      >
    >


  export type OauthAccessTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthAccessToken"]>

  export type OauthAccessTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthAccessToken"]>

  export type OauthAccessTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthAccessToken"]>

  export type OauthAccessTokenSelectScalar = {
    id?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OauthAccessTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accessToken" | "refreshToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "clientId" | "userId" | "scopes" | "createdAt" | "updatedAt", ExtArgs["result"]["oauthAccessToken"]>
  export type OauthAccessTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }
  export type OauthAccessTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }
  export type OauthAccessTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthAccessToken$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthAccessToken$userArgs<ExtArgs>
  }

  export type $OauthAccessTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OauthAccessToken"
    objects: {
      oauthapplication: Prisma.$OauthApplicationPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accessToken: string | null
      refreshToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      clientId: string | null
      userId: string | null
      scopes: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["oauthAccessToken"]>
    composites: {}
  }

  type OauthAccessTokenGetPayload<S extends boolean | null | undefined | OauthAccessTokenDefaultArgs> = $Result.GetResult<Prisma.$OauthAccessTokenPayload, S>

  type OauthAccessTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OauthAccessTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OauthAccessTokenCountAggregateInputType | true
    }

  export interface OauthAccessTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OauthAccessToken'], meta: { name: 'OauthAccessToken' } }
    /**
     * Find zero or one OauthAccessToken that matches the filter.
     * @param {OauthAccessTokenFindUniqueArgs} args - Arguments to find a OauthAccessToken
     * @example
     * // Get one OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OauthAccessTokenFindUniqueArgs>(args: SelectSubset<T, OauthAccessTokenFindUniqueArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OauthAccessToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OauthAccessTokenFindUniqueOrThrowArgs} args - Arguments to find a OauthAccessToken
     * @example
     * // Get one OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OauthAccessTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, OauthAccessTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthAccessToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenFindFirstArgs} args - Arguments to find a OauthAccessToken
     * @example
     * // Get one OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OauthAccessTokenFindFirstArgs>(args?: SelectSubset<T, OauthAccessTokenFindFirstArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthAccessToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenFindFirstOrThrowArgs} args - Arguments to find a OauthAccessToken
     * @example
     * // Get one OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OauthAccessTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, OauthAccessTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OauthAccessTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OauthAccessTokens
     * const oauthAccessTokens = await prisma.oauthAccessToken.findMany()
     * 
     * // Get first 10 OauthAccessTokens
     * const oauthAccessTokens = await prisma.oauthAccessToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oauthAccessTokenWithIdOnly = await prisma.oauthAccessToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OauthAccessTokenFindManyArgs>(args?: SelectSubset<T, OauthAccessTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OauthAccessToken.
     * @param {OauthAccessTokenCreateArgs} args - Arguments to create a OauthAccessToken.
     * @example
     * // Create one OauthAccessToken
     * const OauthAccessToken = await prisma.oauthAccessToken.create({
     *   data: {
     *     // ... data to create a OauthAccessToken
     *   }
     * })
     * 
     */
    create<T extends OauthAccessTokenCreateArgs>(args: SelectSubset<T, OauthAccessTokenCreateArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OauthAccessTokens.
     * @param {OauthAccessTokenCreateManyArgs} args - Arguments to create many OauthAccessTokens.
     * @example
     * // Create many OauthAccessTokens
     * const oauthAccessToken = await prisma.oauthAccessToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OauthAccessTokenCreateManyArgs>(args?: SelectSubset<T, OauthAccessTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OauthAccessTokens and returns the data saved in the database.
     * @param {OauthAccessTokenCreateManyAndReturnArgs} args - Arguments to create many OauthAccessTokens.
     * @example
     * // Create many OauthAccessTokens
     * const oauthAccessToken = await prisma.oauthAccessToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OauthAccessTokens and only return the `id`
     * const oauthAccessTokenWithIdOnly = await prisma.oauthAccessToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OauthAccessTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, OauthAccessTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OauthAccessToken.
     * @param {OauthAccessTokenDeleteArgs} args - Arguments to delete one OauthAccessToken.
     * @example
     * // Delete one OauthAccessToken
     * const OauthAccessToken = await prisma.oauthAccessToken.delete({
     *   where: {
     *     // ... filter to delete one OauthAccessToken
     *   }
     * })
     * 
     */
    delete<T extends OauthAccessTokenDeleteArgs>(args: SelectSubset<T, OauthAccessTokenDeleteArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OauthAccessToken.
     * @param {OauthAccessTokenUpdateArgs} args - Arguments to update one OauthAccessToken.
     * @example
     * // Update one OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OauthAccessTokenUpdateArgs>(args: SelectSubset<T, OauthAccessTokenUpdateArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OauthAccessTokens.
     * @param {OauthAccessTokenDeleteManyArgs} args - Arguments to filter OauthAccessTokens to delete.
     * @example
     * // Delete a few OauthAccessTokens
     * const { count } = await prisma.oauthAccessToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OauthAccessTokenDeleteManyArgs>(args?: SelectSubset<T, OauthAccessTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthAccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OauthAccessTokens
     * const oauthAccessToken = await prisma.oauthAccessToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OauthAccessTokenUpdateManyArgs>(args: SelectSubset<T, OauthAccessTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthAccessTokens and returns the data updated in the database.
     * @param {OauthAccessTokenUpdateManyAndReturnArgs} args - Arguments to update many OauthAccessTokens.
     * @example
     * // Update many OauthAccessTokens
     * const oauthAccessToken = await prisma.oauthAccessToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OauthAccessTokens and only return the `id`
     * const oauthAccessTokenWithIdOnly = await prisma.oauthAccessToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OauthAccessTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, OauthAccessTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OauthAccessToken.
     * @param {OauthAccessTokenUpsertArgs} args - Arguments to update or create a OauthAccessToken.
     * @example
     * // Update or create a OauthAccessToken
     * const oauthAccessToken = await prisma.oauthAccessToken.upsert({
     *   create: {
     *     // ... data to create a OauthAccessToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OauthAccessToken we want to update
     *   }
     * })
     */
    upsert<T extends OauthAccessTokenUpsertArgs>(args: SelectSubset<T, OauthAccessTokenUpsertArgs<ExtArgs>>): Prisma__OauthAccessTokenClient<$Result.GetResult<Prisma.$OauthAccessTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OauthAccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenCountArgs} args - Arguments to filter OauthAccessTokens to count.
     * @example
     * // Count the number of OauthAccessTokens
     * const count = await prisma.oauthAccessToken.count({
     *   where: {
     *     // ... the filter for the OauthAccessTokens we want to count
     *   }
     * })
    **/
    count<T extends OauthAccessTokenCountArgs>(
      args?: Subset<T, OauthAccessTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OauthAccessTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OauthAccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OauthAccessTokenAggregateArgs>(args: Subset<T, OauthAccessTokenAggregateArgs>): Prisma.PrismaPromise<GetOauthAccessTokenAggregateType<T>>

    /**
     * Group by OauthAccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthAccessTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OauthAccessTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OauthAccessTokenGroupByArgs['orderBy'] }
        : { orderBy?: OauthAccessTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OauthAccessTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOauthAccessTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OauthAccessToken model
   */
  readonly fields: OauthAccessTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OauthAccessToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OauthAccessTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    oauthapplication<T extends OauthAccessToken$oauthapplicationArgs<ExtArgs> = {}>(args?: Subset<T, OauthAccessToken$oauthapplicationArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends OauthAccessToken$userArgs<ExtArgs> = {}>(args?: Subset<T, OauthAccessToken$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OauthAccessToken model
   */
  interface OauthAccessTokenFieldRefs {
    readonly id: FieldRef<"OauthAccessToken", 'String'>
    readonly accessToken: FieldRef<"OauthAccessToken", 'String'>
    readonly refreshToken: FieldRef<"OauthAccessToken", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"OauthAccessToken", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"OauthAccessToken", 'DateTime'>
    readonly clientId: FieldRef<"OauthAccessToken", 'String'>
    readonly userId: FieldRef<"OauthAccessToken", 'String'>
    readonly scopes: FieldRef<"OauthAccessToken", 'String'>
    readonly createdAt: FieldRef<"OauthAccessToken", 'DateTime'>
    readonly updatedAt: FieldRef<"OauthAccessToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OauthAccessToken findUnique
   */
  export type OauthAccessTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter, which OauthAccessToken to fetch.
     */
    where: OauthAccessTokenWhereUniqueInput
  }

  /**
   * OauthAccessToken findUniqueOrThrow
   */
  export type OauthAccessTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter, which OauthAccessToken to fetch.
     */
    where: OauthAccessTokenWhereUniqueInput
  }

  /**
   * OauthAccessToken findFirst
   */
  export type OauthAccessTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter, which OauthAccessToken to fetch.
     */
    where?: OauthAccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthAccessTokens to fetch.
     */
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthAccessTokens.
     */
    cursor?: OauthAccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthAccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthAccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthAccessTokens.
     */
    distinct?: OauthAccessTokenScalarFieldEnum | OauthAccessTokenScalarFieldEnum[]
  }

  /**
   * OauthAccessToken findFirstOrThrow
   */
  export type OauthAccessTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter, which OauthAccessToken to fetch.
     */
    where?: OauthAccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthAccessTokens to fetch.
     */
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthAccessTokens.
     */
    cursor?: OauthAccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthAccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthAccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthAccessTokens.
     */
    distinct?: OauthAccessTokenScalarFieldEnum | OauthAccessTokenScalarFieldEnum[]
  }

  /**
   * OauthAccessToken findMany
   */
  export type OauthAccessTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter, which OauthAccessTokens to fetch.
     */
    where?: OauthAccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthAccessTokens to fetch.
     */
    orderBy?: OauthAccessTokenOrderByWithRelationInput | OauthAccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OauthAccessTokens.
     */
    cursor?: OauthAccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthAccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthAccessTokens.
     */
    skip?: number
    distinct?: OauthAccessTokenScalarFieldEnum | OauthAccessTokenScalarFieldEnum[]
  }

  /**
   * OauthAccessToken create
   */
  export type OauthAccessTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a OauthAccessToken.
     */
    data: XOR<OauthAccessTokenCreateInput, OauthAccessTokenUncheckedCreateInput>
  }

  /**
   * OauthAccessToken createMany
   */
  export type OauthAccessTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OauthAccessTokens.
     */
    data: OauthAccessTokenCreateManyInput | OauthAccessTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OauthAccessToken createManyAndReturn
   */
  export type OauthAccessTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * The data used to create many OauthAccessTokens.
     */
    data: OauthAccessTokenCreateManyInput | OauthAccessTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthAccessToken update
   */
  export type OauthAccessTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a OauthAccessToken.
     */
    data: XOR<OauthAccessTokenUpdateInput, OauthAccessTokenUncheckedUpdateInput>
    /**
     * Choose, which OauthAccessToken to update.
     */
    where: OauthAccessTokenWhereUniqueInput
  }

  /**
   * OauthAccessToken updateMany
   */
  export type OauthAccessTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OauthAccessTokens.
     */
    data: XOR<OauthAccessTokenUpdateManyMutationInput, OauthAccessTokenUncheckedUpdateManyInput>
    /**
     * Filter which OauthAccessTokens to update
     */
    where?: OauthAccessTokenWhereInput
    /**
     * Limit how many OauthAccessTokens to update.
     */
    limit?: number
  }

  /**
   * OauthAccessToken updateManyAndReturn
   */
  export type OauthAccessTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * The data used to update OauthAccessTokens.
     */
    data: XOR<OauthAccessTokenUpdateManyMutationInput, OauthAccessTokenUncheckedUpdateManyInput>
    /**
     * Filter which OauthAccessTokens to update
     */
    where?: OauthAccessTokenWhereInput
    /**
     * Limit how many OauthAccessTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthAccessToken upsert
   */
  export type OauthAccessTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the OauthAccessToken to update in case it exists.
     */
    where: OauthAccessTokenWhereUniqueInput
    /**
     * In case the OauthAccessToken found by the `where` argument doesn't exist, create a new OauthAccessToken with this data.
     */
    create: XOR<OauthAccessTokenCreateInput, OauthAccessTokenUncheckedCreateInput>
    /**
     * In case the OauthAccessToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OauthAccessTokenUpdateInput, OauthAccessTokenUncheckedUpdateInput>
  }

  /**
   * OauthAccessToken delete
   */
  export type OauthAccessTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
    /**
     * Filter which OauthAccessToken to delete.
     */
    where: OauthAccessTokenWhereUniqueInput
  }

  /**
   * OauthAccessToken deleteMany
   */
  export type OauthAccessTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthAccessTokens to delete
     */
    where?: OauthAccessTokenWhereInput
    /**
     * Limit how many OauthAccessTokens to delete.
     */
    limit?: number
  }

  /**
   * OauthAccessToken.oauthapplication
   */
  export type OauthAccessToken$oauthapplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    where?: OauthApplicationWhereInput
  }

  /**
   * OauthAccessToken.user
   */
  export type OauthAccessToken$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OauthAccessToken without action
   */
  export type OauthAccessTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthAccessToken
     */
    select?: OauthAccessTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthAccessToken
     */
    omit?: OauthAccessTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthAccessTokenInclude<ExtArgs> | null
  }


  /**
   * Model OauthConsent
   */

  export type AggregateOauthConsent = {
    _count: OauthConsentCountAggregateOutputType | null
    _min: OauthConsentMinAggregateOutputType | null
    _max: OauthConsentMaxAggregateOutputType | null
  }

  export type OauthConsentMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consentGiven: boolean | null
  }

  export type OauthConsentMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consentGiven: boolean | null
  }

  export type OauthConsentCountAggregateOutputType = {
    id: number
    clientId: number
    userId: number
    scopes: number
    createdAt: number
    updatedAt: number
    consentGiven: number
    _all: number
  }


  export type OauthConsentMinAggregateInputType = {
    id?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
    consentGiven?: true
  }

  export type OauthConsentMaxAggregateInputType = {
    id?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
    consentGiven?: true
  }

  export type OauthConsentCountAggregateInputType = {
    id?: true
    clientId?: true
    userId?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
    consentGiven?: true
    _all?: true
  }

  export type OauthConsentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthConsent to aggregate.
     */
    where?: OauthConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthConsents to fetch.
     */
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OauthConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OauthConsents
    **/
    _count?: true | OauthConsentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OauthConsentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OauthConsentMaxAggregateInputType
  }

  export type GetOauthConsentAggregateType<T extends OauthConsentAggregateArgs> = {
        [P in keyof T & keyof AggregateOauthConsent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOauthConsent[P]>
      : GetScalarType<T[P], AggregateOauthConsent[P]>
  }




  export type OauthConsentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OauthConsentWhereInput
    orderBy?: OauthConsentOrderByWithAggregationInput | OauthConsentOrderByWithAggregationInput[]
    by: OauthConsentScalarFieldEnum[] | OauthConsentScalarFieldEnum
    having?: OauthConsentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OauthConsentCountAggregateInputType | true
    _min?: OauthConsentMinAggregateInputType
    _max?: OauthConsentMaxAggregateInputType
  }

  export type OauthConsentGroupByOutputType = {
    id: string
    clientId: string | null
    userId: string | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consentGiven: boolean | null
    _count: OauthConsentCountAggregateOutputType | null
    _min: OauthConsentMinAggregateOutputType | null
    _max: OauthConsentMaxAggregateOutputType | null
  }

  type GetOauthConsentGroupByPayload<T extends OauthConsentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OauthConsentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OauthConsentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OauthConsentGroupByOutputType[P]>
            : GetScalarType<T[P], OauthConsentGroupByOutputType[P]>
        }
      >
    >


  export type OauthConsentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consentGiven?: boolean
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthConsent"]>

  export type OauthConsentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consentGiven?: boolean
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthConsent"]>

  export type OauthConsentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consentGiven?: boolean
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }, ExtArgs["result"]["oauthConsent"]>

  export type OauthConsentSelectScalar = {
    id?: boolean
    clientId?: boolean
    userId?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consentGiven?: boolean
  }

  export type OauthConsentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "userId" | "scopes" | "createdAt" | "updatedAt" | "consentGiven", ExtArgs["result"]["oauthConsent"]>
  export type OauthConsentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }
  export type OauthConsentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }
  export type OauthConsentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oauthapplication?: boolean | OauthConsent$oauthapplicationArgs<ExtArgs>
    user?: boolean | OauthConsent$userArgs<ExtArgs>
  }

  export type $OauthConsentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OauthConsent"
    objects: {
      oauthapplication: Prisma.$OauthApplicationPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string | null
      userId: string | null
      scopes: string | null
      createdAt: Date | null
      updatedAt: Date | null
      consentGiven: boolean | null
    }, ExtArgs["result"]["oauthConsent"]>
    composites: {}
  }

  type OauthConsentGetPayload<S extends boolean | null | undefined | OauthConsentDefaultArgs> = $Result.GetResult<Prisma.$OauthConsentPayload, S>

  type OauthConsentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OauthConsentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OauthConsentCountAggregateInputType | true
    }

  export interface OauthConsentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OauthConsent'], meta: { name: 'OauthConsent' } }
    /**
     * Find zero or one OauthConsent that matches the filter.
     * @param {OauthConsentFindUniqueArgs} args - Arguments to find a OauthConsent
     * @example
     * // Get one OauthConsent
     * const oauthConsent = await prisma.oauthConsent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OauthConsentFindUniqueArgs>(args: SelectSubset<T, OauthConsentFindUniqueArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OauthConsent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OauthConsentFindUniqueOrThrowArgs} args - Arguments to find a OauthConsent
     * @example
     * // Get one OauthConsent
     * const oauthConsent = await prisma.oauthConsent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OauthConsentFindUniqueOrThrowArgs>(args: SelectSubset<T, OauthConsentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthConsent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentFindFirstArgs} args - Arguments to find a OauthConsent
     * @example
     * // Get one OauthConsent
     * const oauthConsent = await prisma.oauthConsent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OauthConsentFindFirstArgs>(args?: SelectSubset<T, OauthConsentFindFirstArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OauthConsent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentFindFirstOrThrowArgs} args - Arguments to find a OauthConsent
     * @example
     * // Get one OauthConsent
     * const oauthConsent = await prisma.oauthConsent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OauthConsentFindFirstOrThrowArgs>(args?: SelectSubset<T, OauthConsentFindFirstOrThrowArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OauthConsents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OauthConsents
     * const oauthConsents = await prisma.oauthConsent.findMany()
     * 
     * // Get first 10 OauthConsents
     * const oauthConsents = await prisma.oauthConsent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oauthConsentWithIdOnly = await prisma.oauthConsent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OauthConsentFindManyArgs>(args?: SelectSubset<T, OauthConsentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OauthConsent.
     * @param {OauthConsentCreateArgs} args - Arguments to create a OauthConsent.
     * @example
     * // Create one OauthConsent
     * const OauthConsent = await prisma.oauthConsent.create({
     *   data: {
     *     // ... data to create a OauthConsent
     *   }
     * })
     * 
     */
    create<T extends OauthConsentCreateArgs>(args: SelectSubset<T, OauthConsentCreateArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OauthConsents.
     * @param {OauthConsentCreateManyArgs} args - Arguments to create many OauthConsents.
     * @example
     * // Create many OauthConsents
     * const oauthConsent = await prisma.oauthConsent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OauthConsentCreateManyArgs>(args?: SelectSubset<T, OauthConsentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OauthConsents and returns the data saved in the database.
     * @param {OauthConsentCreateManyAndReturnArgs} args - Arguments to create many OauthConsents.
     * @example
     * // Create many OauthConsents
     * const oauthConsent = await prisma.oauthConsent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OauthConsents and only return the `id`
     * const oauthConsentWithIdOnly = await prisma.oauthConsent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OauthConsentCreateManyAndReturnArgs>(args?: SelectSubset<T, OauthConsentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OauthConsent.
     * @param {OauthConsentDeleteArgs} args - Arguments to delete one OauthConsent.
     * @example
     * // Delete one OauthConsent
     * const OauthConsent = await prisma.oauthConsent.delete({
     *   where: {
     *     // ... filter to delete one OauthConsent
     *   }
     * })
     * 
     */
    delete<T extends OauthConsentDeleteArgs>(args: SelectSubset<T, OauthConsentDeleteArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OauthConsent.
     * @param {OauthConsentUpdateArgs} args - Arguments to update one OauthConsent.
     * @example
     * // Update one OauthConsent
     * const oauthConsent = await prisma.oauthConsent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OauthConsentUpdateArgs>(args: SelectSubset<T, OauthConsentUpdateArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OauthConsents.
     * @param {OauthConsentDeleteManyArgs} args - Arguments to filter OauthConsents to delete.
     * @example
     * // Delete a few OauthConsents
     * const { count } = await prisma.oauthConsent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OauthConsentDeleteManyArgs>(args?: SelectSubset<T, OauthConsentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OauthConsents
     * const oauthConsent = await prisma.oauthConsent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OauthConsentUpdateManyArgs>(args: SelectSubset<T, OauthConsentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OauthConsents and returns the data updated in the database.
     * @param {OauthConsentUpdateManyAndReturnArgs} args - Arguments to update many OauthConsents.
     * @example
     * // Update many OauthConsents
     * const oauthConsent = await prisma.oauthConsent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OauthConsents and only return the `id`
     * const oauthConsentWithIdOnly = await prisma.oauthConsent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OauthConsentUpdateManyAndReturnArgs>(args: SelectSubset<T, OauthConsentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OauthConsent.
     * @param {OauthConsentUpsertArgs} args - Arguments to update or create a OauthConsent.
     * @example
     * // Update or create a OauthConsent
     * const oauthConsent = await prisma.oauthConsent.upsert({
     *   create: {
     *     // ... data to create a OauthConsent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OauthConsent we want to update
     *   }
     * })
     */
    upsert<T extends OauthConsentUpsertArgs>(args: SelectSubset<T, OauthConsentUpsertArgs<ExtArgs>>): Prisma__OauthConsentClient<$Result.GetResult<Prisma.$OauthConsentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OauthConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentCountArgs} args - Arguments to filter OauthConsents to count.
     * @example
     * // Count the number of OauthConsents
     * const count = await prisma.oauthConsent.count({
     *   where: {
     *     // ... the filter for the OauthConsents we want to count
     *   }
     * })
    **/
    count<T extends OauthConsentCountArgs>(
      args?: Subset<T, OauthConsentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OauthConsentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OauthConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OauthConsentAggregateArgs>(args: Subset<T, OauthConsentAggregateArgs>): Prisma.PrismaPromise<GetOauthConsentAggregateType<T>>

    /**
     * Group by OauthConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OauthConsentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OauthConsentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OauthConsentGroupByArgs['orderBy'] }
        : { orderBy?: OauthConsentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OauthConsentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOauthConsentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OauthConsent model
   */
  readonly fields: OauthConsentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OauthConsent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OauthConsentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    oauthapplication<T extends OauthConsent$oauthapplicationArgs<ExtArgs> = {}>(args?: Subset<T, OauthConsent$oauthapplicationArgs<ExtArgs>>): Prisma__OauthApplicationClient<$Result.GetResult<Prisma.$OauthApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends OauthConsent$userArgs<ExtArgs> = {}>(args?: Subset<T, OauthConsent$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OauthConsent model
   */
  interface OauthConsentFieldRefs {
    readonly id: FieldRef<"OauthConsent", 'String'>
    readonly clientId: FieldRef<"OauthConsent", 'String'>
    readonly userId: FieldRef<"OauthConsent", 'String'>
    readonly scopes: FieldRef<"OauthConsent", 'String'>
    readonly createdAt: FieldRef<"OauthConsent", 'DateTime'>
    readonly updatedAt: FieldRef<"OauthConsent", 'DateTime'>
    readonly consentGiven: FieldRef<"OauthConsent", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * OauthConsent findUnique
   */
  export type OauthConsentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter, which OauthConsent to fetch.
     */
    where: OauthConsentWhereUniqueInput
  }

  /**
   * OauthConsent findUniqueOrThrow
   */
  export type OauthConsentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter, which OauthConsent to fetch.
     */
    where: OauthConsentWhereUniqueInput
  }

  /**
   * OauthConsent findFirst
   */
  export type OauthConsentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter, which OauthConsent to fetch.
     */
    where?: OauthConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthConsents to fetch.
     */
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthConsents.
     */
    cursor?: OauthConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthConsents.
     */
    distinct?: OauthConsentScalarFieldEnum | OauthConsentScalarFieldEnum[]
  }

  /**
   * OauthConsent findFirstOrThrow
   */
  export type OauthConsentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter, which OauthConsent to fetch.
     */
    where?: OauthConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthConsents to fetch.
     */
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OauthConsents.
     */
    cursor?: OauthConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OauthConsents.
     */
    distinct?: OauthConsentScalarFieldEnum | OauthConsentScalarFieldEnum[]
  }

  /**
   * OauthConsent findMany
   */
  export type OauthConsentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter, which OauthConsents to fetch.
     */
    where?: OauthConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OauthConsents to fetch.
     */
    orderBy?: OauthConsentOrderByWithRelationInput | OauthConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OauthConsents.
     */
    cursor?: OauthConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OauthConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OauthConsents.
     */
    skip?: number
    distinct?: OauthConsentScalarFieldEnum | OauthConsentScalarFieldEnum[]
  }

  /**
   * OauthConsent create
   */
  export type OauthConsentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * The data needed to create a OauthConsent.
     */
    data: XOR<OauthConsentCreateInput, OauthConsentUncheckedCreateInput>
  }

  /**
   * OauthConsent createMany
   */
  export type OauthConsentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OauthConsents.
     */
    data: OauthConsentCreateManyInput | OauthConsentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OauthConsent createManyAndReturn
   */
  export type OauthConsentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * The data used to create many OauthConsents.
     */
    data: OauthConsentCreateManyInput | OauthConsentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthConsent update
   */
  export type OauthConsentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * The data needed to update a OauthConsent.
     */
    data: XOR<OauthConsentUpdateInput, OauthConsentUncheckedUpdateInput>
    /**
     * Choose, which OauthConsent to update.
     */
    where: OauthConsentWhereUniqueInput
  }

  /**
   * OauthConsent updateMany
   */
  export type OauthConsentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OauthConsents.
     */
    data: XOR<OauthConsentUpdateManyMutationInput, OauthConsentUncheckedUpdateManyInput>
    /**
     * Filter which OauthConsents to update
     */
    where?: OauthConsentWhereInput
    /**
     * Limit how many OauthConsents to update.
     */
    limit?: number
  }

  /**
   * OauthConsent updateManyAndReturn
   */
  export type OauthConsentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * The data used to update OauthConsents.
     */
    data: XOR<OauthConsentUpdateManyMutationInput, OauthConsentUncheckedUpdateManyInput>
    /**
     * Filter which OauthConsents to update
     */
    where?: OauthConsentWhereInput
    /**
     * Limit how many OauthConsents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OauthConsent upsert
   */
  export type OauthConsentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * The filter to search for the OauthConsent to update in case it exists.
     */
    where: OauthConsentWhereUniqueInput
    /**
     * In case the OauthConsent found by the `where` argument doesn't exist, create a new OauthConsent with this data.
     */
    create: XOR<OauthConsentCreateInput, OauthConsentUncheckedCreateInput>
    /**
     * In case the OauthConsent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OauthConsentUpdateInput, OauthConsentUncheckedUpdateInput>
  }

  /**
   * OauthConsent delete
   */
  export type OauthConsentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
    /**
     * Filter which OauthConsent to delete.
     */
    where: OauthConsentWhereUniqueInput
  }

  /**
   * OauthConsent deleteMany
   */
  export type OauthConsentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OauthConsents to delete
     */
    where?: OauthConsentWhereInput
    /**
     * Limit how many OauthConsents to delete.
     */
    limit?: number
  }

  /**
   * OauthConsent.oauthapplication
   */
  export type OauthConsent$oauthapplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthApplication
     */
    select?: OauthApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthApplication
     */
    omit?: OauthApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthApplicationInclude<ExtArgs> | null
    where?: OauthApplicationWhereInput
  }

  /**
   * OauthConsent.user
   */
  export type OauthConsent$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OauthConsent without action
   */
  export type OauthConsentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OauthConsent
     */
    select?: OauthConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OauthConsent
     */
    omit?: OauthConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OauthConsentInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menuPermission?: boolean | Role$menuPermissionArgs<ExtArgs>
    actionPermission?: boolean | Role$actionPermissionArgs<ExtArgs>
    rbac?: boolean | Role$rbacArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menuPermission?: boolean | Role$menuPermissionArgs<ExtArgs>
    actionPermission?: boolean | Role$actionPermissionArgs<ExtArgs>
    rbac?: boolean | Role$rbacArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      menuPermission: Prisma.$MenuPermissionPayload<ExtArgs>[]
      actionPermission: Prisma.$ActionPermissionPayload<ExtArgs>[]
      rbac: Prisma.$RBACPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    menuPermission<T extends Role$menuPermissionArgs<ExtArgs> = {}>(args?: Subset<T, Role$menuPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    actionPermission<T extends Role$actionPermissionArgs<ExtArgs> = {}>(args?: Subset<T, Role$actionPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rbac<T extends Role$rbacArgs<ExtArgs> = {}>(args?: Subset<T, Role$rbacArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.menuPermission
   */
  export type Role$menuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    where?: MenuPermissionWhereInput
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    cursor?: MenuPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * Role.actionPermission
   */
  export type Role$actionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    where?: ActionPermissionWhereInput
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    cursor?: ActionPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * Role.rbac
   */
  export type Role$rbacArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    where?: RBACWhereInput
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    cursor?: RBACWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model App
   */

  export type AggregateApp = {
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  export type AppMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    type: $Enums.AppType | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    type: $Enums.AppType | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug: number
    type: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    type?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    type?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    type?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which App to aggregate.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apps
    **/
    _count?: true | AppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMaxAggregateInputType
  }

  export type GetAppAggregateType<T extends AppAggregateArgs> = {
        [P in keyof T & keyof AggregateApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp[P]>
      : GetScalarType<T[P], AggregateApp[P]>
  }




  export type AppGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppWhereInput
    orderBy?: AppOrderByWithAggregationInput | AppOrderByWithAggregationInput[]
    by: AppScalarFieldEnum[] | AppScalarFieldEnum
    having?: AppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppCountAggregateInputType | true
    _min?: AppMinAggregateInputType
    _max?: AppMaxAggregateInputType
  }

  export type AppGroupByOutputType = {
    id: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  type GetAppGroupByPayload<T extends AppGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppGroupByOutputType[P]>
            : GetScalarType<T[P], AppGroupByOutputType[P]>
        }
      >
    >


  export type AppSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    type?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    appMenuItems?: boolean | App$appMenuItemsArgs<ExtArgs>
    appActions?: boolean | App$appActionsArgs<ExtArgs>
    appOrganization?: boolean | App$appOrganizationArgs<ExtArgs>
    menuPermission?: boolean | App$menuPermissionArgs<ExtArgs>
    actionPermission?: boolean | App$actionPermissionArgs<ExtArgs>
    _count?: boolean | AppCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["app"]>

  export type AppSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    type?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["app"]>

  export type AppSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    type?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["app"]>

  export type AppSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    type?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slug" | "type" | "imageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["app"]>
  export type AppInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appMenuItems?: boolean | App$appMenuItemsArgs<ExtArgs>
    appActions?: boolean | App$appActionsArgs<ExtArgs>
    appOrganization?: boolean | App$appOrganizationArgs<ExtArgs>
    menuPermission?: boolean | App$menuPermissionArgs<ExtArgs>
    actionPermission?: boolean | App$actionPermissionArgs<ExtArgs>
    _count?: boolean | AppCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AppIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AppPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "App"
    objects: {
      appMenuItems: Prisma.$AppMenuItemPayload<ExtArgs>[]
      appActions: Prisma.$AppActionPayload<ExtArgs>[]
      appOrganization: Prisma.$AppOrganizationPayload<ExtArgs>[]
      menuPermission: Prisma.$MenuPermissionPayload<ExtArgs>[]
      actionPermission: Prisma.$ActionPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      slug: string
      type: $Enums.AppType
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["app"]>
    composites: {}
  }

  type AppGetPayload<S extends boolean | null | undefined | AppDefaultArgs> = $Result.GetResult<Prisma.$AppPayload, S>

  type AppCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppCountAggregateInputType | true
    }

  export interface AppDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['App'], meta: { name: 'App' } }
    /**
     * Find zero or one App that matches the filter.
     * @param {AppFindUniqueArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppFindUniqueArgs>(args: SelectSubset<T, AppFindUniqueArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one App that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppFindUniqueOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppFindUniqueOrThrowArgs>(args: SelectSubset<T, AppFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first App that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppFindFirstArgs>(args?: SelectSubset<T, AppFindFirstArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first App that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppFindFirstOrThrowArgs>(args?: SelectSubset<T, AppFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apps
     * const apps = await prisma.app.findMany()
     * 
     * // Get first 10 Apps
     * const apps = await prisma.app.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appWithIdOnly = await prisma.app.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppFindManyArgs>(args?: SelectSubset<T, AppFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a App.
     * @param {AppCreateArgs} args - Arguments to create a App.
     * @example
     * // Create one App
     * const App = await prisma.app.create({
     *   data: {
     *     // ... data to create a App
     *   }
     * })
     * 
     */
    create<T extends AppCreateArgs>(args: SelectSubset<T, AppCreateArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Apps.
     * @param {AppCreateManyArgs} args - Arguments to create many Apps.
     * @example
     * // Create many Apps
     * const app = await prisma.app.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppCreateManyArgs>(args?: SelectSubset<T, AppCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Apps and returns the data saved in the database.
     * @param {AppCreateManyAndReturnArgs} args - Arguments to create many Apps.
     * @example
     * // Create many Apps
     * const app = await prisma.app.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Apps and only return the `id`
     * const appWithIdOnly = await prisma.app.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppCreateManyAndReturnArgs>(args?: SelectSubset<T, AppCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a App.
     * @param {AppDeleteArgs} args - Arguments to delete one App.
     * @example
     * // Delete one App
     * const App = await prisma.app.delete({
     *   where: {
     *     // ... filter to delete one App
     *   }
     * })
     * 
     */
    delete<T extends AppDeleteArgs>(args: SelectSubset<T, AppDeleteArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one App.
     * @param {AppUpdateArgs} args - Arguments to update one App.
     * @example
     * // Update one App
     * const app = await prisma.app.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppUpdateArgs>(args: SelectSubset<T, AppUpdateArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Apps.
     * @param {AppDeleteManyArgs} args - Arguments to filter Apps to delete.
     * @example
     * // Delete a few Apps
     * const { count } = await prisma.app.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppDeleteManyArgs>(args?: SelectSubset<T, AppDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppUpdateManyArgs>(args: SelectSubset<T, AppUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps and returns the data updated in the database.
     * @param {AppUpdateManyAndReturnArgs} args - Arguments to update many Apps.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Apps and only return the `id`
     * const appWithIdOnly = await prisma.app.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppUpdateManyAndReturnArgs>(args: SelectSubset<T, AppUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one App.
     * @param {AppUpsertArgs} args - Arguments to update or create a App.
     * @example
     * // Update or create a App
     * const app = await prisma.app.upsert({
     *   create: {
     *     // ... data to create a App
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App we want to update
     *   }
     * })
     */
    upsert<T extends AppUpsertArgs>(args: SelectSubset<T, AppUpsertArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppCountArgs} args - Arguments to filter Apps to count.
     * @example
     * // Count the number of Apps
     * const count = await prisma.app.count({
     *   where: {
     *     // ... the filter for the Apps we want to count
     *   }
     * })
    **/
    count<T extends AppCountArgs>(
      args?: Subset<T, AppCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppAggregateArgs>(args: Subset<T, AppAggregateArgs>): Prisma.PrismaPromise<GetAppAggregateType<T>>

    /**
     * Group by App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppGroupByArgs['orderBy'] }
        : { orderBy?: AppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the App model
   */
  readonly fields: AppFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for App.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appMenuItems<T extends App$appMenuItemsArgs<ExtArgs> = {}>(args?: Subset<T, App$appMenuItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appActions<T extends App$appActionsArgs<ExtArgs> = {}>(args?: Subset<T, App$appActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appOrganization<T extends App$appOrganizationArgs<ExtArgs> = {}>(args?: Subset<T, App$appOrganizationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    menuPermission<T extends App$menuPermissionArgs<ExtArgs> = {}>(args?: Subset<T, App$menuPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    actionPermission<T extends App$actionPermissionArgs<ExtArgs> = {}>(args?: Subset<T, App$actionPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the App model
   */
  interface AppFieldRefs {
    readonly id: FieldRef<"App", 'String'>
    readonly name: FieldRef<"App", 'String'>
    readonly description: FieldRef<"App", 'String'>
    readonly slug: FieldRef<"App", 'String'>
    readonly type: FieldRef<"App", 'AppType'>
    readonly imageUrl: FieldRef<"App", 'String'>
    readonly createdAt: FieldRef<"App", 'DateTime'>
    readonly updatedAt: FieldRef<"App", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * App findUnique
   */
  export type AppFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }

  /**
   * App findUniqueOrThrow
   */
  export type AppFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }

  /**
   * App findFirst
   */
  export type AppFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }

  /**
   * App findFirstOrThrow
   */
  export type AppFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }

  /**
   * App findMany
   */
  export type AppFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which Apps to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }

  /**
   * App create
   */
  export type AppCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The data needed to create a App.
     */
    data: XOR<AppCreateInput, AppUncheckedCreateInput>
  }

  /**
   * App createMany
   */
  export type AppCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Apps.
     */
    data: AppCreateManyInput | AppCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * App createManyAndReturn
   */
  export type AppCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * The data used to create many Apps.
     */
    data: AppCreateManyInput | AppCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * App update
   */
  export type AppUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The data needed to update a App.
     */
    data: XOR<AppUpdateInput, AppUncheckedUpdateInput>
    /**
     * Choose, which App to update.
     */
    where: AppWhereUniqueInput
  }

  /**
   * App updateMany
   */
  export type AppUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Apps.
     */
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     */
    where?: AppWhereInput
    /**
     * Limit how many Apps to update.
     */
    limit?: number
  }

  /**
   * App updateManyAndReturn
   */
  export type AppUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * The data used to update Apps.
     */
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     */
    where?: AppWhereInput
    /**
     * Limit how many Apps to update.
     */
    limit?: number
  }

  /**
   * App upsert
   */
  export type AppUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The filter to search for the App to update in case it exists.
     */
    where: AppWhereUniqueInput
    /**
     * In case the App found by the `where` argument doesn't exist, create a new App with this data.
     */
    create: XOR<AppCreateInput, AppUncheckedCreateInput>
    /**
     * In case the App was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppUpdateInput, AppUncheckedUpdateInput>
  }

  /**
   * App delete
   */
  export type AppDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter which App to delete.
     */
    where: AppWhereUniqueInput
  }

  /**
   * App deleteMany
   */
  export type AppDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apps to delete
     */
    where?: AppWhereInput
    /**
     * Limit how many Apps to delete.
     */
    limit?: number
  }

  /**
   * App.appMenuItems
   */
  export type App$appMenuItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    where?: AppMenuItemWhereInput
    orderBy?: AppMenuItemOrderByWithRelationInput | AppMenuItemOrderByWithRelationInput[]
    cursor?: AppMenuItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppMenuItemScalarFieldEnum | AppMenuItemScalarFieldEnum[]
  }

  /**
   * App.appActions
   */
  export type App$appActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    where?: AppActionWhereInput
    orderBy?: AppActionOrderByWithRelationInput | AppActionOrderByWithRelationInput[]
    cursor?: AppActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppActionScalarFieldEnum | AppActionScalarFieldEnum[]
  }

  /**
   * App.appOrganization
   */
  export type App$appOrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    where?: AppOrganizationWhereInput
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    cursor?: AppOrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppOrganizationScalarFieldEnum | AppOrganizationScalarFieldEnum[]
  }

  /**
   * App.menuPermission
   */
  export type App$menuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    where?: MenuPermissionWhereInput
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    cursor?: MenuPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * App.actionPermission
   */
  export type App$actionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    where?: ActionPermissionWhereInput
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    cursor?: ActionPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * App without action
   */
  export type AppDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the App
     */
    omit?: AppOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppInclude<ExtArgs> | null
  }


  /**
   * Model AppOrganization
   */

  export type AggregateAppOrganization = {
    _count: AppOrganizationCountAggregateOutputType | null
    _min: AppOrganizationMinAggregateOutputType | null
    _max: AppOrganizationMaxAggregateOutputType | null
  }

  export type AppOrganizationMinAggregateOutputType = {
    appId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppOrganizationMaxAggregateOutputType = {
    appId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppOrganizationCountAggregateOutputType = {
    appId: number
    organizationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppOrganizationMinAggregateInputType = {
    appId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppOrganizationMaxAggregateInputType = {
    appId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppOrganizationCountAggregateInputType = {
    appId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppOrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppOrganization to aggregate.
     */
    where?: AppOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppOrganizations to fetch.
     */
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppOrganizations
    **/
    _count?: true | AppOrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppOrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppOrganizationMaxAggregateInputType
  }

  export type GetAppOrganizationAggregateType<T extends AppOrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateAppOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppOrganization[P]>
      : GetScalarType<T[P], AggregateAppOrganization[P]>
  }




  export type AppOrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppOrganizationWhereInput
    orderBy?: AppOrganizationOrderByWithAggregationInput | AppOrganizationOrderByWithAggregationInput[]
    by: AppOrganizationScalarFieldEnum[] | AppOrganizationScalarFieldEnum
    having?: AppOrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppOrganizationCountAggregateInputType | true
    _min?: AppOrganizationMinAggregateInputType
    _max?: AppOrganizationMaxAggregateInputType
  }

  export type AppOrganizationGroupByOutputType = {
    appId: string
    organizationId: string
    createdAt: Date
    updatedAt: Date
    _count: AppOrganizationCountAggregateOutputType | null
    _min: AppOrganizationMinAggregateOutputType | null
    _max: AppOrganizationMaxAggregateOutputType | null
  }

  type GetAppOrganizationGroupByPayload<T extends AppOrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppOrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppOrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppOrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], AppOrganizationGroupByOutputType[P]>
        }
      >
    >


  export type AppOrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    appId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appOrganization"]>

  export type AppOrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    appId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appOrganization"]>

  export type AppOrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    appId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appOrganization"]>

  export type AppOrganizationSelectScalar = {
    appId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppOrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"appId" | "organizationId" | "createdAt" | "updatedAt", ExtArgs["result"]["appOrganization"]>
  export type AppOrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type AppOrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type AppOrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $AppOrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppOrganization"
    objects: {
      app: Prisma.$AppPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      appId: string
      organizationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appOrganization"]>
    composites: {}
  }

  type AppOrganizationGetPayload<S extends boolean | null | undefined | AppOrganizationDefaultArgs> = $Result.GetResult<Prisma.$AppOrganizationPayload, S>

  type AppOrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppOrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppOrganizationCountAggregateInputType | true
    }

  export interface AppOrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppOrganization'], meta: { name: 'AppOrganization' } }
    /**
     * Find zero or one AppOrganization that matches the filter.
     * @param {AppOrganizationFindUniqueArgs} args - Arguments to find a AppOrganization
     * @example
     * // Get one AppOrganization
     * const appOrganization = await prisma.appOrganization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppOrganizationFindUniqueArgs>(args: SelectSubset<T, AppOrganizationFindUniqueArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppOrganization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppOrganizationFindUniqueOrThrowArgs} args - Arguments to find a AppOrganization
     * @example
     * // Get one AppOrganization
     * const appOrganization = await prisma.appOrganization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppOrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, AppOrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppOrganization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationFindFirstArgs} args - Arguments to find a AppOrganization
     * @example
     * // Get one AppOrganization
     * const appOrganization = await prisma.appOrganization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppOrganizationFindFirstArgs>(args?: SelectSubset<T, AppOrganizationFindFirstArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppOrganization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationFindFirstOrThrowArgs} args - Arguments to find a AppOrganization
     * @example
     * // Get one AppOrganization
     * const appOrganization = await prisma.appOrganization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppOrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, AppOrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppOrganizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppOrganizations
     * const appOrganizations = await prisma.appOrganization.findMany()
     * 
     * // Get first 10 AppOrganizations
     * const appOrganizations = await prisma.appOrganization.findMany({ take: 10 })
     * 
     * // Only select the `appId`
     * const appOrganizationWithAppIdOnly = await prisma.appOrganization.findMany({ select: { appId: true } })
     * 
     */
    findMany<T extends AppOrganizationFindManyArgs>(args?: SelectSubset<T, AppOrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppOrganization.
     * @param {AppOrganizationCreateArgs} args - Arguments to create a AppOrganization.
     * @example
     * // Create one AppOrganization
     * const AppOrganization = await prisma.appOrganization.create({
     *   data: {
     *     // ... data to create a AppOrganization
     *   }
     * })
     * 
     */
    create<T extends AppOrganizationCreateArgs>(args: SelectSubset<T, AppOrganizationCreateArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppOrganizations.
     * @param {AppOrganizationCreateManyArgs} args - Arguments to create many AppOrganizations.
     * @example
     * // Create many AppOrganizations
     * const appOrganization = await prisma.appOrganization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppOrganizationCreateManyArgs>(args?: SelectSubset<T, AppOrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppOrganizations and returns the data saved in the database.
     * @param {AppOrganizationCreateManyAndReturnArgs} args - Arguments to create many AppOrganizations.
     * @example
     * // Create many AppOrganizations
     * const appOrganization = await prisma.appOrganization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppOrganizations and only return the `appId`
     * const appOrganizationWithAppIdOnly = await prisma.appOrganization.createManyAndReturn({
     *   select: { appId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppOrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, AppOrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppOrganization.
     * @param {AppOrganizationDeleteArgs} args - Arguments to delete one AppOrganization.
     * @example
     * // Delete one AppOrganization
     * const AppOrganization = await prisma.appOrganization.delete({
     *   where: {
     *     // ... filter to delete one AppOrganization
     *   }
     * })
     * 
     */
    delete<T extends AppOrganizationDeleteArgs>(args: SelectSubset<T, AppOrganizationDeleteArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppOrganization.
     * @param {AppOrganizationUpdateArgs} args - Arguments to update one AppOrganization.
     * @example
     * // Update one AppOrganization
     * const appOrganization = await prisma.appOrganization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppOrganizationUpdateArgs>(args: SelectSubset<T, AppOrganizationUpdateArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppOrganizations.
     * @param {AppOrganizationDeleteManyArgs} args - Arguments to filter AppOrganizations to delete.
     * @example
     * // Delete a few AppOrganizations
     * const { count } = await prisma.appOrganization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppOrganizationDeleteManyArgs>(args?: SelectSubset<T, AppOrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppOrganizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppOrganizations
     * const appOrganization = await prisma.appOrganization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppOrganizationUpdateManyArgs>(args: SelectSubset<T, AppOrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppOrganizations and returns the data updated in the database.
     * @param {AppOrganizationUpdateManyAndReturnArgs} args - Arguments to update many AppOrganizations.
     * @example
     * // Update many AppOrganizations
     * const appOrganization = await prisma.appOrganization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppOrganizations and only return the `appId`
     * const appOrganizationWithAppIdOnly = await prisma.appOrganization.updateManyAndReturn({
     *   select: { appId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppOrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, AppOrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppOrganization.
     * @param {AppOrganizationUpsertArgs} args - Arguments to update or create a AppOrganization.
     * @example
     * // Update or create a AppOrganization
     * const appOrganization = await prisma.appOrganization.upsert({
     *   create: {
     *     // ... data to create a AppOrganization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppOrganization we want to update
     *   }
     * })
     */
    upsert<T extends AppOrganizationUpsertArgs>(args: SelectSubset<T, AppOrganizationUpsertArgs<ExtArgs>>): Prisma__AppOrganizationClient<$Result.GetResult<Prisma.$AppOrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppOrganizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationCountArgs} args - Arguments to filter AppOrganizations to count.
     * @example
     * // Count the number of AppOrganizations
     * const count = await prisma.appOrganization.count({
     *   where: {
     *     // ... the filter for the AppOrganizations we want to count
     *   }
     * })
    **/
    count<T extends AppOrganizationCountArgs>(
      args?: Subset<T, AppOrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppOrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppOrganization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppOrganizationAggregateArgs>(args: Subset<T, AppOrganizationAggregateArgs>): Prisma.PrismaPromise<GetAppOrganizationAggregateType<T>>

    /**
     * Group by AppOrganization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppOrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppOrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppOrganizationGroupByArgs['orderBy'] }
        : { orderBy?: AppOrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppOrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppOrganization model
   */
  readonly fields: AppOrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppOrganization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppOrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppOrganization model
   */
  interface AppOrganizationFieldRefs {
    readonly appId: FieldRef<"AppOrganization", 'String'>
    readonly organizationId: FieldRef<"AppOrganization", 'String'>
    readonly createdAt: FieldRef<"AppOrganization", 'DateTime'>
    readonly updatedAt: FieldRef<"AppOrganization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppOrganization findUnique
   */
  export type AppOrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which AppOrganization to fetch.
     */
    where: AppOrganizationWhereUniqueInput
  }

  /**
   * AppOrganization findUniqueOrThrow
   */
  export type AppOrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which AppOrganization to fetch.
     */
    where: AppOrganizationWhereUniqueInput
  }

  /**
   * AppOrganization findFirst
   */
  export type AppOrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which AppOrganization to fetch.
     */
    where?: AppOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppOrganizations to fetch.
     */
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppOrganizations.
     */
    cursor?: AppOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppOrganizations.
     */
    distinct?: AppOrganizationScalarFieldEnum | AppOrganizationScalarFieldEnum[]
  }

  /**
   * AppOrganization findFirstOrThrow
   */
  export type AppOrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which AppOrganization to fetch.
     */
    where?: AppOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppOrganizations to fetch.
     */
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppOrganizations.
     */
    cursor?: AppOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppOrganizations.
     */
    distinct?: AppOrganizationScalarFieldEnum | AppOrganizationScalarFieldEnum[]
  }

  /**
   * AppOrganization findMany
   */
  export type AppOrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which AppOrganizations to fetch.
     */
    where?: AppOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppOrganizations to fetch.
     */
    orderBy?: AppOrganizationOrderByWithRelationInput | AppOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppOrganizations.
     */
    cursor?: AppOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppOrganizations.
     */
    skip?: number
    distinct?: AppOrganizationScalarFieldEnum | AppOrganizationScalarFieldEnum[]
  }

  /**
   * AppOrganization create
   */
  export type AppOrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a AppOrganization.
     */
    data: XOR<AppOrganizationCreateInput, AppOrganizationUncheckedCreateInput>
  }

  /**
   * AppOrganization createMany
   */
  export type AppOrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppOrganizations.
     */
    data: AppOrganizationCreateManyInput | AppOrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppOrganization createManyAndReturn
   */
  export type AppOrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many AppOrganizations.
     */
    data: AppOrganizationCreateManyInput | AppOrganizationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppOrganization update
   */
  export type AppOrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a AppOrganization.
     */
    data: XOR<AppOrganizationUpdateInput, AppOrganizationUncheckedUpdateInput>
    /**
     * Choose, which AppOrganization to update.
     */
    where: AppOrganizationWhereUniqueInput
  }

  /**
   * AppOrganization updateMany
   */
  export type AppOrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppOrganizations.
     */
    data: XOR<AppOrganizationUpdateManyMutationInput, AppOrganizationUncheckedUpdateManyInput>
    /**
     * Filter which AppOrganizations to update
     */
    where?: AppOrganizationWhereInput
    /**
     * Limit how many AppOrganizations to update.
     */
    limit?: number
  }

  /**
   * AppOrganization updateManyAndReturn
   */
  export type AppOrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * The data used to update AppOrganizations.
     */
    data: XOR<AppOrganizationUpdateManyMutationInput, AppOrganizationUncheckedUpdateManyInput>
    /**
     * Filter which AppOrganizations to update
     */
    where?: AppOrganizationWhereInput
    /**
     * Limit how many AppOrganizations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppOrganization upsert
   */
  export type AppOrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the AppOrganization to update in case it exists.
     */
    where: AppOrganizationWhereUniqueInput
    /**
     * In case the AppOrganization found by the `where` argument doesn't exist, create a new AppOrganization with this data.
     */
    create: XOR<AppOrganizationCreateInput, AppOrganizationUncheckedCreateInput>
    /**
     * In case the AppOrganization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppOrganizationUpdateInput, AppOrganizationUncheckedUpdateInput>
  }

  /**
   * AppOrganization delete
   */
  export type AppOrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
    /**
     * Filter which AppOrganization to delete.
     */
    where: AppOrganizationWhereUniqueInput
  }

  /**
   * AppOrganization deleteMany
   */
  export type AppOrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppOrganizations to delete
     */
    where?: AppOrganizationWhereInput
    /**
     * Limit how many AppOrganizations to delete.
     */
    limit?: number
  }

  /**
   * AppOrganization without action
   */
  export type AppOrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppOrganization
     */
    select?: AppOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppOrganization
     */
    omit?: AppOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppOrganizationInclude<ExtArgs> | null
  }


  /**
   * Model AppMenuItem
   */

  export type AggregateAppMenuItem = {
    _count: AppMenuItemCountAggregateOutputType | null
    _min: AppMenuItemMinAggregateOutputType | null
    _max: AppMenuItemMaxAggregateOutputType | null
  }

  export type AppMenuItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    icon: string | null
    appId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppMenuItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    icon: string | null
    appId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppMenuItemCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug: number
    icon: number
    appId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppMenuItemMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppMenuItemMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppMenuItemCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppMenuItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppMenuItem to aggregate.
     */
    where?: AppMenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppMenuItems to fetch.
     */
    orderBy?: AppMenuItemOrderByWithRelationInput | AppMenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppMenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppMenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppMenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppMenuItems
    **/
    _count?: true | AppMenuItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMenuItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMenuItemMaxAggregateInputType
  }

  export type GetAppMenuItemAggregateType<T extends AppMenuItemAggregateArgs> = {
        [P in keyof T & keyof AggregateAppMenuItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppMenuItem[P]>
      : GetScalarType<T[P], AggregateAppMenuItem[P]>
  }




  export type AppMenuItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppMenuItemWhereInput
    orderBy?: AppMenuItemOrderByWithAggregationInput | AppMenuItemOrderByWithAggregationInput[]
    by: AppMenuItemScalarFieldEnum[] | AppMenuItemScalarFieldEnum
    having?: AppMenuItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppMenuItemCountAggregateInputType | true
    _min?: AppMenuItemMinAggregateInputType
    _max?: AppMenuItemMaxAggregateInputType
  }

  export type AppMenuItemGroupByOutputType = {
    id: string
    name: string
    description: string
    slug: string
    icon: string | null
    appId: string
    createdAt: Date
    updatedAt: Date
    _count: AppMenuItemCountAggregateOutputType | null
    _min: AppMenuItemMinAggregateOutputType | null
    _max: AppMenuItemMaxAggregateOutputType | null
  }

  type GetAppMenuItemGroupByPayload<T extends AppMenuItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppMenuItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppMenuItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppMenuItemGroupByOutputType[P]>
            : GetScalarType<T[P], AppMenuItemGroupByOutputType[P]>
        }
      >
    >


  export type AppMenuItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    menuPermission?: boolean | AppMenuItem$menuPermissionArgs<ExtArgs>
    _count?: boolean | AppMenuItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appMenuItem"]>

  export type AppMenuItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appMenuItem"]>

  export type AppMenuItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appMenuItem"]>

  export type AppMenuItemSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppMenuItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slug" | "icon" | "appId" | "createdAt" | "updatedAt", ExtArgs["result"]["appMenuItem"]>
  export type AppMenuItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    menuPermission?: boolean | AppMenuItem$menuPermissionArgs<ExtArgs>
    _count?: boolean | AppMenuItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppMenuItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
  }
  export type AppMenuItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
  }

  export type $AppMenuItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppMenuItem"
    objects: {
      app: Prisma.$AppPayload<ExtArgs>
      menuPermission: Prisma.$MenuPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      slug: string
      icon: string | null
      appId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appMenuItem"]>
    composites: {}
  }

  type AppMenuItemGetPayload<S extends boolean | null | undefined | AppMenuItemDefaultArgs> = $Result.GetResult<Prisma.$AppMenuItemPayload, S>

  type AppMenuItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppMenuItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppMenuItemCountAggregateInputType | true
    }

  export interface AppMenuItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppMenuItem'], meta: { name: 'AppMenuItem' } }
    /**
     * Find zero or one AppMenuItem that matches the filter.
     * @param {AppMenuItemFindUniqueArgs} args - Arguments to find a AppMenuItem
     * @example
     * // Get one AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppMenuItemFindUniqueArgs>(args: SelectSubset<T, AppMenuItemFindUniqueArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppMenuItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppMenuItemFindUniqueOrThrowArgs} args - Arguments to find a AppMenuItem
     * @example
     * // Get one AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppMenuItemFindUniqueOrThrowArgs>(args: SelectSubset<T, AppMenuItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppMenuItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemFindFirstArgs} args - Arguments to find a AppMenuItem
     * @example
     * // Get one AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppMenuItemFindFirstArgs>(args?: SelectSubset<T, AppMenuItemFindFirstArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppMenuItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemFindFirstOrThrowArgs} args - Arguments to find a AppMenuItem
     * @example
     * // Get one AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppMenuItemFindFirstOrThrowArgs>(args?: SelectSubset<T, AppMenuItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppMenuItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppMenuItems
     * const appMenuItems = await prisma.appMenuItem.findMany()
     * 
     * // Get first 10 AppMenuItems
     * const appMenuItems = await prisma.appMenuItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appMenuItemWithIdOnly = await prisma.appMenuItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppMenuItemFindManyArgs>(args?: SelectSubset<T, AppMenuItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppMenuItem.
     * @param {AppMenuItemCreateArgs} args - Arguments to create a AppMenuItem.
     * @example
     * // Create one AppMenuItem
     * const AppMenuItem = await prisma.appMenuItem.create({
     *   data: {
     *     // ... data to create a AppMenuItem
     *   }
     * })
     * 
     */
    create<T extends AppMenuItemCreateArgs>(args: SelectSubset<T, AppMenuItemCreateArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppMenuItems.
     * @param {AppMenuItemCreateManyArgs} args - Arguments to create many AppMenuItems.
     * @example
     * // Create many AppMenuItems
     * const appMenuItem = await prisma.appMenuItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppMenuItemCreateManyArgs>(args?: SelectSubset<T, AppMenuItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppMenuItems and returns the data saved in the database.
     * @param {AppMenuItemCreateManyAndReturnArgs} args - Arguments to create many AppMenuItems.
     * @example
     * // Create many AppMenuItems
     * const appMenuItem = await prisma.appMenuItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppMenuItems and only return the `id`
     * const appMenuItemWithIdOnly = await prisma.appMenuItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppMenuItemCreateManyAndReturnArgs>(args?: SelectSubset<T, AppMenuItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppMenuItem.
     * @param {AppMenuItemDeleteArgs} args - Arguments to delete one AppMenuItem.
     * @example
     * // Delete one AppMenuItem
     * const AppMenuItem = await prisma.appMenuItem.delete({
     *   where: {
     *     // ... filter to delete one AppMenuItem
     *   }
     * })
     * 
     */
    delete<T extends AppMenuItemDeleteArgs>(args: SelectSubset<T, AppMenuItemDeleteArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppMenuItem.
     * @param {AppMenuItemUpdateArgs} args - Arguments to update one AppMenuItem.
     * @example
     * // Update one AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppMenuItemUpdateArgs>(args: SelectSubset<T, AppMenuItemUpdateArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppMenuItems.
     * @param {AppMenuItemDeleteManyArgs} args - Arguments to filter AppMenuItems to delete.
     * @example
     * // Delete a few AppMenuItems
     * const { count } = await prisma.appMenuItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppMenuItemDeleteManyArgs>(args?: SelectSubset<T, AppMenuItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppMenuItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppMenuItems
     * const appMenuItem = await prisma.appMenuItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppMenuItemUpdateManyArgs>(args: SelectSubset<T, AppMenuItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppMenuItems and returns the data updated in the database.
     * @param {AppMenuItemUpdateManyAndReturnArgs} args - Arguments to update many AppMenuItems.
     * @example
     * // Update many AppMenuItems
     * const appMenuItem = await prisma.appMenuItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppMenuItems and only return the `id`
     * const appMenuItemWithIdOnly = await prisma.appMenuItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppMenuItemUpdateManyAndReturnArgs>(args: SelectSubset<T, AppMenuItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppMenuItem.
     * @param {AppMenuItemUpsertArgs} args - Arguments to update or create a AppMenuItem.
     * @example
     * // Update or create a AppMenuItem
     * const appMenuItem = await prisma.appMenuItem.upsert({
     *   create: {
     *     // ... data to create a AppMenuItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppMenuItem we want to update
     *   }
     * })
     */
    upsert<T extends AppMenuItemUpsertArgs>(args: SelectSubset<T, AppMenuItemUpsertArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppMenuItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemCountArgs} args - Arguments to filter AppMenuItems to count.
     * @example
     * // Count the number of AppMenuItems
     * const count = await prisma.appMenuItem.count({
     *   where: {
     *     // ... the filter for the AppMenuItems we want to count
     *   }
     * })
    **/
    count<T extends AppMenuItemCountArgs>(
      args?: Subset<T, AppMenuItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppMenuItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppMenuItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppMenuItemAggregateArgs>(args: Subset<T, AppMenuItemAggregateArgs>): Prisma.PrismaPromise<GetAppMenuItemAggregateType<T>>

    /**
     * Group by AppMenuItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppMenuItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppMenuItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppMenuItemGroupByArgs['orderBy'] }
        : { orderBy?: AppMenuItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppMenuItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppMenuItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppMenuItem model
   */
  readonly fields: AppMenuItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppMenuItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppMenuItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    menuPermission<T extends AppMenuItem$menuPermissionArgs<ExtArgs> = {}>(args?: Subset<T, AppMenuItem$menuPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppMenuItem model
   */
  interface AppMenuItemFieldRefs {
    readonly id: FieldRef<"AppMenuItem", 'String'>
    readonly name: FieldRef<"AppMenuItem", 'String'>
    readonly description: FieldRef<"AppMenuItem", 'String'>
    readonly slug: FieldRef<"AppMenuItem", 'String'>
    readonly icon: FieldRef<"AppMenuItem", 'String'>
    readonly appId: FieldRef<"AppMenuItem", 'String'>
    readonly createdAt: FieldRef<"AppMenuItem", 'DateTime'>
    readonly updatedAt: FieldRef<"AppMenuItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppMenuItem findUnique
   */
  export type AppMenuItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter, which AppMenuItem to fetch.
     */
    where: AppMenuItemWhereUniqueInput
  }

  /**
   * AppMenuItem findUniqueOrThrow
   */
  export type AppMenuItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter, which AppMenuItem to fetch.
     */
    where: AppMenuItemWhereUniqueInput
  }

  /**
   * AppMenuItem findFirst
   */
  export type AppMenuItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter, which AppMenuItem to fetch.
     */
    where?: AppMenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppMenuItems to fetch.
     */
    orderBy?: AppMenuItemOrderByWithRelationInput | AppMenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppMenuItems.
     */
    cursor?: AppMenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppMenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppMenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppMenuItems.
     */
    distinct?: AppMenuItemScalarFieldEnum | AppMenuItemScalarFieldEnum[]
  }

  /**
   * AppMenuItem findFirstOrThrow
   */
  export type AppMenuItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter, which AppMenuItem to fetch.
     */
    where?: AppMenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppMenuItems to fetch.
     */
    orderBy?: AppMenuItemOrderByWithRelationInput | AppMenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppMenuItems.
     */
    cursor?: AppMenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppMenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppMenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppMenuItems.
     */
    distinct?: AppMenuItemScalarFieldEnum | AppMenuItemScalarFieldEnum[]
  }

  /**
   * AppMenuItem findMany
   */
  export type AppMenuItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter, which AppMenuItems to fetch.
     */
    where?: AppMenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppMenuItems to fetch.
     */
    orderBy?: AppMenuItemOrderByWithRelationInput | AppMenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppMenuItems.
     */
    cursor?: AppMenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppMenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppMenuItems.
     */
    skip?: number
    distinct?: AppMenuItemScalarFieldEnum | AppMenuItemScalarFieldEnum[]
  }

  /**
   * AppMenuItem create
   */
  export type AppMenuItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * The data needed to create a AppMenuItem.
     */
    data: XOR<AppMenuItemCreateInput, AppMenuItemUncheckedCreateInput>
  }

  /**
   * AppMenuItem createMany
   */
  export type AppMenuItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppMenuItems.
     */
    data: AppMenuItemCreateManyInput | AppMenuItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppMenuItem createManyAndReturn
   */
  export type AppMenuItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * The data used to create many AppMenuItems.
     */
    data: AppMenuItemCreateManyInput | AppMenuItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppMenuItem update
   */
  export type AppMenuItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * The data needed to update a AppMenuItem.
     */
    data: XOR<AppMenuItemUpdateInput, AppMenuItemUncheckedUpdateInput>
    /**
     * Choose, which AppMenuItem to update.
     */
    where: AppMenuItemWhereUniqueInput
  }

  /**
   * AppMenuItem updateMany
   */
  export type AppMenuItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppMenuItems.
     */
    data: XOR<AppMenuItemUpdateManyMutationInput, AppMenuItemUncheckedUpdateManyInput>
    /**
     * Filter which AppMenuItems to update
     */
    where?: AppMenuItemWhereInput
    /**
     * Limit how many AppMenuItems to update.
     */
    limit?: number
  }

  /**
   * AppMenuItem updateManyAndReturn
   */
  export type AppMenuItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * The data used to update AppMenuItems.
     */
    data: XOR<AppMenuItemUpdateManyMutationInput, AppMenuItemUncheckedUpdateManyInput>
    /**
     * Filter which AppMenuItems to update
     */
    where?: AppMenuItemWhereInput
    /**
     * Limit how many AppMenuItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppMenuItem upsert
   */
  export type AppMenuItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * The filter to search for the AppMenuItem to update in case it exists.
     */
    where: AppMenuItemWhereUniqueInput
    /**
     * In case the AppMenuItem found by the `where` argument doesn't exist, create a new AppMenuItem with this data.
     */
    create: XOR<AppMenuItemCreateInput, AppMenuItemUncheckedCreateInput>
    /**
     * In case the AppMenuItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppMenuItemUpdateInput, AppMenuItemUncheckedUpdateInput>
  }

  /**
   * AppMenuItem delete
   */
  export type AppMenuItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
    /**
     * Filter which AppMenuItem to delete.
     */
    where: AppMenuItemWhereUniqueInput
  }

  /**
   * AppMenuItem deleteMany
   */
  export type AppMenuItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppMenuItems to delete
     */
    where?: AppMenuItemWhereInput
    /**
     * Limit how many AppMenuItems to delete.
     */
    limit?: number
  }

  /**
   * AppMenuItem.menuPermission
   */
  export type AppMenuItem$menuPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    where?: MenuPermissionWhereInput
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    cursor?: MenuPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * AppMenuItem without action
   */
  export type AppMenuItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppMenuItem
     */
    select?: AppMenuItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppMenuItem
     */
    omit?: AppMenuItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppMenuItemInclude<ExtArgs> | null
  }


  /**
   * Model AppAction
   */

  export type AggregateAppAction = {
    _count: AppActionCountAggregateOutputType | null
    _min: AppActionMinAggregateOutputType | null
    _max: AppActionMaxAggregateOutputType | null
  }

  export type AppActionMinAggregateOutputType = {
    id: string | null
    actionName: string | null
    description: string | null
    actionType: $Enums.AppActionType | null
    icon: string | null
    appId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppActionMaxAggregateOutputType = {
    id: string | null
    actionName: string | null
    description: string | null
    actionType: $Enums.AppActionType | null
    icon: string | null
    appId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppActionCountAggregateOutputType = {
    id: number
    actionName: number
    description: number
    actionType: number
    icon: number
    appId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppActionMinAggregateInputType = {
    id?: true
    actionName?: true
    description?: true
    actionType?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppActionMaxAggregateInputType = {
    id?: true
    actionName?: true
    description?: true
    actionType?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppActionCountAggregateInputType = {
    id?: true
    actionName?: true
    description?: true
    actionType?: true
    icon?: true
    appId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppAction to aggregate.
     */
    where?: AppActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppActions to fetch.
     */
    orderBy?: AppActionOrderByWithRelationInput | AppActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppActions
    **/
    _count?: true | AppActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppActionMaxAggregateInputType
  }

  export type GetAppActionAggregateType<T extends AppActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAppAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppAction[P]>
      : GetScalarType<T[P], AggregateAppAction[P]>
  }




  export type AppActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppActionWhereInput
    orderBy?: AppActionOrderByWithAggregationInput | AppActionOrderByWithAggregationInput[]
    by: AppActionScalarFieldEnum[] | AppActionScalarFieldEnum
    having?: AppActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppActionCountAggregateInputType | true
    _min?: AppActionMinAggregateInputType
    _max?: AppActionMaxAggregateInputType
  }

  export type AppActionGroupByOutputType = {
    id: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon: string | null
    appId: string
    createdAt: Date
    updatedAt: Date
    _count: AppActionCountAggregateOutputType | null
    _min: AppActionMinAggregateOutputType | null
    _max: AppActionMaxAggregateOutputType | null
  }

  type GetAppActionGroupByPayload<T extends AppActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppActionGroupByOutputType[P]>
            : GetScalarType<T[P], AppActionGroupByOutputType[P]>
        }
      >
    >


  export type AppActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionName?: boolean
    description?: boolean
    actionType?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    actionPermission?: boolean | AppAction$actionPermissionArgs<ExtArgs>
    _count?: boolean | AppActionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appAction"]>

  export type AppActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionName?: boolean
    description?: boolean
    actionType?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appAction"]>

  export type AppActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionName?: boolean
    description?: boolean
    actionType?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appAction"]>

  export type AppActionSelectScalar = {
    id?: boolean
    actionName?: boolean
    description?: boolean
    actionType?: boolean
    icon?: boolean
    appId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "actionName" | "description" | "actionType" | "icon" | "appId" | "createdAt" | "updatedAt", ExtArgs["result"]["appAction"]>
  export type AppActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    actionPermission?: boolean | AppAction$actionPermissionArgs<ExtArgs>
    _count?: boolean | AppActionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
  }
  export type AppActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
  }

  export type $AppActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppAction"
    objects: {
      app: Prisma.$AppPayload<ExtArgs>
      actionPermission: Prisma.$ActionPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actionName: string
      description: string
      actionType: $Enums.AppActionType
      icon: string | null
      appId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appAction"]>
    composites: {}
  }

  type AppActionGetPayload<S extends boolean | null | undefined | AppActionDefaultArgs> = $Result.GetResult<Prisma.$AppActionPayload, S>

  type AppActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppActionCountAggregateInputType | true
    }

  export interface AppActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppAction'], meta: { name: 'AppAction' } }
    /**
     * Find zero or one AppAction that matches the filter.
     * @param {AppActionFindUniqueArgs} args - Arguments to find a AppAction
     * @example
     * // Get one AppAction
     * const appAction = await prisma.appAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppActionFindUniqueArgs>(args: SelectSubset<T, AppActionFindUniqueArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppActionFindUniqueOrThrowArgs} args - Arguments to find a AppAction
     * @example
     * // Get one AppAction
     * const appAction = await prisma.appAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppActionFindUniqueOrThrowArgs>(args: SelectSubset<T, AppActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionFindFirstArgs} args - Arguments to find a AppAction
     * @example
     * // Get one AppAction
     * const appAction = await prisma.appAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppActionFindFirstArgs>(args?: SelectSubset<T, AppActionFindFirstArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionFindFirstOrThrowArgs} args - Arguments to find a AppAction
     * @example
     * // Get one AppAction
     * const appAction = await prisma.appAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppActionFindFirstOrThrowArgs>(args?: SelectSubset<T, AppActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppActions
     * const appActions = await prisma.appAction.findMany()
     * 
     * // Get first 10 AppActions
     * const appActions = await prisma.appAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appActionWithIdOnly = await prisma.appAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppActionFindManyArgs>(args?: SelectSubset<T, AppActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppAction.
     * @param {AppActionCreateArgs} args - Arguments to create a AppAction.
     * @example
     * // Create one AppAction
     * const AppAction = await prisma.appAction.create({
     *   data: {
     *     // ... data to create a AppAction
     *   }
     * })
     * 
     */
    create<T extends AppActionCreateArgs>(args: SelectSubset<T, AppActionCreateArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppActions.
     * @param {AppActionCreateManyArgs} args - Arguments to create many AppActions.
     * @example
     * // Create many AppActions
     * const appAction = await prisma.appAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppActionCreateManyArgs>(args?: SelectSubset<T, AppActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppActions and returns the data saved in the database.
     * @param {AppActionCreateManyAndReturnArgs} args - Arguments to create many AppActions.
     * @example
     * // Create many AppActions
     * const appAction = await prisma.appAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppActions and only return the `id`
     * const appActionWithIdOnly = await prisma.appAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppActionCreateManyAndReturnArgs>(args?: SelectSubset<T, AppActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppAction.
     * @param {AppActionDeleteArgs} args - Arguments to delete one AppAction.
     * @example
     * // Delete one AppAction
     * const AppAction = await prisma.appAction.delete({
     *   where: {
     *     // ... filter to delete one AppAction
     *   }
     * })
     * 
     */
    delete<T extends AppActionDeleteArgs>(args: SelectSubset<T, AppActionDeleteArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppAction.
     * @param {AppActionUpdateArgs} args - Arguments to update one AppAction.
     * @example
     * // Update one AppAction
     * const appAction = await prisma.appAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppActionUpdateArgs>(args: SelectSubset<T, AppActionUpdateArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppActions.
     * @param {AppActionDeleteManyArgs} args - Arguments to filter AppActions to delete.
     * @example
     * // Delete a few AppActions
     * const { count } = await prisma.appAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppActionDeleteManyArgs>(args?: SelectSubset<T, AppActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppActions
     * const appAction = await prisma.appAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppActionUpdateManyArgs>(args: SelectSubset<T, AppActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppActions and returns the data updated in the database.
     * @param {AppActionUpdateManyAndReturnArgs} args - Arguments to update many AppActions.
     * @example
     * // Update many AppActions
     * const appAction = await prisma.appAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppActions and only return the `id`
     * const appActionWithIdOnly = await prisma.appAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppActionUpdateManyAndReturnArgs>(args: SelectSubset<T, AppActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppAction.
     * @param {AppActionUpsertArgs} args - Arguments to update or create a AppAction.
     * @example
     * // Update or create a AppAction
     * const appAction = await prisma.appAction.upsert({
     *   create: {
     *     // ... data to create a AppAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppAction we want to update
     *   }
     * })
     */
    upsert<T extends AppActionUpsertArgs>(args: SelectSubset<T, AppActionUpsertArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionCountArgs} args - Arguments to filter AppActions to count.
     * @example
     * // Count the number of AppActions
     * const count = await prisma.appAction.count({
     *   where: {
     *     // ... the filter for the AppActions we want to count
     *   }
     * })
    **/
    count<T extends AppActionCountArgs>(
      args?: Subset<T, AppActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppActionAggregateArgs>(args: Subset<T, AppActionAggregateArgs>): Prisma.PrismaPromise<GetAppActionAggregateType<T>>

    /**
     * Group by AppAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppActionGroupByArgs['orderBy'] }
        : { orderBy?: AppActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppAction model
   */
  readonly fields: AppActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    actionPermission<T extends AppAction$actionPermissionArgs<ExtArgs> = {}>(args?: Subset<T, AppAction$actionPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppAction model
   */
  interface AppActionFieldRefs {
    readonly id: FieldRef<"AppAction", 'String'>
    readonly actionName: FieldRef<"AppAction", 'String'>
    readonly description: FieldRef<"AppAction", 'String'>
    readonly actionType: FieldRef<"AppAction", 'AppActionType'>
    readonly icon: FieldRef<"AppAction", 'String'>
    readonly appId: FieldRef<"AppAction", 'String'>
    readonly createdAt: FieldRef<"AppAction", 'DateTime'>
    readonly updatedAt: FieldRef<"AppAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppAction findUnique
   */
  export type AppActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter, which AppAction to fetch.
     */
    where: AppActionWhereUniqueInput
  }

  /**
   * AppAction findUniqueOrThrow
   */
  export type AppActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter, which AppAction to fetch.
     */
    where: AppActionWhereUniqueInput
  }

  /**
   * AppAction findFirst
   */
  export type AppActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter, which AppAction to fetch.
     */
    where?: AppActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppActions to fetch.
     */
    orderBy?: AppActionOrderByWithRelationInput | AppActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppActions.
     */
    cursor?: AppActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppActions.
     */
    distinct?: AppActionScalarFieldEnum | AppActionScalarFieldEnum[]
  }

  /**
   * AppAction findFirstOrThrow
   */
  export type AppActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter, which AppAction to fetch.
     */
    where?: AppActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppActions to fetch.
     */
    orderBy?: AppActionOrderByWithRelationInput | AppActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppActions.
     */
    cursor?: AppActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppActions.
     */
    distinct?: AppActionScalarFieldEnum | AppActionScalarFieldEnum[]
  }

  /**
   * AppAction findMany
   */
  export type AppActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter, which AppActions to fetch.
     */
    where?: AppActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppActions to fetch.
     */
    orderBy?: AppActionOrderByWithRelationInput | AppActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppActions.
     */
    cursor?: AppActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppActions.
     */
    skip?: number
    distinct?: AppActionScalarFieldEnum | AppActionScalarFieldEnum[]
  }

  /**
   * AppAction create
   */
  export type AppActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * The data needed to create a AppAction.
     */
    data: XOR<AppActionCreateInput, AppActionUncheckedCreateInput>
  }

  /**
   * AppAction createMany
   */
  export type AppActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppActions.
     */
    data: AppActionCreateManyInput | AppActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppAction createManyAndReturn
   */
  export type AppActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * The data used to create many AppActions.
     */
    data: AppActionCreateManyInput | AppActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppAction update
   */
  export type AppActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * The data needed to update a AppAction.
     */
    data: XOR<AppActionUpdateInput, AppActionUncheckedUpdateInput>
    /**
     * Choose, which AppAction to update.
     */
    where: AppActionWhereUniqueInput
  }

  /**
   * AppAction updateMany
   */
  export type AppActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppActions.
     */
    data: XOR<AppActionUpdateManyMutationInput, AppActionUncheckedUpdateManyInput>
    /**
     * Filter which AppActions to update
     */
    where?: AppActionWhereInput
    /**
     * Limit how many AppActions to update.
     */
    limit?: number
  }

  /**
   * AppAction updateManyAndReturn
   */
  export type AppActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * The data used to update AppActions.
     */
    data: XOR<AppActionUpdateManyMutationInput, AppActionUncheckedUpdateManyInput>
    /**
     * Filter which AppActions to update
     */
    where?: AppActionWhereInput
    /**
     * Limit how many AppActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppAction upsert
   */
  export type AppActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * The filter to search for the AppAction to update in case it exists.
     */
    where: AppActionWhereUniqueInput
    /**
     * In case the AppAction found by the `where` argument doesn't exist, create a new AppAction with this data.
     */
    create: XOR<AppActionCreateInput, AppActionUncheckedCreateInput>
    /**
     * In case the AppAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppActionUpdateInput, AppActionUncheckedUpdateInput>
  }

  /**
   * AppAction delete
   */
  export type AppActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
    /**
     * Filter which AppAction to delete.
     */
    where: AppActionWhereUniqueInput
  }

  /**
   * AppAction deleteMany
   */
  export type AppActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppActions to delete
     */
    where?: AppActionWhereInput
    /**
     * Limit how many AppActions to delete.
     */
    limit?: number
  }

  /**
   * AppAction.actionPermission
   */
  export type AppAction$actionPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    where?: ActionPermissionWhereInput
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    cursor?: ActionPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * AppAction without action
   */
  export type AppActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppAction
     */
    select?: AppActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppAction
     */
    omit?: AppActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppActionInclude<ExtArgs> | null
  }


  /**
   * Model MenuPermission
   */

  export type AggregateMenuPermission = {
    _count: MenuPermissionCountAggregateOutputType | null
    _min: MenuPermissionMinAggregateOutputType | null
    _max: MenuPermissionMaxAggregateOutputType | null
  }

  export type MenuPermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    appId: string | null
    appMenuItemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuPermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    appId: string | null
    appMenuItemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuPermissionCountAggregateOutputType = {
    id: number
    roleId: number
    appId: number
    appMenuItemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuPermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appMenuItemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuPermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appMenuItemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuPermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appMenuItemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuPermission to aggregate.
     */
    where?: MenuPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuPermissions to fetch.
     */
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuPermissions
    **/
    _count?: true | MenuPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuPermissionMaxAggregateInputType
  }

  export type GetMenuPermissionAggregateType<T extends MenuPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuPermission[P]>
      : GetScalarType<T[P], AggregateMenuPermission[P]>
  }




  export type MenuPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuPermissionWhereInput
    orderBy?: MenuPermissionOrderByWithAggregationInput | MenuPermissionOrderByWithAggregationInput[]
    by: MenuPermissionScalarFieldEnum[] | MenuPermissionScalarFieldEnum
    having?: MenuPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuPermissionCountAggregateInputType | true
    _min?: MenuPermissionMinAggregateInputType
    _max?: MenuPermissionMaxAggregateInputType
  }

  export type MenuPermissionGroupByOutputType = {
    id: string
    roleId: string
    appId: string
    appMenuItemId: string
    createdAt: Date
    updatedAt: Date
    _count: MenuPermissionCountAggregateOutputType | null
    _min: MenuPermissionMinAggregateOutputType | null
    _max: MenuPermissionMaxAggregateOutputType | null
  }

  type GetMenuPermissionGroupByPayload<T extends MenuPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], MenuPermissionGroupByOutputType[P]>
        }
      >
    >


  export type MenuPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appMenuItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuPermission"]>

  export type MenuPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appMenuItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuPermission"]>

  export type MenuPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appMenuItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuPermission"]>

  export type MenuPermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appMenuItemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MenuPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roleId" | "appId" | "appMenuItemId" | "createdAt" | "updatedAt", ExtArgs["result"]["menuPermission"]>
  export type MenuPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }
  export type MenuPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }
  export type MenuPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appMenuItem?: boolean | AppMenuItemDefaultArgs<ExtArgs>
  }

  export type $MenuPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MenuPermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      app: Prisma.$AppPayload<ExtArgs>
      appMenuItem: Prisma.$AppMenuItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      appId: string
      appMenuItemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menuPermission"]>
    composites: {}
  }

  type MenuPermissionGetPayload<S extends boolean | null | undefined | MenuPermissionDefaultArgs> = $Result.GetResult<Prisma.$MenuPermissionPayload, S>

  type MenuPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MenuPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MenuPermissionCountAggregateInputType | true
    }

  export interface MenuPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuPermission'], meta: { name: 'MenuPermission' } }
    /**
     * Find zero or one MenuPermission that matches the filter.
     * @param {MenuPermissionFindUniqueArgs} args - Arguments to find a MenuPermission
     * @example
     * // Get one MenuPermission
     * const menuPermission = await prisma.menuPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuPermissionFindUniqueArgs>(args: SelectSubset<T, MenuPermissionFindUniqueArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MenuPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MenuPermissionFindUniqueOrThrowArgs} args - Arguments to find a MenuPermission
     * @example
     * // Get one MenuPermission
     * const menuPermission = await prisma.menuPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MenuPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionFindFirstArgs} args - Arguments to find a MenuPermission
     * @example
     * // Get one MenuPermission
     * const menuPermission = await prisma.menuPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuPermissionFindFirstArgs>(args?: SelectSubset<T, MenuPermissionFindFirstArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MenuPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionFindFirstOrThrowArgs} args - Arguments to find a MenuPermission
     * @example
     * // Get one MenuPermission
     * const menuPermission = await prisma.menuPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MenuPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuPermissions
     * const menuPermissions = await prisma.menuPermission.findMany()
     * 
     * // Get first 10 MenuPermissions
     * const menuPermissions = await prisma.menuPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuPermissionWithIdOnly = await prisma.menuPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuPermissionFindManyArgs>(args?: SelectSubset<T, MenuPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MenuPermission.
     * @param {MenuPermissionCreateArgs} args - Arguments to create a MenuPermission.
     * @example
     * // Create one MenuPermission
     * const MenuPermission = await prisma.menuPermission.create({
     *   data: {
     *     // ... data to create a MenuPermission
     *   }
     * })
     * 
     */
    create<T extends MenuPermissionCreateArgs>(args: SelectSubset<T, MenuPermissionCreateArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MenuPermissions.
     * @param {MenuPermissionCreateManyArgs} args - Arguments to create many MenuPermissions.
     * @example
     * // Create many MenuPermissions
     * const menuPermission = await prisma.menuPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuPermissionCreateManyArgs>(args?: SelectSubset<T, MenuPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MenuPermissions and returns the data saved in the database.
     * @param {MenuPermissionCreateManyAndReturnArgs} args - Arguments to create many MenuPermissions.
     * @example
     * // Create many MenuPermissions
     * const menuPermission = await prisma.menuPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MenuPermissions and only return the `id`
     * const menuPermissionWithIdOnly = await prisma.menuPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MenuPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, MenuPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MenuPermission.
     * @param {MenuPermissionDeleteArgs} args - Arguments to delete one MenuPermission.
     * @example
     * // Delete one MenuPermission
     * const MenuPermission = await prisma.menuPermission.delete({
     *   where: {
     *     // ... filter to delete one MenuPermission
     *   }
     * })
     * 
     */
    delete<T extends MenuPermissionDeleteArgs>(args: SelectSubset<T, MenuPermissionDeleteArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MenuPermission.
     * @param {MenuPermissionUpdateArgs} args - Arguments to update one MenuPermission.
     * @example
     * // Update one MenuPermission
     * const menuPermission = await prisma.menuPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuPermissionUpdateArgs>(args: SelectSubset<T, MenuPermissionUpdateArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MenuPermissions.
     * @param {MenuPermissionDeleteManyArgs} args - Arguments to filter MenuPermissions to delete.
     * @example
     * // Delete a few MenuPermissions
     * const { count } = await prisma.menuPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuPermissionDeleteManyArgs>(args?: SelectSubset<T, MenuPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuPermissions
     * const menuPermission = await prisma.menuPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuPermissionUpdateManyArgs>(args: SelectSubset<T, MenuPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuPermissions and returns the data updated in the database.
     * @param {MenuPermissionUpdateManyAndReturnArgs} args - Arguments to update many MenuPermissions.
     * @example
     * // Update many MenuPermissions
     * const menuPermission = await prisma.menuPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MenuPermissions and only return the `id`
     * const menuPermissionWithIdOnly = await prisma.menuPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MenuPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, MenuPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MenuPermission.
     * @param {MenuPermissionUpsertArgs} args - Arguments to update or create a MenuPermission.
     * @example
     * // Update or create a MenuPermission
     * const menuPermission = await prisma.menuPermission.upsert({
     *   create: {
     *     // ... data to create a MenuPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuPermission we want to update
     *   }
     * })
     */
    upsert<T extends MenuPermissionUpsertArgs>(args: SelectSubset<T, MenuPermissionUpsertArgs<ExtArgs>>): Prisma__MenuPermissionClient<$Result.GetResult<Prisma.$MenuPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MenuPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionCountArgs} args - Arguments to filter MenuPermissions to count.
     * @example
     * // Count the number of MenuPermissions
     * const count = await prisma.menuPermission.count({
     *   where: {
     *     // ... the filter for the MenuPermissions we want to count
     *   }
     * })
    **/
    count<T extends MenuPermissionCountArgs>(
      args?: Subset<T, MenuPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuPermissionAggregateArgs>(args: Subset<T, MenuPermissionAggregateArgs>): Prisma.PrismaPromise<GetMenuPermissionAggregateType<T>>

    /**
     * Group by MenuPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuPermissionGroupByArgs['orderBy'] }
        : { orderBy?: MenuPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MenuPermission model
   */
  readonly fields: MenuPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appMenuItem<T extends AppMenuItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppMenuItemDefaultArgs<ExtArgs>>): Prisma__AppMenuItemClient<$Result.GetResult<Prisma.$AppMenuItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MenuPermission model
   */
  interface MenuPermissionFieldRefs {
    readonly id: FieldRef<"MenuPermission", 'String'>
    readonly roleId: FieldRef<"MenuPermission", 'String'>
    readonly appId: FieldRef<"MenuPermission", 'String'>
    readonly appMenuItemId: FieldRef<"MenuPermission", 'String'>
    readonly createdAt: FieldRef<"MenuPermission", 'DateTime'>
    readonly updatedAt: FieldRef<"MenuPermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MenuPermission findUnique
   */
  export type MenuPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter, which MenuPermission to fetch.
     */
    where: MenuPermissionWhereUniqueInput
  }

  /**
   * MenuPermission findUniqueOrThrow
   */
  export type MenuPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter, which MenuPermission to fetch.
     */
    where: MenuPermissionWhereUniqueInput
  }

  /**
   * MenuPermission findFirst
   */
  export type MenuPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter, which MenuPermission to fetch.
     */
    where?: MenuPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuPermissions to fetch.
     */
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuPermissions.
     */
    cursor?: MenuPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuPermissions.
     */
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * MenuPermission findFirstOrThrow
   */
  export type MenuPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter, which MenuPermission to fetch.
     */
    where?: MenuPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuPermissions to fetch.
     */
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuPermissions.
     */
    cursor?: MenuPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuPermissions.
     */
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * MenuPermission findMany
   */
  export type MenuPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter, which MenuPermissions to fetch.
     */
    where?: MenuPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuPermissions to fetch.
     */
    orderBy?: MenuPermissionOrderByWithRelationInput | MenuPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuPermissions.
     */
    cursor?: MenuPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuPermissions.
     */
    skip?: number
    distinct?: MenuPermissionScalarFieldEnum | MenuPermissionScalarFieldEnum[]
  }

  /**
   * MenuPermission create
   */
  export type MenuPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a MenuPermission.
     */
    data: XOR<MenuPermissionCreateInput, MenuPermissionUncheckedCreateInput>
  }

  /**
   * MenuPermission createMany
   */
  export type MenuPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MenuPermissions.
     */
    data: MenuPermissionCreateManyInput | MenuPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuPermission createManyAndReturn
   */
  export type MenuPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many MenuPermissions.
     */
    data: MenuPermissionCreateManyInput | MenuPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MenuPermission update
   */
  export type MenuPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a MenuPermission.
     */
    data: XOR<MenuPermissionUpdateInput, MenuPermissionUncheckedUpdateInput>
    /**
     * Choose, which MenuPermission to update.
     */
    where: MenuPermissionWhereUniqueInput
  }

  /**
   * MenuPermission updateMany
   */
  export type MenuPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MenuPermissions.
     */
    data: XOR<MenuPermissionUpdateManyMutationInput, MenuPermissionUncheckedUpdateManyInput>
    /**
     * Filter which MenuPermissions to update
     */
    where?: MenuPermissionWhereInput
    /**
     * Limit how many MenuPermissions to update.
     */
    limit?: number
  }

  /**
   * MenuPermission updateManyAndReturn
   */
  export type MenuPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * The data used to update MenuPermissions.
     */
    data: XOR<MenuPermissionUpdateManyMutationInput, MenuPermissionUncheckedUpdateManyInput>
    /**
     * Filter which MenuPermissions to update
     */
    where?: MenuPermissionWhereInput
    /**
     * Limit how many MenuPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MenuPermission upsert
   */
  export type MenuPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the MenuPermission to update in case it exists.
     */
    where: MenuPermissionWhereUniqueInput
    /**
     * In case the MenuPermission found by the `where` argument doesn't exist, create a new MenuPermission with this data.
     */
    create: XOR<MenuPermissionCreateInput, MenuPermissionUncheckedCreateInput>
    /**
     * In case the MenuPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuPermissionUpdateInput, MenuPermissionUncheckedUpdateInput>
  }

  /**
   * MenuPermission delete
   */
  export type MenuPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
    /**
     * Filter which MenuPermission to delete.
     */
    where: MenuPermissionWhereUniqueInput
  }

  /**
   * MenuPermission deleteMany
   */
  export type MenuPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuPermissions to delete
     */
    where?: MenuPermissionWhereInput
    /**
     * Limit how many MenuPermissions to delete.
     */
    limit?: number
  }

  /**
   * MenuPermission without action
   */
  export type MenuPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuPermission
     */
    select?: MenuPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MenuPermission
     */
    omit?: MenuPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuPermissionInclude<ExtArgs> | null
  }


  /**
   * Model ActionPermission
   */

  export type AggregateActionPermission = {
    _count: ActionPermissionCountAggregateOutputType | null
    _min: ActionPermissionMinAggregateOutputType | null
    _max: ActionPermissionMaxAggregateOutputType | null
  }

  export type ActionPermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    appId: string | null
    appActionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActionPermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    appId: string | null
    appActionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActionPermissionCountAggregateOutputType = {
    id: number
    roleId: number
    appId: number
    appActionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActionPermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appActionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActionPermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appActionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActionPermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    appId?: true
    appActionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActionPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionPermission to aggregate.
     */
    where?: ActionPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionPermissions to fetch.
     */
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionPermissions
    **/
    _count?: true | ActionPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionPermissionMaxAggregateInputType
  }

  export type GetActionPermissionAggregateType<T extends ActionPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateActionPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionPermission[P]>
      : GetScalarType<T[P], AggregateActionPermission[P]>
  }




  export type ActionPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionPermissionWhereInput
    orderBy?: ActionPermissionOrderByWithAggregationInput | ActionPermissionOrderByWithAggregationInput[]
    by: ActionPermissionScalarFieldEnum[] | ActionPermissionScalarFieldEnum
    having?: ActionPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionPermissionCountAggregateInputType | true
    _min?: ActionPermissionMinAggregateInputType
    _max?: ActionPermissionMaxAggregateInputType
  }

  export type ActionPermissionGroupByOutputType = {
    id: string
    roleId: string
    appId: string
    appActionId: string
    createdAt: Date
    updatedAt: Date
    _count: ActionPermissionCountAggregateOutputType | null
    _min: ActionPermissionMinAggregateOutputType | null
    _max: ActionPermissionMaxAggregateOutputType | null
  }

  type GetActionPermissionGroupByPayload<T extends ActionPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], ActionPermissionGroupByOutputType[P]>
        }
      >
    >


  export type ActionPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appActionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionPermission"]>

  export type ActionPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appActionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionPermission"]>

  export type ActionPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appActionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionPermission"]>

  export type ActionPermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    appId?: boolean
    appActionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActionPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roleId" | "appId" | "appActionId" | "createdAt" | "updatedAt", ExtArgs["result"]["actionPermission"]>
  export type ActionPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }
  export type ActionPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }
  export type ActionPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    app?: boolean | AppDefaultArgs<ExtArgs>
    appAction?: boolean | AppActionDefaultArgs<ExtArgs>
  }

  export type $ActionPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActionPermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      app: Prisma.$AppPayload<ExtArgs>
      appAction: Prisma.$AppActionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      appId: string
      appActionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["actionPermission"]>
    composites: {}
  }

  type ActionPermissionGetPayload<S extends boolean | null | undefined | ActionPermissionDefaultArgs> = $Result.GetResult<Prisma.$ActionPermissionPayload, S>

  type ActionPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActionPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActionPermissionCountAggregateInputType | true
    }

  export interface ActionPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionPermission'], meta: { name: 'ActionPermission' } }
    /**
     * Find zero or one ActionPermission that matches the filter.
     * @param {ActionPermissionFindUniqueArgs} args - Arguments to find a ActionPermission
     * @example
     * // Get one ActionPermission
     * const actionPermission = await prisma.actionPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionPermissionFindUniqueArgs>(args: SelectSubset<T, ActionPermissionFindUniqueArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActionPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActionPermissionFindUniqueOrThrowArgs} args - Arguments to find a ActionPermission
     * @example
     * // Get one ActionPermission
     * const actionPermission = await prisma.actionPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActionPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionFindFirstArgs} args - Arguments to find a ActionPermission
     * @example
     * // Get one ActionPermission
     * const actionPermission = await prisma.actionPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionPermissionFindFirstArgs>(args?: SelectSubset<T, ActionPermissionFindFirstArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActionPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionFindFirstOrThrowArgs} args - Arguments to find a ActionPermission
     * @example
     * // Get one ActionPermission
     * const actionPermission = await prisma.actionPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActionPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionPermissions
     * const actionPermissions = await prisma.actionPermission.findMany()
     * 
     * // Get first 10 ActionPermissions
     * const actionPermissions = await prisma.actionPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionPermissionWithIdOnly = await prisma.actionPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionPermissionFindManyArgs>(args?: SelectSubset<T, ActionPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActionPermission.
     * @param {ActionPermissionCreateArgs} args - Arguments to create a ActionPermission.
     * @example
     * // Create one ActionPermission
     * const ActionPermission = await prisma.actionPermission.create({
     *   data: {
     *     // ... data to create a ActionPermission
     *   }
     * })
     * 
     */
    create<T extends ActionPermissionCreateArgs>(args: SelectSubset<T, ActionPermissionCreateArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActionPermissions.
     * @param {ActionPermissionCreateManyArgs} args - Arguments to create many ActionPermissions.
     * @example
     * // Create many ActionPermissions
     * const actionPermission = await prisma.actionPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionPermissionCreateManyArgs>(args?: SelectSubset<T, ActionPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActionPermissions and returns the data saved in the database.
     * @param {ActionPermissionCreateManyAndReturnArgs} args - Arguments to create many ActionPermissions.
     * @example
     * // Create many ActionPermissions
     * const actionPermission = await prisma.actionPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActionPermissions and only return the `id`
     * const actionPermissionWithIdOnly = await prisma.actionPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActionPermission.
     * @param {ActionPermissionDeleteArgs} args - Arguments to delete one ActionPermission.
     * @example
     * // Delete one ActionPermission
     * const ActionPermission = await prisma.actionPermission.delete({
     *   where: {
     *     // ... filter to delete one ActionPermission
     *   }
     * })
     * 
     */
    delete<T extends ActionPermissionDeleteArgs>(args: SelectSubset<T, ActionPermissionDeleteArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActionPermission.
     * @param {ActionPermissionUpdateArgs} args - Arguments to update one ActionPermission.
     * @example
     * // Update one ActionPermission
     * const actionPermission = await prisma.actionPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionPermissionUpdateArgs>(args: SelectSubset<T, ActionPermissionUpdateArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActionPermissions.
     * @param {ActionPermissionDeleteManyArgs} args - Arguments to filter ActionPermissions to delete.
     * @example
     * // Delete a few ActionPermissions
     * const { count } = await prisma.actionPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionPermissionDeleteManyArgs>(args?: SelectSubset<T, ActionPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionPermissions
     * const actionPermission = await prisma.actionPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionPermissionUpdateManyArgs>(args: SelectSubset<T, ActionPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionPermissions and returns the data updated in the database.
     * @param {ActionPermissionUpdateManyAndReturnArgs} args - Arguments to update many ActionPermissions.
     * @example
     * // Update many ActionPermissions
     * const actionPermission = await prisma.actionPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActionPermissions and only return the `id`
     * const actionPermissionWithIdOnly = await prisma.actionPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActionPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, ActionPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActionPermission.
     * @param {ActionPermissionUpsertArgs} args - Arguments to update or create a ActionPermission.
     * @example
     * // Update or create a ActionPermission
     * const actionPermission = await prisma.actionPermission.upsert({
     *   create: {
     *     // ... data to create a ActionPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionPermission we want to update
     *   }
     * })
     */
    upsert<T extends ActionPermissionUpsertArgs>(args: SelectSubset<T, ActionPermissionUpsertArgs<ExtArgs>>): Prisma__ActionPermissionClient<$Result.GetResult<Prisma.$ActionPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActionPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionCountArgs} args - Arguments to filter ActionPermissions to count.
     * @example
     * // Count the number of ActionPermissions
     * const count = await prisma.actionPermission.count({
     *   where: {
     *     // ... the filter for the ActionPermissions we want to count
     *   }
     * })
    **/
    count<T extends ActionPermissionCountArgs>(
      args?: Subset<T, ActionPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionPermissionAggregateArgs>(args: Subset<T, ActionPermissionAggregateArgs>): Prisma.PrismaPromise<GetActionPermissionAggregateType<T>>

    /**
     * Group by ActionPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionPermissionGroupByArgs['orderBy'] }
        : { orderBy?: ActionPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActionPermission model
   */
  readonly fields: ActionPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appAction<T extends AppActionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppActionDefaultArgs<ExtArgs>>): Prisma__AppActionClient<$Result.GetResult<Prisma.$AppActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActionPermission model
   */
  interface ActionPermissionFieldRefs {
    readonly id: FieldRef<"ActionPermission", 'String'>
    readonly roleId: FieldRef<"ActionPermission", 'String'>
    readonly appId: FieldRef<"ActionPermission", 'String'>
    readonly appActionId: FieldRef<"ActionPermission", 'String'>
    readonly createdAt: FieldRef<"ActionPermission", 'DateTime'>
    readonly updatedAt: FieldRef<"ActionPermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActionPermission findUnique
   */
  export type ActionPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter, which ActionPermission to fetch.
     */
    where: ActionPermissionWhereUniqueInput
  }

  /**
   * ActionPermission findUniqueOrThrow
   */
  export type ActionPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter, which ActionPermission to fetch.
     */
    where: ActionPermissionWhereUniqueInput
  }

  /**
   * ActionPermission findFirst
   */
  export type ActionPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter, which ActionPermission to fetch.
     */
    where?: ActionPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionPermissions to fetch.
     */
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionPermissions.
     */
    cursor?: ActionPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionPermissions.
     */
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * ActionPermission findFirstOrThrow
   */
  export type ActionPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter, which ActionPermission to fetch.
     */
    where?: ActionPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionPermissions to fetch.
     */
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionPermissions.
     */
    cursor?: ActionPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionPermissions.
     */
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * ActionPermission findMany
   */
  export type ActionPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter, which ActionPermissions to fetch.
     */
    where?: ActionPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionPermissions to fetch.
     */
    orderBy?: ActionPermissionOrderByWithRelationInput | ActionPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionPermissions.
     */
    cursor?: ActionPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionPermissions.
     */
    skip?: number
    distinct?: ActionPermissionScalarFieldEnum | ActionPermissionScalarFieldEnum[]
  }

  /**
   * ActionPermission create
   */
  export type ActionPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionPermission.
     */
    data: XOR<ActionPermissionCreateInput, ActionPermissionUncheckedCreateInput>
  }

  /**
   * ActionPermission createMany
   */
  export type ActionPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionPermissions.
     */
    data: ActionPermissionCreateManyInput | ActionPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionPermission createManyAndReturn
   */
  export type ActionPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many ActionPermissions.
     */
    data: ActionPermissionCreateManyInput | ActionPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionPermission update
   */
  export type ActionPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionPermission.
     */
    data: XOR<ActionPermissionUpdateInput, ActionPermissionUncheckedUpdateInput>
    /**
     * Choose, which ActionPermission to update.
     */
    where: ActionPermissionWhereUniqueInput
  }

  /**
   * ActionPermission updateMany
   */
  export type ActionPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionPermissions.
     */
    data: XOR<ActionPermissionUpdateManyMutationInput, ActionPermissionUncheckedUpdateManyInput>
    /**
     * Filter which ActionPermissions to update
     */
    where?: ActionPermissionWhereInput
    /**
     * Limit how many ActionPermissions to update.
     */
    limit?: number
  }

  /**
   * ActionPermission updateManyAndReturn
   */
  export type ActionPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * The data used to update ActionPermissions.
     */
    data: XOR<ActionPermissionUpdateManyMutationInput, ActionPermissionUncheckedUpdateManyInput>
    /**
     * Filter which ActionPermissions to update
     */
    where?: ActionPermissionWhereInput
    /**
     * Limit how many ActionPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionPermission upsert
   */
  export type ActionPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionPermission to update in case it exists.
     */
    where: ActionPermissionWhereUniqueInput
    /**
     * In case the ActionPermission found by the `where` argument doesn't exist, create a new ActionPermission with this data.
     */
    create: XOR<ActionPermissionCreateInput, ActionPermissionUncheckedCreateInput>
    /**
     * In case the ActionPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionPermissionUpdateInput, ActionPermissionUncheckedUpdateInput>
  }

  /**
   * ActionPermission delete
   */
  export type ActionPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
    /**
     * Filter which ActionPermission to delete.
     */
    where: ActionPermissionWhereUniqueInput
  }

  /**
   * ActionPermission deleteMany
   */
  export type ActionPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionPermissions to delete
     */
    where?: ActionPermissionWhereInput
    /**
     * Limit how many ActionPermissions to delete.
     */
    limit?: number
  }

  /**
   * ActionPermission without action
   */
  export type ActionPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionPermission
     */
    select?: ActionPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActionPermission
     */
    omit?: ActionPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionPermissionInclude<ExtArgs> | null
  }


  /**
   * Model RBAC
   */

  export type AggregateRBAC = {
    _count: RBACCountAggregateOutputType | null
    _min: RBACMinAggregateOutputType | null
    _max: RBACMaxAggregateOutputType | null
  }

  export type RBACMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    roleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RBACMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    roleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RBACCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    roleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RBACMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RBACMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RBACCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RBACAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RBAC to aggregate.
     */
    where?: RBACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RBACS to fetch.
     */
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RBACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RBACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RBACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RBACS
    **/
    _count?: true | RBACCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RBACMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RBACMaxAggregateInputType
  }

  export type GetRBACAggregateType<T extends RBACAggregateArgs> = {
        [P in keyof T & keyof AggregateRBAC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRBAC[P]>
      : GetScalarType<T[P], AggregateRBAC[P]>
  }




  export type RBACGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RBACWhereInput
    orderBy?: RBACOrderByWithAggregationInput | RBACOrderByWithAggregationInput[]
    by: RBACScalarFieldEnum[] | RBACScalarFieldEnum
    having?: RBACScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RBACCountAggregateInputType | true
    _min?: RBACMinAggregateInputType
    _max?: RBACMaxAggregateInputType
  }

  export type RBACGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    roleId: string
    createdAt: Date
    updatedAt: Date
    _count: RBACCountAggregateOutputType | null
    _min: RBACMinAggregateOutputType | null
    _max: RBACMaxAggregateOutputType | null
  }

  type GetRBACGroupByPayload<T extends RBACGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RBACGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RBACGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RBACGroupByOutputType[P]>
            : GetScalarType<T[P], RBACGroupByOutputType[P]>
        }
      >
    >


  export type RBACSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rBAC"]>

  export type RBACSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rBAC"]>

  export type RBACSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rBAC"]>

  export type RBACSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RBACOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "userId" | "roleId" | "createdAt" | "updatedAt", ExtArgs["result"]["rBAC"]>
  export type RBACInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type RBACIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type RBACIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $RBACPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RBAC"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      roleId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rBAC"]>
    composites: {}
  }

  type RBACGetPayload<S extends boolean | null | undefined | RBACDefaultArgs> = $Result.GetResult<Prisma.$RBACPayload, S>

  type RBACCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RBACFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RBACCountAggregateInputType | true
    }

  export interface RBACDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RBAC'], meta: { name: 'RBAC' } }
    /**
     * Find zero or one RBAC that matches the filter.
     * @param {RBACFindUniqueArgs} args - Arguments to find a RBAC
     * @example
     * // Get one RBAC
     * const rBAC = await prisma.rBAC.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RBACFindUniqueArgs>(args: SelectSubset<T, RBACFindUniqueArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RBAC that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RBACFindUniqueOrThrowArgs} args - Arguments to find a RBAC
     * @example
     * // Get one RBAC
     * const rBAC = await prisma.rBAC.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RBACFindUniqueOrThrowArgs>(args: SelectSubset<T, RBACFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RBAC that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACFindFirstArgs} args - Arguments to find a RBAC
     * @example
     * // Get one RBAC
     * const rBAC = await prisma.rBAC.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RBACFindFirstArgs>(args?: SelectSubset<T, RBACFindFirstArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RBAC that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACFindFirstOrThrowArgs} args - Arguments to find a RBAC
     * @example
     * // Get one RBAC
     * const rBAC = await prisma.rBAC.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RBACFindFirstOrThrowArgs>(args?: SelectSubset<T, RBACFindFirstOrThrowArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RBACS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RBACS
     * const rBACS = await prisma.rBAC.findMany()
     * 
     * // Get first 10 RBACS
     * const rBACS = await prisma.rBAC.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rBACWithIdOnly = await prisma.rBAC.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RBACFindManyArgs>(args?: SelectSubset<T, RBACFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RBAC.
     * @param {RBACCreateArgs} args - Arguments to create a RBAC.
     * @example
     * // Create one RBAC
     * const RBAC = await prisma.rBAC.create({
     *   data: {
     *     // ... data to create a RBAC
     *   }
     * })
     * 
     */
    create<T extends RBACCreateArgs>(args: SelectSubset<T, RBACCreateArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RBACS.
     * @param {RBACCreateManyArgs} args - Arguments to create many RBACS.
     * @example
     * // Create many RBACS
     * const rBAC = await prisma.rBAC.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RBACCreateManyArgs>(args?: SelectSubset<T, RBACCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RBACS and returns the data saved in the database.
     * @param {RBACCreateManyAndReturnArgs} args - Arguments to create many RBACS.
     * @example
     * // Create many RBACS
     * const rBAC = await prisma.rBAC.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RBACS and only return the `id`
     * const rBACWithIdOnly = await prisma.rBAC.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RBACCreateManyAndReturnArgs>(args?: SelectSubset<T, RBACCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RBAC.
     * @param {RBACDeleteArgs} args - Arguments to delete one RBAC.
     * @example
     * // Delete one RBAC
     * const RBAC = await prisma.rBAC.delete({
     *   where: {
     *     // ... filter to delete one RBAC
     *   }
     * })
     * 
     */
    delete<T extends RBACDeleteArgs>(args: SelectSubset<T, RBACDeleteArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RBAC.
     * @param {RBACUpdateArgs} args - Arguments to update one RBAC.
     * @example
     * // Update one RBAC
     * const rBAC = await prisma.rBAC.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RBACUpdateArgs>(args: SelectSubset<T, RBACUpdateArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RBACS.
     * @param {RBACDeleteManyArgs} args - Arguments to filter RBACS to delete.
     * @example
     * // Delete a few RBACS
     * const { count } = await prisma.rBAC.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RBACDeleteManyArgs>(args?: SelectSubset<T, RBACDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RBACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RBACS
     * const rBAC = await prisma.rBAC.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RBACUpdateManyArgs>(args: SelectSubset<T, RBACUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RBACS and returns the data updated in the database.
     * @param {RBACUpdateManyAndReturnArgs} args - Arguments to update many RBACS.
     * @example
     * // Update many RBACS
     * const rBAC = await prisma.rBAC.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RBACS and only return the `id`
     * const rBACWithIdOnly = await prisma.rBAC.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RBACUpdateManyAndReturnArgs>(args: SelectSubset<T, RBACUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RBAC.
     * @param {RBACUpsertArgs} args - Arguments to update or create a RBAC.
     * @example
     * // Update or create a RBAC
     * const rBAC = await prisma.rBAC.upsert({
     *   create: {
     *     // ... data to create a RBAC
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RBAC we want to update
     *   }
     * })
     */
    upsert<T extends RBACUpsertArgs>(args: SelectSubset<T, RBACUpsertArgs<ExtArgs>>): Prisma__RBACClient<$Result.GetResult<Prisma.$RBACPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RBACS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACCountArgs} args - Arguments to filter RBACS to count.
     * @example
     * // Count the number of RBACS
     * const count = await prisma.rBAC.count({
     *   where: {
     *     // ... the filter for the RBACS we want to count
     *   }
     * })
    **/
    count<T extends RBACCountArgs>(
      args?: Subset<T, RBACCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RBACCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RBAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RBACAggregateArgs>(args: Subset<T, RBACAggregateArgs>): Prisma.PrismaPromise<GetRBACAggregateType<T>>

    /**
     * Group by RBAC.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RBACGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RBACGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RBACGroupByArgs['orderBy'] }
        : { orderBy?: RBACGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RBACGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRBACGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RBAC model
   */
  readonly fields: RBACFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RBAC.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RBACClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RBAC model
   */
  interface RBACFieldRefs {
    readonly id: FieldRef<"RBAC", 'String'>
    readonly organizationId: FieldRef<"RBAC", 'String'>
    readonly userId: FieldRef<"RBAC", 'String'>
    readonly roleId: FieldRef<"RBAC", 'String'>
    readonly createdAt: FieldRef<"RBAC", 'DateTime'>
    readonly updatedAt: FieldRef<"RBAC", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RBAC findUnique
   */
  export type RBACFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter, which RBAC to fetch.
     */
    where: RBACWhereUniqueInput
  }

  /**
   * RBAC findUniqueOrThrow
   */
  export type RBACFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter, which RBAC to fetch.
     */
    where: RBACWhereUniqueInput
  }

  /**
   * RBAC findFirst
   */
  export type RBACFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter, which RBAC to fetch.
     */
    where?: RBACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RBACS to fetch.
     */
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RBACS.
     */
    cursor?: RBACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RBACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RBACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RBACS.
     */
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * RBAC findFirstOrThrow
   */
  export type RBACFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter, which RBAC to fetch.
     */
    where?: RBACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RBACS to fetch.
     */
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RBACS.
     */
    cursor?: RBACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RBACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RBACS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RBACS.
     */
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * RBAC findMany
   */
  export type RBACFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter, which RBACS to fetch.
     */
    where?: RBACWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RBACS to fetch.
     */
    orderBy?: RBACOrderByWithRelationInput | RBACOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RBACS.
     */
    cursor?: RBACWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RBACS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RBACS.
     */
    skip?: number
    distinct?: RBACScalarFieldEnum | RBACScalarFieldEnum[]
  }

  /**
   * RBAC create
   */
  export type RBACCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * The data needed to create a RBAC.
     */
    data: XOR<RBACCreateInput, RBACUncheckedCreateInput>
  }

  /**
   * RBAC createMany
   */
  export type RBACCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RBACS.
     */
    data: RBACCreateManyInput | RBACCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RBAC createManyAndReturn
   */
  export type RBACCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * The data used to create many RBACS.
     */
    data: RBACCreateManyInput | RBACCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RBAC update
   */
  export type RBACUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * The data needed to update a RBAC.
     */
    data: XOR<RBACUpdateInput, RBACUncheckedUpdateInput>
    /**
     * Choose, which RBAC to update.
     */
    where: RBACWhereUniqueInput
  }

  /**
   * RBAC updateMany
   */
  export type RBACUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RBACS.
     */
    data: XOR<RBACUpdateManyMutationInput, RBACUncheckedUpdateManyInput>
    /**
     * Filter which RBACS to update
     */
    where?: RBACWhereInput
    /**
     * Limit how many RBACS to update.
     */
    limit?: number
  }

  /**
   * RBAC updateManyAndReturn
   */
  export type RBACUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * The data used to update RBACS.
     */
    data: XOR<RBACUpdateManyMutationInput, RBACUncheckedUpdateManyInput>
    /**
     * Filter which RBACS to update
     */
    where?: RBACWhereInput
    /**
     * Limit how many RBACS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RBAC upsert
   */
  export type RBACUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * The filter to search for the RBAC to update in case it exists.
     */
    where: RBACWhereUniqueInput
    /**
     * In case the RBAC found by the `where` argument doesn't exist, create a new RBAC with this data.
     */
    create: XOR<RBACCreateInput, RBACUncheckedCreateInput>
    /**
     * In case the RBAC was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RBACUpdateInput, RBACUncheckedUpdateInput>
  }

  /**
   * RBAC delete
   */
  export type RBACDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
    /**
     * Filter which RBAC to delete.
     */
    where: RBACWhereUniqueInput
  }

  /**
   * RBAC deleteMany
   */
  export type RBACDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RBACS to delete
     */
    where?: RBACWhereInput
    /**
     * Limit how many RBACS to delete.
     */
    limit?: number
  }

  /**
   * RBAC without action
   */
  export type RBACDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RBAC
     */
    select?: RBACSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RBAC
     */
    omit?: RBACOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RBACInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    twoFactorEnabled: 'twoFactorEnabled',
    role: 'role',
    banned: 'banned',
    banReason: 'banReason',
    banExpires: 'banExpires',
    username: 'username',
    displayUsername: 'displayUsername'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    impersonatedBy: 'impersonatedBy',
    activeOrganizationId: 'activeOrganizationId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const TwoFactorScalarFieldEnum: {
    id: 'id',
    secret: 'secret',
    backupCodes: 'backupCodes',
    userId: 'userId'
  };

  export type TwoFactorScalarFieldEnum = (typeof TwoFactorScalarFieldEnum)[keyof typeof TwoFactorScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    email: 'email',
    role: 'role',
    status: 'status',
    expiresAt: 'expiresAt',
    inviterId: 'inviterId'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const OauthApplicationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    metadata: 'metadata',
    clientId: 'clientId',
    clientSecret: 'clientSecret',
    redirectURLs: 'redirectURLs',
    type: 'type',
    disabled: 'disabled',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OauthApplicationScalarFieldEnum = (typeof OauthApplicationScalarFieldEnum)[keyof typeof OauthApplicationScalarFieldEnum]


  export const OauthAccessTokenScalarFieldEnum: {
    id: 'id',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    clientId: 'clientId',
    userId: 'userId',
    scopes: 'scopes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OauthAccessTokenScalarFieldEnum = (typeof OauthAccessTokenScalarFieldEnum)[keyof typeof OauthAccessTokenScalarFieldEnum]


  export const OauthConsentScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    userId: 'userId',
    scopes: 'scopes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    consentGiven: 'consentGiven'
  };

  export type OauthConsentScalarFieldEnum = (typeof OauthConsentScalarFieldEnum)[keyof typeof OauthConsentScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const AppScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug: 'slug',
    type: 'type',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum]


  export const AppOrganizationScalarFieldEnum: {
    appId: 'appId',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppOrganizationScalarFieldEnum = (typeof AppOrganizationScalarFieldEnum)[keyof typeof AppOrganizationScalarFieldEnum]


  export const AppMenuItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug: 'slug',
    icon: 'icon',
    appId: 'appId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppMenuItemScalarFieldEnum = (typeof AppMenuItemScalarFieldEnum)[keyof typeof AppMenuItemScalarFieldEnum]


  export const AppActionScalarFieldEnum: {
    id: 'id',
    actionName: 'actionName',
    description: 'description',
    actionType: 'actionType',
    icon: 'icon',
    appId: 'appId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppActionScalarFieldEnum = (typeof AppActionScalarFieldEnum)[keyof typeof AppActionScalarFieldEnum]


  export const MenuPermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    appId: 'appId',
    appMenuItemId: 'appMenuItemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuPermissionScalarFieldEnum = (typeof MenuPermissionScalarFieldEnum)[keyof typeof MenuPermissionScalarFieldEnum]


  export const ActionPermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    appId: 'appId',
    appActionId: 'appActionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActionPermissionScalarFieldEnum = (typeof ActionPermissionScalarFieldEnum)[keyof typeof ActionPermissionScalarFieldEnum]


  export const RBACScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    roleId: 'roleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RBACScalarFieldEnum = (typeof RBACScalarFieldEnum)[keyof typeof RBACScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'AppType'
   */
  export type EnumAppTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppType'>
    


  /**
   * Reference to a field of type 'AppType[]'
   */
  export type ListEnumAppTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppType[]'>
    


  /**
   * Reference to a field of type 'AppActionType'
   */
  export type EnumAppActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppActionType'>
    


  /**
   * Reference to a field of type 'AppActionType[]'
   */
  export type ListEnumAppActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppActionType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    username?: StringNullableFilter<"User"> | string | null
    displayUsername?: StringNullableFilter<"User"> | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    twofactors?: TwoFactorListRelationFilter
    members?: MemberListRelationFilter
    invitations?: InvitationListRelationFilter
    rbac?: RBACListRelationFilter
    oauthapplications?: OauthApplicationListRelationFilter
    oauthaccesstokens?: OauthAccessTokenListRelationFilter
    oauthconsents?: OauthConsentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    displayUsername?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    twofactors?: TwoFactorOrderByRelationAggregateInput
    members?: MemberOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    rbac?: RBACOrderByRelationAggregateInput
    oauthapplications?: OauthApplicationOrderByRelationAggregateInput
    oauthaccesstokens?: OauthAccessTokenOrderByRelationAggregateInput
    oauthconsents?: OauthConsentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    displayUsername?: StringNullableFilter<"User"> | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    twofactors?: TwoFactorListRelationFilter
    members?: MemberListRelationFilter
    invitations?: InvitationListRelationFilter
    rbac?: RBACListRelationFilter
    oauthapplications?: OauthApplicationListRelationFilter
    oauthaccesstokens?: OauthAccessTokenListRelationFilter
    oauthconsents?: OauthConsentListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    displayUsername?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    twoFactorEnabled?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
    banned?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    banExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    displayUsername?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    activeOrganizationId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    activeOrganizationId?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
    impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
    activeOrganizationId?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type TwoFactorWhereInput = {
    AND?: TwoFactorWhereInput | TwoFactorWhereInput[]
    OR?: TwoFactorWhereInput[]
    NOT?: TwoFactorWhereInput | TwoFactorWhereInput[]
    id?: StringFilter<"TwoFactor"> | string
    secret?: StringFilter<"TwoFactor"> | string
    backupCodes?: StringFilter<"TwoFactor"> | string
    userId?: StringFilter<"TwoFactor"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TwoFactorOrderByWithRelationInput = {
    id?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TwoFactorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TwoFactorWhereInput | TwoFactorWhereInput[]
    OR?: TwoFactorWhereInput[]
    NOT?: TwoFactorWhereInput | TwoFactorWhereInput[]
    secret?: StringFilter<"TwoFactor"> | string
    backupCodes?: StringFilter<"TwoFactor"> | string
    userId?: StringFilter<"TwoFactor"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TwoFactorOrderByWithAggregationInput = {
    id?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    userId?: SortOrder
    _count?: TwoFactorCountOrderByAggregateInput
    _max?: TwoFactorMaxOrderByAggregateInput
    _min?: TwoFactorMinOrderByAggregateInput
  }

  export type TwoFactorScalarWhereWithAggregatesInput = {
    AND?: TwoFactorScalarWhereWithAggregatesInput | TwoFactorScalarWhereWithAggregatesInput[]
    OR?: TwoFactorScalarWhereWithAggregatesInput[]
    NOT?: TwoFactorScalarWhereWithAggregatesInput | TwoFactorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TwoFactor"> | string
    secret?: StringWithAggregatesFilter<"TwoFactor"> | string
    backupCodes?: StringWithAggregatesFilter<"TwoFactor"> | string
    userId?: StringWithAggregatesFilter<"TwoFactor"> | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    slug?: StringNullableFilter<"Organization"> | string | null
    logo?: StringNullableFilter<"Organization"> | string | null
    metadata?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    members?: MemberListRelationFilter
    invitations?: InvitationListRelationFilter
    appOrganization?: AppOrganizationListRelationFilter
    rbac?: RBACListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: MemberOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    appOrganization?: AppOrganizationOrderByRelationAggregateInput
    rbac?: RBACOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    metadata?: StringNullableFilter<"Organization"> | string | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    members?: MemberListRelationFilter
    invitations?: InvitationListRelationFilter
    appOrganization?: AppOrganizationListRelationFilter
    rbac?: RBACListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: StringFilter<"Member"> | string
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Member"> | string
    organizationId?: StringWithAggregatesFilter<"Member"> | string
    userId?: StringWithAggregatesFilter<"Member"> | string
    role?: StringWithAggregatesFilter<"Member"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    id?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrderInput | SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrderInput | SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invitation"> | string
    organizationId?: StringWithAggregatesFilter<"Invitation"> | string
    email?: StringWithAggregatesFilter<"Invitation"> | string
    role?: StringNullableWithAggregatesFilter<"Invitation"> | string | null
    status?: StringWithAggregatesFilter<"Invitation"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    inviterId?: StringWithAggregatesFilter<"Invitation"> | string
  }

  export type OauthApplicationWhereInput = {
    AND?: OauthApplicationWhereInput | OauthApplicationWhereInput[]
    OR?: OauthApplicationWhereInput[]
    NOT?: OauthApplicationWhereInput | OauthApplicationWhereInput[]
    id?: StringFilter<"OauthApplication"> | string
    name?: StringNullableFilter<"OauthApplication"> | string | null
    icon?: StringNullableFilter<"OauthApplication"> | string | null
    metadata?: StringNullableFilter<"OauthApplication"> | string | null
    clientId?: StringNullableFilter<"OauthApplication"> | string | null
    clientSecret?: StringNullableFilter<"OauthApplication"> | string | null
    redirectURLs?: StringNullableFilter<"OauthApplication"> | string | null
    type?: StringNullableFilter<"OauthApplication"> | string | null
    disabled?: BoolNullableFilter<"OauthApplication"> | boolean | null
    userId?: StringNullableFilter<"OauthApplication"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    oauthaccesstokens?: OauthAccessTokenListRelationFilter
    oauthconsents?: OauthConsentListRelationFilter
  }

  export type OauthApplicationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    clientSecret?: SortOrderInput | SortOrder
    redirectURLs?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    disabled?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    oauthaccesstokens?: OauthAccessTokenOrderByRelationAggregateInput
    oauthconsents?: OauthConsentOrderByRelationAggregateInput
  }

  export type OauthApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clientId?: string
    AND?: OauthApplicationWhereInput | OauthApplicationWhereInput[]
    OR?: OauthApplicationWhereInput[]
    NOT?: OauthApplicationWhereInput | OauthApplicationWhereInput[]
    name?: StringNullableFilter<"OauthApplication"> | string | null
    icon?: StringNullableFilter<"OauthApplication"> | string | null
    metadata?: StringNullableFilter<"OauthApplication"> | string | null
    clientSecret?: StringNullableFilter<"OauthApplication"> | string | null
    redirectURLs?: StringNullableFilter<"OauthApplication"> | string | null
    type?: StringNullableFilter<"OauthApplication"> | string | null
    disabled?: BoolNullableFilter<"OauthApplication"> | boolean | null
    userId?: StringNullableFilter<"OauthApplication"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    oauthaccesstokens?: OauthAccessTokenListRelationFilter
    oauthconsents?: OauthConsentListRelationFilter
  }, "id" | "clientId">

  export type OauthApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    clientSecret?: SortOrderInput | SortOrder
    redirectURLs?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    disabled?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: OauthApplicationCountOrderByAggregateInput
    _max?: OauthApplicationMaxOrderByAggregateInput
    _min?: OauthApplicationMinOrderByAggregateInput
  }

  export type OauthApplicationScalarWhereWithAggregatesInput = {
    AND?: OauthApplicationScalarWhereWithAggregatesInput | OauthApplicationScalarWhereWithAggregatesInput[]
    OR?: OauthApplicationScalarWhereWithAggregatesInput[]
    NOT?: OauthApplicationScalarWhereWithAggregatesInput | OauthApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OauthApplication"> | string
    name?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    icon?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    clientId?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    clientSecret?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    redirectURLs?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    type?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    disabled?: BoolNullableWithAggregatesFilter<"OauthApplication"> | boolean | null
    userId?: StringNullableWithAggregatesFilter<"OauthApplication"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"OauthApplication"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OauthApplication"> | Date | string | null
  }

  export type OauthAccessTokenWhereInput = {
    AND?: OauthAccessTokenWhereInput | OauthAccessTokenWhereInput[]
    OR?: OauthAccessTokenWhereInput[]
    NOT?: OauthAccessTokenWhereInput | OauthAccessTokenWhereInput[]
    id?: StringFilter<"OauthAccessToken"> | string
    accessToken?: StringNullableFilter<"OauthAccessToken"> | string | null
    refreshToken?: StringNullableFilter<"OauthAccessToken"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    clientId?: StringNullableFilter<"OauthAccessToken"> | string | null
    userId?: StringNullableFilter<"OauthAccessToken"> | string | null
    scopes?: StringNullableFilter<"OauthAccessToken"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    oauthapplication?: XOR<OauthApplicationNullableScalarRelationFilter, OauthApplicationWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type OauthAccessTokenOrderByWithRelationInput = {
    id?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    oauthapplication?: OauthApplicationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type OauthAccessTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    accessToken?: string
    refreshToken?: string
    AND?: OauthAccessTokenWhereInput | OauthAccessTokenWhereInput[]
    OR?: OauthAccessTokenWhereInput[]
    NOT?: OauthAccessTokenWhereInput | OauthAccessTokenWhereInput[]
    accessTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    clientId?: StringNullableFilter<"OauthAccessToken"> | string | null
    userId?: StringNullableFilter<"OauthAccessToken"> | string | null
    scopes?: StringNullableFilter<"OauthAccessToken"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    oauthapplication?: XOR<OauthApplicationNullableScalarRelationFilter, OauthApplicationWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "accessToken" | "refreshToken">

  export type OauthAccessTokenOrderByWithAggregationInput = {
    id?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: OauthAccessTokenCountOrderByAggregateInput
    _max?: OauthAccessTokenMaxOrderByAggregateInput
    _min?: OauthAccessTokenMinOrderByAggregateInput
  }

  export type OauthAccessTokenScalarWhereWithAggregatesInput = {
    AND?: OauthAccessTokenScalarWhereWithAggregatesInput | OauthAccessTokenScalarWhereWithAggregatesInput[]
    OR?: OauthAccessTokenScalarWhereWithAggregatesInput[]
    NOT?: OauthAccessTokenScalarWhereWithAggregatesInput | OauthAccessTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OauthAccessToken"> | string
    accessToken?: StringNullableWithAggregatesFilter<"OauthAccessToken"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"OauthAccessToken"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"OauthAccessToken"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"OauthAccessToken"> | Date | string | null
    clientId?: StringNullableWithAggregatesFilter<"OauthAccessToken"> | string | null
    userId?: StringNullableWithAggregatesFilter<"OauthAccessToken"> | string | null
    scopes?: StringNullableWithAggregatesFilter<"OauthAccessToken"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"OauthAccessToken"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OauthAccessToken"> | Date | string | null
  }

  export type OauthConsentWhereInput = {
    AND?: OauthConsentWhereInput | OauthConsentWhereInput[]
    OR?: OauthConsentWhereInput[]
    NOT?: OauthConsentWhereInput | OauthConsentWhereInput[]
    id?: StringFilter<"OauthConsent"> | string
    clientId?: StringNullableFilter<"OauthConsent"> | string | null
    userId?: StringNullableFilter<"OauthConsent"> | string | null
    scopes?: StringNullableFilter<"OauthConsent"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    consentGiven?: BoolNullableFilter<"OauthConsent"> | boolean | null
    oauthapplication?: XOR<OauthApplicationNullableScalarRelationFilter, OauthApplicationWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type OauthConsentOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    consentGiven?: SortOrderInput | SortOrder
    oauthapplication?: OauthApplicationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type OauthConsentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OauthConsentWhereInput | OauthConsentWhereInput[]
    OR?: OauthConsentWhereInput[]
    NOT?: OauthConsentWhereInput | OauthConsentWhereInput[]
    clientId?: StringNullableFilter<"OauthConsent"> | string | null
    userId?: StringNullableFilter<"OauthConsent"> | string | null
    scopes?: StringNullableFilter<"OauthConsent"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    consentGiven?: BoolNullableFilter<"OauthConsent"> | boolean | null
    oauthapplication?: XOR<OauthApplicationNullableScalarRelationFilter, OauthApplicationWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type OauthConsentOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    consentGiven?: SortOrderInput | SortOrder
    _count?: OauthConsentCountOrderByAggregateInput
    _max?: OauthConsentMaxOrderByAggregateInput
    _min?: OauthConsentMinOrderByAggregateInput
  }

  export type OauthConsentScalarWhereWithAggregatesInput = {
    AND?: OauthConsentScalarWhereWithAggregatesInput | OauthConsentScalarWhereWithAggregatesInput[]
    OR?: OauthConsentScalarWhereWithAggregatesInput[]
    NOT?: OauthConsentScalarWhereWithAggregatesInput | OauthConsentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OauthConsent"> | string
    clientId?: StringNullableWithAggregatesFilter<"OauthConsent"> | string | null
    userId?: StringNullableWithAggregatesFilter<"OauthConsent"> | string | null
    scopes?: StringNullableWithAggregatesFilter<"OauthConsent"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"OauthConsent"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OauthConsent"> | Date | string | null
    consentGiven?: BoolNullableWithAggregatesFilter<"OauthConsent"> | boolean | null
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    menuPermission?: MenuPermissionListRelationFilter
    actionPermission?: ActionPermissionListRelationFilter
    rbac?: RBACListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menuPermission?: MenuPermissionOrderByRelationAggregateInput
    actionPermission?: ActionPermissionOrderByRelationAggregateInput
    rbac?: RBACOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    menuPermission?: MenuPermissionListRelationFilter
    actionPermission?: ActionPermissionListRelationFilter
    rbac?: RBACListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type AppWhereInput = {
    AND?: AppWhereInput | AppWhereInput[]
    OR?: AppWhereInput[]
    NOT?: AppWhereInput | AppWhereInput[]
    id?: StringFilter<"App"> | string
    name?: StringFilter<"App"> | string
    description?: StringFilter<"App"> | string
    slug?: StringFilter<"App"> | string
    type?: EnumAppTypeFilter<"App"> | $Enums.AppType
    imageUrl?: StringNullableFilter<"App"> | string | null
    createdAt?: DateTimeFilter<"App"> | Date | string
    updatedAt?: DateTimeFilter<"App"> | Date | string
    appMenuItems?: AppMenuItemListRelationFilter
    appActions?: AppActionListRelationFilter
    appOrganization?: AppOrganizationListRelationFilter
    menuPermission?: MenuPermissionListRelationFilter
    actionPermission?: ActionPermissionListRelationFilter
  }

  export type AppOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    appMenuItems?: AppMenuItemOrderByRelationAggregateInput
    appActions?: AppActionOrderByRelationAggregateInput
    appOrganization?: AppOrganizationOrderByRelationAggregateInput
    menuPermission?: MenuPermissionOrderByRelationAggregateInput
    actionPermission?: ActionPermissionOrderByRelationAggregateInput
  }

  export type AppWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: AppWhereInput | AppWhereInput[]
    OR?: AppWhereInput[]
    NOT?: AppWhereInput | AppWhereInput[]
    description?: StringFilter<"App"> | string
    type?: EnumAppTypeFilter<"App"> | $Enums.AppType
    imageUrl?: StringNullableFilter<"App"> | string | null
    createdAt?: DateTimeFilter<"App"> | Date | string
    updatedAt?: DateTimeFilter<"App"> | Date | string
    appMenuItems?: AppMenuItemListRelationFilter
    appActions?: AppActionListRelationFilter
    appOrganization?: AppOrganizationListRelationFilter
    menuPermission?: MenuPermissionListRelationFilter
    actionPermission?: ActionPermissionListRelationFilter
  }, "id" | "name" | "slug">

  export type AppOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppCountOrderByAggregateInput
    _max?: AppMaxOrderByAggregateInput
    _min?: AppMinOrderByAggregateInput
  }

  export type AppScalarWhereWithAggregatesInput = {
    AND?: AppScalarWhereWithAggregatesInput | AppScalarWhereWithAggregatesInput[]
    OR?: AppScalarWhereWithAggregatesInput[]
    NOT?: AppScalarWhereWithAggregatesInput | AppScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"App"> | string
    name?: StringWithAggregatesFilter<"App"> | string
    description?: StringWithAggregatesFilter<"App"> | string
    slug?: StringWithAggregatesFilter<"App"> | string
    type?: EnumAppTypeWithAggregatesFilter<"App"> | $Enums.AppType
    imageUrl?: StringNullableWithAggregatesFilter<"App"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"App"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"App"> | Date | string
  }

  export type AppOrganizationWhereInput = {
    AND?: AppOrganizationWhereInput | AppOrganizationWhereInput[]
    OR?: AppOrganizationWhereInput[]
    NOT?: AppOrganizationWhereInput | AppOrganizationWhereInput[]
    appId?: StringFilter<"AppOrganization"> | string
    organizationId?: StringFilter<"AppOrganization"> | string
    createdAt?: DateTimeFilter<"AppOrganization"> | Date | string
    updatedAt?: DateTimeFilter<"AppOrganization"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type AppOrganizationOrderByWithRelationInput = {
    appId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    app?: AppOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type AppOrganizationWhereUniqueInput = Prisma.AtLeast<{
    appId_organizationId?: AppOrganizationAppIdOrganizationIdCompoundUniqueInput
    AND?: AppOrganizationWhereInput | AppOrganizationWhereInput[]
    OR?: AppOrganizationWhereInput[]
    NOT?: AppOrganizationWhereInput | AppOrganizationWhereInput[]
    appId?: StringFilter<"AppOrganization"> | string
    organizationId?: StringFilter<"AppOrganization"> | string
    createdAt?: DateTimeFilter<"AppOrganization"> | Date | string
    updatedAt?: DateTimeFilter<"AppOrganization"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "appId_organizationId">

  export type AppOrganizationOrderByWithAggregationInput = {
    appId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppOrganizationCountOrderByAggregateInput
    _max?: AppOrganizationMaxOrderByAggregateInput
    _min?: AppOrganizationMinOrderByAggregateInput
  }

  export type AppOrganizationScalarWhereWithAggregatesInput = {
    AND?: AppOrganizationScalarWhereWithAggregatesInput | AppOrganizationScalarWhereWithAggregatesInput[]
    OR?: AppOrganizationScalarWhereWithAggregatesInput[]
    NOT?: AppOrganizationScalarWhereWithAggregatesInput | AppOrganizationScalarWhereWithAggregatesInput[]
    appId?: StringWithAggregatesFilter<"AppOrganization"> | string
    organizationId?: StringWithAggregatesFilter<"AppOrganization"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppOrganization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppOrganization"> | Date | string
  }

  export type AppMenuItemWhereInput = {
    AND?: AppMenuItemWhereInput | AppMenuItemWhereInput[]
    OR?: AppMenuItemWhereInput[]
    NOT?: AppMenuItemWhereInput | AppMenuItemWhereInput[]
    id?: StringFilter<"AppMenuItem"> | string
    name?: StringFilter<"AppMenuItem"> | string
    description?: StringFilter<"AppMenuItem"> | string
    slug?: StringFilter<"AppMenuItem"> | string
    icon?: StringNullableFilter<"AppMenuItem"> | string | null
    appId?: StringFilter<"AppMenuItem"> | string
    createdAt?: DateTimeFilter<"AppMenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"AppMenuItem"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    menuPermission?: MenuPermissionListRelationFilter
  }

  export type AppMenuItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrderInput | SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    app?: AppOrderByWithRelationInput
    menuPermission?: MenuPermissionOrderByRelationAggregateInput
  }

  export type AppMenuItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    appId_slug?: AppMenuItemAppIdSlugCompoundUniqueInput
    AND?: AppMenuItemWhereInput | AppMenuItemWhereInput[]
    OR?: AppMenuItemWhereInput[]
    NOT?: AppMenuItemWhereInput | AppMenuItemWhereInput[]
    name?: StringFilter<"AppMenuItem"> | string
    description?: StringFilter<"AppMenuItem"> | string
    slug?: StringFilter<"AppMenuItem"> | string
    icon?: StringNullableFilter<"AppMenuItem"> | string | null
    appId?: StringFilter<"AppMenuItem"> | string
    createdAt?: DateTimeFilter<"AppMenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"AppMenuItem"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    menuPermission?: MenuPermissionListRelationFilter
  }, "id" | "appId_slug">

  export type AppMenuItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrderInput | SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppMenuItemCountOrderByAggregateInput
    _max?: AppMenuItemMaxOrderByAggregateInput
    _min?: AppMenuItemMinOrderByAggregateInput
  }

  export type AppMenuItemScalarWhereWithAggregatesInput = {
    AND?: AppMenuItemScalarWhereWithAggregatesInput | AppMenuItemScalarWhereWithAggregatesInput[]
    OR?: AppMenuItemScalarWhereWithAggregatesInput[]
    NOT?: AppMenuItemScalarWhereWithAggregatesInput | AppMenuItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppMenuItem"> | string
    name?: StringWithAggregatesFilter<"AppMenuItem"> | string
    description?: StringWithAggregatesFilter<"AppMenuItem"> | string
    slug?: StringWithAggregatesFilter<"AppMenuItem"> | string
    icon?: StringNullableWithAggregatesFilter<"AppMenuItem"> | string | null
    appId?: StringWithAggregatesFilter<"AppMenuItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppMenuItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppMenuItem"> | Date | string
  }

  export type AppActionWhereInput = {
    AND?: AppActionWhereInput | AppActionWhereInput[]
    OR?: AppActionWhereInput[]
    NOT?: AppActionWhereInput | AppActionWhereInput[]
    id?: StringFilter<"AppAction"> | string
    actionName?: StringFilter<"AppAction"> | string
    description?: StringFilter<"AppAction"> | string
    actionType?: EnumAppActionTypeFilter<"AppAction"> | $Enums.AppActionType
    icon?: StringNullableFilter<"AppAction"> | string | null
    appId?: StringFilter<"AppAction"> | string
    createdAt?: DateTimeFilter<"AppAction"> | Date | string
    updatedAt?: DateTimeFilter<"AppAction"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    actionPermission?: ActionPermissionListRelationFilter
  }

  export type AppActionOrderByWithRelationInput = {
    id?: SortOrder
    actionName?: SortOrder
    description?: SortOrder
    actionType?: SortOrder
    icon?: SortOrderInput | SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    app?: AppOrderByWithRelationInput
    actionPermission?: ActionPermissionOrderByRelationAggregateInput
  }

  export type AppActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    appId_actionName?: AppActionAppIdActionNameCompoundUniqueInput
    AND?: AppActionWhereInput | AppActionWhereInput[]
    OR?: AppActionWhereInput[]
    NOT?: AppActionWhereInput | AppActionWhereInput[]
    actionName?: StringFilter<"AppAction"> | string
    description?: StringFilter<"AppAction"> | string
    actionType?: EnumAppActionTypeFilter<"AppAction"> | $Enums.AppActionType
    icon?: StringNullableFilter<"AppAction"> | string | null
    appId?: StringFilter<"AppAction"> | string
    createdAt?: DateTimeFilter<"AppAction"> | Date | string
    updatedAt?: DateTimeFilter<"AppAction"> | Date | string
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    actionPermission?: ActionPermissionListRelationFilter
  }, "id" | "appId_actionName">

  export type AppActionOrderByWithAggregationInput = {
    id?: SortOrder
    actionName?: SortOrder
    description?: SortOrder
    actionType?: SortOrder
    icon?: SortOrderInput | SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppActionCountOrderByAggregateInput
    _max?: AppActionMaxOrderByAggregateInput
    _min?: AppActionMinOrderByAggregateInput
  }

  export type AppActionScalarWhereWithAggregatesInput = {
    AND?: AppActionScalarWhereWithAggregatesInput | AppActionScalarWhereWithAggregatesInput[]
    OR?: AppActionScalarWhereWithAggregatesInput[]
    NOT?: AppActionScalarWhereWithAggregatesInput | AppActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppAction"> | string
    actionName?: StringWithAggregatesFilter<"AppAction"> | string
    description?: StringWithAggregatesFilter<"AppAction"> | string
    actionType?: EnumAppActionTypeWithAggregatesFilter<"AppAction"> | $Enums.AppActionType
    icon?: StringNullableWithAggregatesFilter<"AppAction"> | string | null
    appId?: StringWithAggregatesFilter<"AppAction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppAction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppAction"> | Date | string
  }

  export type MenuPermissionWhereInput = {
    AND?: MenuPermissionWhereInput | MenuPermissionWhereInput[]
    OR?: MenuPermissionWhereInput[]
    NOT?: MenuPermissionWhereInput | MenuPermissionWhereInput[]
    id?: StringFilter<"MenuPermission"> | string
    roleId?: StringFilter<"MenuPermission"> | string
    appId?: StringFilter<"MenuPermission"> | string
    appMenuItemId?: StringFilter<"MenuPermission"> | string
    createdAt?: DateTimeFilter<"MenuPermission"> | Date | string
    updatedAt?: DateTimeFilter<"MenuPermission"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    appMenuItem?: XOR<AppMenuItemScalarRelationFilter, AppMenuItemWhereInput>
  }

  export type MenuPermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appMenuItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    app?: AppOrderByWithRelationInput
    appMenuItem?: AppMenuItemOrderByWithRelationInput
  }

  export type MenuPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_appId_appMenuItemId?: MenuPermissionRoleIdAppIdAppMenuItemIdCompoundUniqueInput
    AND?: MenuPermissionWhereInput | MenuPermissionWhereInput[]
    OR?: MenuPermissionWhereInput[]
    NOT?: MenuPermissionWhereInput | MenuPermissionWhereInput[]
    roleId?: StringFilter<"MenuPermission"> | string
    appId?: StringFilter<"MenuPermission"> | string
    appMenuItemId?: StringFilter<"MenuPermission"> | string
    createdAt?: DateTimeFilter<"MenuPermission"> | Date | string
    updatedAt?: DateTimeFilter<"MenuPermission"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    appMenuItem?: XOR<AppMenuItemScalarRelationFilter, AppMenuItemWhereInput>
  }, "id" | "roleId_appId_appMenuItemId">

  export type MenuPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appMenuItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuPermissionCountOrderByAggregateInput
    _max?: MenuPermissionMaxOrderByAggregateInput
    _min?: MenuPermissionMinOrderByAggregateInput
  }

  export type MenuPermissionScalarWhereWithAggregatesInput = {
    AND?: MenuPermissionScalarWhereWithAggregatesInput | MenuPermissionScalarWhereWithAggregatesInput[]
    OR?: MenuPermissionScalarWhereWithAggregatesInput[]
    NOT?: MenuPermissionScalarWhereWithAggregatesInput | MenuPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MenuPermission"> | string
    roleId?: StringWithAggregatesFilter<"MenuPermission"> | string
    appId?: StringWithAggregatesFilter<"MenuPermission"> | string
    appMenuItemId?: StringWithAggregatesFilter<"MenuPermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MenuPermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MenuPermission"> | Date | string
  }

  export type ActionPermissionWhereInput = {
    AND?: ActionPermissionWhereInput | ActionPermissionWhereInput[]
    OR?: ActionPermissionWhereInput[]
    NOT?: ActionPermissionWhereInput | ActionPermissionWhereInput[]
    id?: StringFilter<"ActionPermission"> | string
    roleId?: StringFilter<"ActionPermission"> | string
    appId?: StringFilter<"ActionPermission"> | string
    appActionId?: StringFilter<"ActionPermission"> | string
    createdAt?: DateTimeFilter<"ActionPermission"> | Date | string
    updatedAt?: DateTimeFilter<"ActionPermission"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    appAction?: XOR<AppActionScalarRelationFilter, AppActionWhereInput>
  }

  export type ActionPermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appActionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    app?: AppOrderByWithRelationInput
    appAction?: AppActionOrderByWithRelationInput
  }

  export type ActionPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_appId_appActionId?: ActionPermissionRoleIdAppIdAppActionIdCompoundUniqueInput
    AND?: ActionPermissionWhereInput | ActionPermissionWhereInput[]
    OR?: ActionPermissionWhereInput[]
    NOT?: ActionPermissionWhereInput | ActionPermissionWhereInput[]
    roleId?: StringFilter<"ActionPermission"> | string
    appId?: StringFilter<"ActionPermission"> | string
    appActionId?: StringFilter<"ActionPermission"> | string
    createdAt?: DateTimeFilter<"ActionPermission"> | Date | string
    updatedAt?: DateTimeFilter<"ActionPermission"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    app?: XOR<AppScalarRelationFilter, AppWhereInput>
    appAction?: XOR<AppActionScalarRelationFilter, AppActionWhereInput>
  }, "id" | "roleId_appId_appActionId">

  export type ActionPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appActionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActionPermissionCountOrderByAggregateInput
    _max?: ActionPermissionMaxOrderByAggregateInput
    _min?: ActionPermissionMinOrderByAggregateInput
  }

  export type ActionPermissionScalarWhereWithAggregatesInput = {
    AND?: ActionPermissionScalarWhereWithAggregatesInput | ActionPermissionScalarWhereWithAggregatesInput[]
    OR?: ActionPermissionScalarWhereWithAggregatesInput[]
    NOT?: ActionPermissionScalarWhereWithAggregatesInput | ActionPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActionPermission"> | string
    roleId?: StringWithAggregatesFilter<"ActionPermission"> | string
    appId?: StringWithAggregatesFilter<"ActionPermission"> | string
    appActionId?: StringWithAggregatesFilter<"ActionPermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActionPermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActionPermission"> | Date | string
  }

  export type RBACWhereInput = {
    AND?: RBACWhereInput | RBACWhereInput[]
    OR?: RBACWhereInput[]
    NOT?: RBACWhereInput | RBACWhereInput[]
    id?: StringFilter<"RBAC"> | string
    organizationId?: StringFilter<"RBAC"> | string
    userId?: StringFilter<"RBAC"> | string
    roleId?: StringFilter<"RBAC"> | string
    createdAt?: DateTimeFilter<"RBAC"> | Date | string
    updatedAt?: DateTimeFilter<"RBAC"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type RBACOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type RBACWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_userId_roleId?: RBACOrganizationIdUserIdRoleIdCompoundUniqueInput
    AND?: RBACWhereInput | RBACWhereInput[]
    OR?: RBACWhereInput[]
    NOT?: RBACWhereInput | RBACWhereInput[]
    organizationId?: StringFilter<"RBAC"> | string
    userId?: StringFilter<"RBAC"> | string
    roleId?: StringFilter<"RBAC"> | string
    createdAt?: DateTimeFilter<"RBAC"> | Date | string
    updatedAt?: DateTimeFilter<"RBAC"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id" | "organizationId_userId_roleId">

  export type RBACOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RBACCountOrderByAggregateInput
    _max?: RBACMaxOrderByAggregateInput
    _min?: RBACMinOrderByAggregateInput
  }

  export type RBACScalarWhereWithAggregatesInput = {
    AND?: RBACScalarWhereWithAggregatesInput | RBACScalarWhereWithAggregatesInput[]
    OR?: RBACScalarWhereWithAggregatesInput[]
    NOT?: RBACScalarWhereWithAggregatesInput | RBACScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RBAC"> | string
    organizationId?: StringWithAggregatesFilter<"RBAC"> | string
    userId?: StringWithAggregatesFilter<"RBAC"> | string
    roleId?: StringWithAggregatesFilter<"RBAC"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RBAC"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RBAC"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorCreateInput = {
    id: string
    secret: string
    backupCodes: string
    user: UserCreateNestedOneWithoutTwofactorsInput
  }

  export type TwoFactorUncheckedCreateInput = {
    id: string
    secret: string
    backupCodes: string
    userId: string
  }

  export type TwoFactorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTwofactorsNestedInput
  }

  export type TwoFactorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorCreateManyInput = {
    id: string
    secret: string
    backupCodes: string
    userId: string
  }

  export type TwoFactorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationCreateInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutOrganizationInput
    rbac?: RBACCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    rbac?: RBACUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateInput = {
    id: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutMembersInput
  }

  export type MemberUncheckedCreateInput = {
    id: string
    organizationId: string
    userId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberCreateManyInput = {
    id: string
    organizationId: string
    userId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationCreateInput = {
    id: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
    user: UserCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateInput = {
    id: string
    organizationId: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationCreateManyInput = {
    id: string
    organizationId: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type OauthApplicationCreateInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutOauthapplicationsInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutOauthapplicationInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationUncheckedCreateInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    userId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutOauthapplicationInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutOauthapplicationsNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutOauthapplicationNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationCreateManyInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    userId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenCreateInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthapplication?: OauthApplicationCreateNestedOneWithoutOauthaccesstokensInput
    user?: UserCreateNestedOneWithoutOauthaccesstokensInput
  }

  export type OauthAccessTokenUncheckedCreateInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    clientId?: string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthAccessTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthapplication?: OauthApplicationUpdateOneWithoutOauthaccesstokensNestedInput
    user?: UserUpdateOneWithoutOauthaccesstokensNestedInput
  }

  export type OauthAccessTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenCreateManyInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    clientId?: string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthAccessTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthConsentCreateInput = {
    id: string
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
    oauthapplication?: OauthApplicationCreateNestedOneWithoutOauthconsentsInput
    user?: UserCreateNestedOneWithoutOauthconsentsInput
  }

  export type OauthConsentUncheckedCreateInput = {
    id: string
    clientId?: string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type OauthConsentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oauthapplication?: OauthApplicationUpdateOneWithoutOauthconsentsNestedInput
    user?: UserUpdateOneWithoutOauthconsentsNestedInput
  }

  export type OauthConsentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OauthConsentCreateManyInput = {
    id: string
    clientId?: string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type OauthConsentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OauthConsentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionCreateNestedManyWithoutRoleInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutRoleInput
    rbac?: RBACCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutRoleInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutRoleInput
    rbac?: RBACUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUpdateManyWithoutRoleNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutRoleNestedInput
    rbac?: RBACUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutRoleNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutRoleNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemCreateNestedManyWithoutAppInput
    appActions?: AppActionCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemUncheckedCreateNestedManyWithoutAppInput
    appActions?: AppActionUncheckedCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUpdateManyWithoutAppNestedInput
    appActions?: AppActionUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUncheckedUpdateManyWithoutAppNestedInput
    appActions?: AppActionUncheckedUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppCreateManyInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppOrganizationInput
    organization: OrganizationCreateNestedOneWithoutAppOrganizationInput
  }

  export type AppOrganizationUncheckedCreateInput = {
    appId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppOrganizationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppOrganizationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutAppOrganizationNestedInput
  }

  export type AppOrganizationUncheckedUpdateInput = {
    appId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationCreateManyInput = {
    appId: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppOrganizationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationUncheckedUpdateManyInput = {
    appId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppMenuItemCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppMenuItemsInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppMenuItemInput
  }

  export type AppMenuItemUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppMenuItemInput
  }

  export type AppMenuItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppMenuItemsNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppMenuItemNestedInput
  }

  export type AppMenuItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppMenuItemNestedInput
  }

  export type AppMenuItemCreateManyInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppMenuItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppMenuItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppActionCreateInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppActionsInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppActionInput
  }

  export type AppActionUncheckedCreateInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppActionInput
  }

  export type AppActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppActionsNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppActionNestedInput
  }

  export type AppActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppActionNestedInput
  }

  export type AppActionCreateManyInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutMenuPermissionInput
    app: AppCreateNestedOneWithoutMenuPermissionInput
    appMenuItem: AppMenuItemCreateNestedOneWithoutMenuPermissionInput
  }

  export type MenuPermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    appId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutMenuPermissionNestedInput
    app?: AppUpdateOneRequiredWithoutMenuPermissionNestedInput
    appMenuItem?: AppMenuItemUpdateOneRequiredWithoutMenuPermissionNestedInput
  }

  export type MenuPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionCreateManyInput = {
    id?: string
    roleId: string
    appId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutActionPermissionInput
    app: AppCreateNestedOneWithoutActionPermissionInput
    appAction: AppActionCreateNestedOneWithoutActionPermissionInput
  }

  export type ActionPermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    appId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutActionPermissionNestedInput
    app?: AppUpdateOneRequiredWithoutActionPermissionNestedInput
    appAction?: AppActionUpdateOneRequiredWithoutActionPermissionNestedInput
  }

  export type ActionPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionCreateManyInput = {
    id?: string
    roleId: string
    appId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutRbacInput
    user: UserCreateNestedOneWithoutRbacInput
    role: RoleCreateNestedOneWithoutRbacInput
  }

  export type RBACUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutRbacNestedInput
    user?: UserUpdateOneRequiredWithoutRbacNestedInput
    role?: RoleUpdateOneRequiredWithoutRbacNestedInput
  }

  export type RBACUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type TwoFactorListRelationFilter = {
    every?: TwoFactorWhereInput
    some?: TwoFactorWhereInput
    none?: TwoFactorWhereInput
  }

  export type MemberListRelationFilter = {
    every?: MemberWhereInput
    some?: MemberWhereInput
    none?: MemberWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type RBACListRelationFilter = {
    every?: RBACWhereInput
    some?: RBACWhereInput
    none?: RBACWhereInput
  }

  export type OauthApplicationListRelationFilter = {
    every?: OauthApplicationWhereInput
    some?: OauthApplicationWhereInput
    none?: OauthApplicationWhereInput
  }

  export type OauthAccessTokenListRelationFilter = {
    every?: OauthAccessTokenWhereInput
    some?: OauthAccessTokenWhereInput
    none?: OauthAccessTokenWhereInput
  }

  export type OauthConsentListRelationFilter = {
    every?: OauthConsentWhereInput
    some?: OauthConsentWhereInput
    none?: OauthConsentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwoFactorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RBACOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OauthApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OauthAccessTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OauthConsentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twoFactorEnabled?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
    username?: SortOrder
    displayUsername?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twoFactorEnabled?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
    username?: SortOrder
    displayUsername?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twoFactorEnabled?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
    username?: SortOrder
    displayUsername?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
    activeOrganizationId?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwoFactorCountOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    userId?: SortOrder
  }

  export type TwoFactorMaxOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    userId?: SortOrder
  }

  export type TwoFactorMinOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    userId?: SortOrder
  }

  export type AppOrganizationListRelationFilter = {
    every?: AppOrganizationWhereInput
    some?: AppOrganizationWhereInput
    none?: AppOrganizationWhereInput
  }

  export type AppOrganizationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    inviterId?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type OauthApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    metadata?: SortOrder
    clientId?: SortOrder
    clientSecret?: SortOrder
    redirectURLs?: SortOrder
    type?: SortOrder
    disabled?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    metadata?: SortOrder
    clientId?: SortOrder
    clientSecret?: SortOrder
    redirectURLs?: SortOrder
    type?: SortOrder
    disabled?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    metadata?: SortOrder
    clientId?: SortOrder
    clientSecret?: SortOrder
    redirectURLs?: SortOrder
    type?: SortOrder
    disabled?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthApplicationNullableScalarRelationFilter = {
    is?: OauthApplicationWhereInput | null
    isNot?: OauthApplicationWhereInput | null
  }

  export type OauthAccessTokenCountOrderByAggregateInput = {
    id?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthAccessTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthAccessTokenMinOrderByAggregateInput = {
    id?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OauthConsentCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consentGiven?: SortOrder
  }

  export type OauthConsentMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consentGiven?: SortOrder
  }

  export type OauthConsentMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consentGiven?: SortOrder
  }

  export type MenuPermissionListRelationFilter = {
    every?: MenuPermissionWhereInput
    some?: MenuPermissionWhereInput
    none?: MenuPermissionWhereInput
  }

  export type ActionPermissionListRelationFilter = {
    every?: ActionPermissionWhereInput
    some?: ActionPermissionWhereInput
    none?: ActionPermissionWhereInput
  }

  export type MenuPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppType | EnumAppTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppTypeFilter<$PrismaModel> | $Enums.AppType
  }

  export type AppMenuItemListRelationFilter = {
    every?: AppMenuItemWhereInput
    some?: AppMenuItemWhereInput
    none?: AppMenuItemWhereInput
  }

  export type AppActionListRelationFilter = {
    every?: AppActionWhereInput
    some?: AppActionWhereInput
    none?: AppActionWhereInput
  }

  export type AppMenuItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppType | EnumAppTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppTypeFilter<$PrismaModel>
    _max?: NestedEnumAppTypeFilter<$PrismaModel>
  }

  export type AppScalarRelationFilter = {
    is?: AppWhereInput
    isNot?: AppWhereInput
  }

  export type AppOrganizationAppIdOrganizationIdCompoundUniqueInput = {
    appId: string
    organizationId: string
  }

  export type AppOrganizationCountOrderByAggregateInput = {
    appId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppOrganizationMaxOrderByAggregateInput = {
    appId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppOrganizationMinOrderByAggregateInput = {
    appId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMenuItemAppIdSlugCompoundUniqueInput = {
    appId: string
    slug: string
  }

  export type AppMenuItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMenuItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMenuItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppActionType | EnumAppActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppActionTypeFilter<$PrismaModel> | $Enums.AppActionType
  }

  export type AppActionAppIdActionNameCompoundUniqueInput = {
    appId: string
    actionName: string
  }

  export type AppActionCountOrderByAggregateInput = {
    id?: SortOrder
    actionName?: SortOrder
    description?: SortOrder
    actionType?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppActionMaxOrderByAggregateInput = {
    id?: SortOrder
    actionName?: SortOrder
    description?: SortOrder
    actionType?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppActionMinOrderByAggregateInput = {
    id?: SortOrder
    actionName?: SortOrder
    description?: SortOrder
    actionType?: SortOrder
    icon?: SortOrder
    appId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppActionType | EnumAppActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppActionTypeFilter<$PrismaModel>
    _max?: NestedEnumAppActionTypeFilter<$PrismaModel>
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type AppMenuItemScalarRelationFilter = {
    is?: AppMenuItemWhereInput
    isNot?: AppMenuItemWhereInput
  }

  export type MenuPermissionRoleIdAppIdAppMenuItemIdCompoundUniqueInput = {
    roleId: string
    appId: string
    appMenuItemId: string
  }

  export type MenuPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appMenuItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appMenuItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appMenuItemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppActionScalarRelationFilter = {
    is?: AppActionWhereInput
    isNot?: AppActionWhereInput
  }

  export type ActionPermissionRoleIdAppIdAppActionIdCompoundUniqueInput = {
    roleId: string
    appId: string
    appActionId: string
  }

  export type ActionPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appActionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActionPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appActionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActionPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    appId?: SortOrder
    appActionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RBACOrganizationIdUserIdRoleIdCompoundUniqueInput = {
    organizationId: string
    userId: string
    roleId: string
  }

  export type RBACCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RBACMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RBACMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TwoFactorCreateNestedManyWithoutUserInput = {
    create?: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput> | TwoFactorCreateWithoutUserInput[] | TwoFactorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TwoFactorCreateOrConnectWithoutUserInput | TwoFactorCreateOrConnectWithoutUserInput[]
    createMany?: TwoFactorCreateManyUserInputEnvelope
    connect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
  }

  export type MemberCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type RBACCreateNestedManyWithoutUserInput = {
    create?: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput> | RBACCreateWithoutUserInput[] | RBACUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutUserInput | RBACCreateOrConnectWithoutUserInput[]
    createMany?: RBACCreateManyUserInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type OauthApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput> | OauthApplicationCreateWithoutUserInput[] | OauthApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutUserInput | OauthApplicationCreateOrConnectWithoutUserInput[]
    createMany?: OauthApplicationCreateManyUserInputEnvelope
    connect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
  }

  export type OauthAccessTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput> | OauthAccessTokenCreateWithoutUserInput[] | OauthAccessTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutUserInput | OauthAccessTokenCreateOrConnectWithoutUserInput[]
    createMany?: OauthAccessTokenCreateManyUserInputEnvelope
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
  }

  export type OauthConsentCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput> | OauthConsentCreateWithoutUserInput[] | OauthConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutUserInput | OauthConsentCreateOrConnectWithoutUserInput[]
    createMany?: OauthConsentCreateManyUserInputEnvelope
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TwoFactorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput> | TwoFactorCreateWithoutUserInput[] | TwoFactorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TwoFactorCreateOrConnectWithoutUserInput | TwoFactorCreateOrConnectWithoutUserInput[]
    createMany?: TwoFactorCreateManyUserInputEnvelope
    connect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type RBACUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput> | RBACCreateWithoutUserInput[] | RBACUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutUserInput | RBACCreateOrConnectWithoutUserInput[]
    createMany?: RBACCreateManyUserInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type OauthApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput> | OauthApplicationCreateWithoutUserInput[] | OauthApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutUserInput | OauthApplicationCreateOrConnectWithoutUserInput[]
    createMany?: OauthApplicationCreateManyUserInputEnvelope
    connect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
  }

  export type OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput> | OauthAccessTokenCreateWithoutUserInput[] | OauthAccessTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutUserInput | OauthAccessTokenCreateOrConnectWithoutUserInput[]
    createMany?: OauthAccessTokenCreateManyUserInputEnvelope
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
  }

  export type OauthConsentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput> | OauthConsentCreateWithoutUserInput[] | OauthConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutUserInput | OauthConsentCreateOrConnectWithoutUserInput[]
    createMany?: OauthConsentCreateManyUserInputEnvelope
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TwoFactorUpdateManyWithoutUserNestedInput = {
    create?: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput> | TwoFactorCreateWithoutUserInput[] | TwoFactorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TwoFactorCreateOrConnectWithoutUserInput | TwoFactorCreateOrConnectWithoutUserInput[]
    upsert?: TwoFactorUpsertWithWhereUniqueWithoutUserInput | TwoFactorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TwoFactorCreateManyUserInputEnvelope
    set?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    disconnect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    delete?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    connect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    update?: TwoFactorUpdateWithWhereUniqueWithoutUserInput | TwoFactorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TwoFactorUpdateManyWithWhereWithoutUserInput | TwoFactorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TwoFactorScalarWhereInput | TwoFactorScalarWhereInput[]
  }

  export type MemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type RBACUpdateManyWithoutUserNestedInput = {
    create?: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput> | RBACCreateWithoutUserInput[] | RBACUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutUserInput | RBACCreateOrConnectWithoutUserInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutUserInput | RBACUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RBACCreateManyUserInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutUserInput | RBACUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutUserInput | RBACUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type OauthApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput> | OauthApplicationCreateWithoutUserInput[] | OauthApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutUserInput | OauthApplicationCreateOrConnectWithoutUserInput[]
    upsert?: OauthApplicationUpsertWithWhereUniqueWithoutUserInput | OauthApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthApplicationCreateManyUserInputEnvelope
    set?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    disconnect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    delete?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    connect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    update?: OauthApplicationUpdateWithWhereUniqueWithoutUserInput | OauthApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthApplicationUpdateManyWithWhereWithoutUserInput | OauthApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthApplicationScalarWhereInput | OauthApplicationScalarWhereInput[]
  }

  export type OauthAccessTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput> | OauthAccessTokenCreateWithoutUserInput[] | OauthAccessTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutUserInput | OauthAccessTokenCreateOrConnectWithoutUserInput[]
    upsert?: OauthAccessTokenUpsertWithWhereUniqueWithoutUserInput | OauthAccessTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthAccessTokenCreateManyUserInputEnvelope
    set?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    disconnect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    delete?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    update?: OauthAccessTokenUpdateWithWhereUniqueWithoutUserInput | OauthAccessTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthAccessTokenUpdateManyWithWhereWithoutUserInput | OauthAccessTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
  }

  export type OauthConsentUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput> | OauthConsentCreateWithoutUserInput[] | OauthConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutUserInput | OauthConsentCreateOrConnectWithoutUserInput[]
    upsert?: OauthConsentUpsertWithWhereUniqueWithoutUserInput | OauthConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthConsentCreateManyUserInputEnvelope
    set?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    disconnect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    delete?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    update?: OauthConsentUpdateWithWhereUniqueWithoutUserInput | OauthConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthConsentUpdateManyWithWhereWithoutUserInput | OauthConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TwoFactorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput> | TwoFactorCreateWithoutUserInput[] | TwoFactorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TwoFactorCreateOrConnectWithoutUserInput | TwoFactorCreateOrConnectWithoutUserInput[]
    upsert?: TwoFactorUpsertWithWhereUniqueWithoutUserInput | TwoFactorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TwoFactorCreateManyUserInputEnvelope
    set?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    disconnect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    delete?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    connect?: TwoFactorWhereUniqueInput | TwoFactorWhereUniqueInput[]
    update?: TwoFactorUpdateWithWhereUniqueWithoutUserInput | TwoFactorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TwoFactorUpdateManyWithWhereWithoutUserInput | TwoFactorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TwoFactorScalarWhereInput | TwoFactorScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput> | InvitationCreateWithoutUserInput[] | InvitationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutUserInput | InvitationCreateOrConnectWithoutUserInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutUserInput | InvitationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationCreateManyUserInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutUserInput | InvitationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutUserInput | InvitationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type RBACUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput> | RBACCreateWithoutUserInput[] | RBACUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutUserInput | RBACCreateOrConnectWithoutUserInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutUserInput | RBACUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RBACCreateManyUserInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutUserInput | RBACUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutUserInput | RBACUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type OauthApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput> | OauthApplicationCreateWithoutUserInput[] | OauthApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutUserInput | OauthApplicationCreateOrConnectWithoutUserInput[]
    upsert?: OauthApplicationUpsertWithWhereUniqueWithoutUserInput | OauthApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthApplicationCreateManyUserInputEnvelope
    set?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    disconnect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    delete?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    connect?: OauthApplicationWhereUniqueInput | OauthApplicationWhereUniqueInput[]
    update?: OauthApplicationUpdateWithWhereUniqueWithoutUserInput | OauthApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthApplicationUpdateManyWithWhereWithoutUserInput | OauthApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthApplicationScalarWhereInput | OauthApplicationScalarWhereInput[]
  }

  export type OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput> | OauthAccessTokenCreateWithoutUserInput[] | OauthAccessTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutUserInput | OauthAccessTokenCreateOrConnectWithoutUserInput[]
    upsert?: OauthAccessTokenUpsertWithWhereUniqueWithoutUserInput | OauthAccessTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthAccessTokenCreateManyUserInputEnvelope
    set?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    disconnect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    delete?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    update?: OauthAccessTokenUpdateWithWhereUniqueWithoutUserInput | OauthAccessTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthAccessTokenUpdateManyWithWhereWithoutUserInput | OauthAccessTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
  }

  export type OauthConsentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput> | OauthConsentCreateWithoutUserInput[] | OauthConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutUserInput | OauthConsentCreateOrConnectWithoutUserInput[]
    upsert?: OauthConsentUpsertWithWhereUniqueWithoutUserInput | OauthConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OauthConsentCreateManyUserInputEnvelope
    set?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    disconnect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    delete?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    update?: OauthConsentUpdateWithWhereUniqueWithoutUserInput | OauthConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OauthConsentUpdateManyWithWhereWithoutUserInput | OauthConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutTwofactorsInput = {
    create?: XOR<UserCreateWithoutTwofactorsInput, UserUncheckedCreateWithoutTwofactorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTwofactorsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTwofactorsNestedInput = {
    create?: XOR<UserCreateWithoutTwofactorsInput, UserUncheckedCreateWithoutTwofactorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTwofactorsInput
    upsert?: UserUpsertWithoutTwofactorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTwofactorsInput, UserUpdateWithoutTwofactorsInput>, UserUncheckedUpdateWithoutTwofactorsInput>
  }

  export type MemberCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type AppOrganizationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput> | AppOrganizationCreateWithoutOrganizationInput[] | AppOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutOrganizationInput | AppOrganizationCreateOrConnectWithoutOrganizationInput[]
    createMany?: AppOrganizationCreateManyOrganizationInputEnvelope
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
  }

  export type RBACCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput> | RBACCreateWithoutOrganizationInput[] | RBACUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutOrganizationInput | RBACCreateOrConnectWithoutOrganizationInput[]
    createMany?: RBACCreateManyOrganizationInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type AppOrganizationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput> | AppOrganizationCreateWithoutOrganizationInput[] | AppOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutOrganizationInput | AppOrganizationCreateOrConnectWithoutOrganizationInput[]
    createMany?: AppOrganizationCreateManyOrganizationInputEnvelope
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
  }

  export type RBACUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput> | RBACCreateWithoutOrganizationInput[] | RBACUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutOrganizationInput | RBACCreateOrConnectWithoutOrganizationInput[]
    createMany?: RBACCreateManyOrganizationInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type MemberUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type AppOrganizationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput> | AppOrganizationCreateWithoutOrganizationInput[] | AppOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutOrganizationInput | AppOrganizationCreateOrConnectWithoutOrganizationInput[]
    upsert?: AppOrganizationUpsertWithWhereUniqueWithoutOrganizationInput | AppOrganizationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AppOrganizationCreateManyOrganizationInputEnvelope
    set?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    disconnect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    delete?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    update?: AppOrganizationUpdateWithWhereUniqueWithoutOrganizationInput | AppOrganizationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AppOrganizationUpdateManyWithWhereWithoutOrganizationInput | AppOrganizationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
  }

  export type RBACUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput> | RBACCreateWithoutOrganizationInput[] | RBACUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutOrganizationInput | RBACCreateOrConnectWithoutOrganizationInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutOrganizationInput | RBACUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RBACCreateManyOrganizationInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutOrganizationInput | RBACUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutOrganizationInput | RBACUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput> | MemberCreateWithoutOrganizationInput[] | MemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutOrganizationInput | MemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutOrganizationInput | MemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MemberCreateManyOrganizationInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutOrganizationInput | MemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutOrganizationInput | MemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput> | InvitationCreateWithoutOrganizationInput[] | InvitationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutOrganizationInput | InvitationCreateOrConnectWithoutOrganizationInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutOrganizationInput | InvitationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: InvitationCreateManyOrganizationInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutOrganizationInput | InvitationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutOrganizationInput | InvitationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type AppOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput> | AppOrganizationCreateWithoutOrganizationInput[] | AppOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutOrganizationInput | AppOrganizationCreateOrConnectWithoutOrganizationInput[]
    upsert?: AppOrganizationUpsertWithWhereUniqueWithoutOrganizationInput | AppOrganizationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AppOrganizationCreateManyOrganizationInputEnvelope
    set?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    disconnect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    delete?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    update?: AppOrganizationUpdateWithWhereUniqueWithoutOrganizationInput | AppOrganizationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AppOrganizationUpdateManyWithWhereWithoutOrganizationInput | AppOrganizationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
  }

  export type RBACUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput> | RBACCreateWithoutOrganizationInput[] | RBACUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutOrganizationInput | RBACCreateOrConnectWithoutOrganizationInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutOrganizationInput | RBACUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: RBACCreateManyOrganizationInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutOrganizationInput | RBACUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutOrganizationInput | RBACUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutMembersInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMembersInput = {
    create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembersInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    upsert?: OrganizationUpsertWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembersInput, OrganizationUpdateWithoutMembersInput>, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembersInput
    upsert?: UserUpsertWithoutMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMembersInput, UserUpdateWithoutMembersInput>, UserUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitationsInput
    upsert?: OrganizationUpsertWithoutInvitationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitationsInput, OrganizationUpdateWithoutInvitationsInput>, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    upsert?: UserUpsertWithoutInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsInput, UserUpdateWithoutInvitationsInput>, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserCreateNestedOneWithoutOauthapplicationsInput = {
    create?: XOR<UserCreateWithoutOauthapplicationsInput, UserUncheckedCreateWithoutOauthapplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthapplicationsInput
    connect?: UserWhereUniqueInput
  }

  export type OauthAccessTokenCreateNestedManyWithoutOauthapplicationInput = {
    create?: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput> | OauthAccessTokenCreateWithoutOauthapplicationInput[] | OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput | OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput[]
    createMany?: OauthAccessTokenCreateManyOauthapplicationInputEnvelope
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
  }

  export type OauthConsentCreateNestedManyWithoutOauthapplicationInput = {
    create?: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput> | OauthConsentCreateWithoutOauthapplicationInput[] | OauthConsentUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutOauthapplicationInput | OauthConsentCreateOrConnectWithoutOauthapplicationInput[]
    createMany?: OauthConsentCreateManyOauthapplicationInputEnvelope
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
  }

  export type OauthAccessTokenUncheckedCreateNestedManyWithoutOauthapplicationInput = {
    create?: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput> | OauthAccessTokenCreateWithoutOauthapplicationInput[] | OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput | OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput[]
    createMany?: OauthAccessTokenCreateManyOauthapplicationInputEnvelope
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
  }

  export type OauthConsentUncheckedCreateNestedManyWithoutOauthapplicationInput = {
    create?: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput> | OauthConsentCreateWithoutOauthapplicationInput[] | OauthConsentUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutOauthapplicationInput | OauthConsentCreateOrConnectWithoutOauthapplicationInput[]
    createMany?: OauthConsentCreateManyOauthapplicationInputEnvelope
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutOauthapplicationsNestedInput = {
    create?: XOR<UserCreateWithoutOauthapplicationsInput, UserUncheckedCreateWithoutOauthapplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthapplicationsInput
    upsert?: UserUpsertWithoutOauthapplicationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauthapplicationsInput, UserUpdateWithoutOauthapplicationsInput>, UserUncheckedUpdateWithoutOauthapplicationsInput>
  }

  export type OauthAccessTokenUpdateManyWithoutOauthapplicationNestedInput = {
    create?: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput> | OauthAccessTokenCreateWithoutOauthapplicationInput[] | OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput | OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput[]
    upsert?: OauthAccessTokenUpsertWithWhereUniqueWithoutOauthapplicationInput | OauthAccessTokenUpsertWithWhereUniqueWithoutOauthapplicationInput[]
    createMany?: OauthAccessTokenCreateManyOauthapplicationInputEnvelope
    set?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    disconnect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    delete?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    update?: OauthAccessTokenUpdateWithWhereUniqueWithoutOauthapplicationInput | OauthAccessTokenUpdateWithWhereUniqueWithoutOauthapplicationInput[]
    updateMany?: OauthAccessTokenUpdateManyWithWhereWithoutOauthapplicationInput | OauthAccessTokenUpdateManyWithWhereWithoutOauthapplicationInput[]
    deleteMany?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
  }

  export type OauthConsentUpdateManyWithoutOauthapplicationNestedInput = {
    create?: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput> | OauthConsentCreateWithoutOauthapplicationInput[] | OauthConsentUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutOauthapplicationInput | OauthConsentCreateOrConnectWithoutOauthapplicationInput[]
    upsert?: OauthConsentUpsertWithWhereUniqueWithoutOauthapplicationInput | OauthConsentUpsertWithWhereUniqueWithoutOauthapplicationInput[]
    createMany?: OauthConsentCreateManyOauthapplicationInputEnvelope
    set?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    disconnect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    delete?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    update?: OauthConsentUpdateWithWhereUniqueWithoutOauthapplicationInput | OauthConsentUpdateWithWhereUniqueWithoutOauthapplicationInput[]
    updateMany?: OauthConsentUpdateManyWithWhereWithoutOauthapplicationInput | OauthConsentUpdateManyWithWhereWithoutOauthapplicationInput[]
    deleteMany?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
  }

  export type OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationNestedInput = {
    create?: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput> | OauthAccessTokenCreateWithoutOauthapplicationInput[] | OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput | OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput[]
    upsert?: OauthAccessTokenUpsertWithWhereUniqueWithoutOauthapplicationInput | OauthAccessTokenUpsertWithWhereUniqueWithoutOauthapplicationInput[]
    createMany?: OauthAccessTokenCreateManyOauthapplicationInputEnvelope
    set?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    disconnect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    delete?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    connect?: OauthAccessTokenWhereUniqueInput | OauthAccessTokenWhereUniqueInput[]
    update?: OauthAccessTokenUpdateWithWhereUniqueWithoutOauthapplicationInput | OauthAccessTokenUpdateWithWhereUniqueWithoutOauthapplicationInput[]
    updateMany?: OauthAccessTokenUpdateManyWithWhereWithoutOauthapplicationInput | OauthAccessTokenUpdateManyWithWhereWithoutOauthapplicationInput[]
    deleteMany?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
  }

  export type OauthConsentUncheckedUpdateManyWithoutOauthapplicationNestedInput = {
    create?: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput> | OauthConsentCreateWithoutOauthapplicationInput[] | OauthConsentUncheckedCreateWithoutOauthapplicationInput[]
    connectOrCreate?: OauthConsentCreateOrConnectWithoutOauthapplicationInput | OauthConsentCreateOrConnectWithoutOauthapplicationInput[]
    upsert?: OauthConsentUpsertWithWhereUniqueWithoutOauthapplicationInput | OauthConsentUpsertWithWhereUniqueWithoutOauthapplicationInput[]
    createMany?: OauthConsentCreateManyOauthapplicationInputEnvelope
    set?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    disconnect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    delete?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    connect?: OauthConsentWhereUniqueInput | OauthConsentWhereUniqueInput[]
    update?: OauthConsentUpdateWithWhereUniqueWithoutOauthapplicationInput | OauthConsentUpdateWithWhereUniqueWithoutOauthapplicationInput[]
    updateMany?: OauthConsentUpdateManyWithWhereWithoutOauthapplicationInput | OauthConsentUpdateManyWithWhereWithoutOauthapplicationInput[]
    deleteMany?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
  }

  export type OauthApplicationCreateNestedOneWithoutOauthaccesstokensInput = {
    create?: XOR<OauthApplicationCreateWithoutOauthaccesstokensInput, OauthApplicationUncheckedCreateWithoutOauthaccesstokensInput>
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutOauthaccesstokensInput
    connect?: OauthApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOauthaccesstokensInput = {
    create?: XOR<UserCreateWithoutOauthaccesstokensInput, UserUncheckedCreateWithoutOauthaccesstokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthaccesstokensInput
    connect?: UserWhereUniqueInput
  }

  export type OauthApplicationUpdateOneWithoutOauthaccesstokensNestedInput = {
    create?: XOR<OauthApplicationCreateWithoutOauthaccesstokensInput, OauthApplicationUncheckedCreateWithoutOauthaccesstokensInput>
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutOauthaccesstokensInput
    upsert?: OauthApplicationUpsertWithoutOauthaccesstokensInput
    disconnect?: OauthApplicationWhereInput | boolean
    delete?: OauthApplicationWhereInput | boolean
    connect?: OauthApplicationWhereUniqueInput
    update?: XOR<XOR<OauthApplicationUpdateToOneWithWhereWithoutOauthaccesstokensInput, OauthApplicationUpdateWithoutOauthaccesstokensInput>, OauthApplicationUncheckedUpdateWithoutOauthaccesstokensInput>
  }

  export type UserUpdateOneWithoutOauthaccesstokensNestedInput = {
    create?: XOR<UserCreateWithoutOauthaccesstokensInput, UserUncheckedCreateWithoutOauthaccesstokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthaccesstokensInput
    upsert?: UserUpsertWithoutOauthaccesstokensInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauthaccesstokensInput, UserUpdateWithoutOauthaccesstokensInput>, UserUncheckedUpdateWithoutOauthaccesstokensInput>
  }

  export type OauthApplicationCreateNestedOneWithoutOauthconsentsInput = {
    create?: XOR<OauthApplicationCreateWithoutOauthconsentsInput, OauthApplicationUncheckedCreateWithoutOauthconsentsInput>
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutOauthconsentsInput
    connect?: OauthApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOauthconsentsInput = {
    create?: XOR<UserCreateWithoutOauthconsentsInput, UserUncheckedCreateWithoutOauthconsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthconsentsInput
    connect?: UserWhereUniqueInput
  }

  export type OauthApplicationUpdateOneWithoutOauthconsentsNestedInput = {
    create?: XOR<OauthApplicationCreateWithoutOauthconsentsInput, OauthApplicationUncheckedCreateWithoutOauthconsentsInput>
    connectOrCreate?: OauthApplicationCreateOrConnectWithoutOauthconsentsInput
    upsert?: OauthApplicationUpsertWithoutOauthconsentsInput
    disconnect?: OauthApplicationWhereInput | boolean
    delete?: OauthApplicationWhereInput | boolean
    connect?: OauthApplicationWhereUniqueInput
    update?: XOR<XOR<OauthApplicationUpdateToOneWithWhereWithoutOauthconsentsInput, OauthApplicationUpdateWithoutOauthconsentsInput>, OauthApplicationUncheckedUpdateWithoutOauthconsentsInput>
  }

  export type UserUpdateOneWithoutOauthconsentsNestedInput = {
    create?: XOR<UserCreateWithoutOauthconsentsInput, UserUncheckedCreateWithoutOauthconsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOauthconsentsInput
    upsert?: UserUpsertWithoutOauthconsentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOauthconsentsInput, UserUpdateWithoutOauthconsentsInput>, UserUncheckedUpdateWithoutOauthconsentsInput>
  }

  export type MenuPermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput> | MenuPermissionCreateWithoutRoleInput[] | MenuPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutRoleInput | MenuPermissionCreateOrConnectWithoutRoleInput[]
    createMany?: MenuPermissionCreateManyRoleInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type ActionPermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput> | ActionPermissionCreateWithoutRoleInput[] | ActionPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutRoleInput | ActionPermissionCreateOrConnectWithoutRoleInput[]
    createMany?: ActionPermissionCreateManyRoleInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type RBACCreateNestedManyWithoutRoleInput = {
    create?: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput> | RBACCreateWithoutRoleInput[] | RBACUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutRoleInput | RBACCreateOrConnectWithoutRoleInput[]
    createMany?: RBACCreateManyRoleInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type MenuPermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput> | MenuPermissionCreateWithoutRoleInput[] | MenuPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutRoleInput | MenuPermissionCreateOrConnectWithoutRoleInput[]
    createMany?: MenuPermissionCreateManyRoleInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type ActionPermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput> | ActionPermissionCreateWithoutRoleInput[] | ActionPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutRoleInput | ActionPermissionCreateOrConnectWithoutRoleInput[]
    createMany?: ActionPermissionCreateManyRoleInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type RBACUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput> | RBACCreateWithoutRoleInput[] | RBACUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutRoleInput | RBACCreateOrConnectWithoutRoleInput[]
    createMany?: RBACCreateManyRoleInputEnvelope
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
  }

  export type MenuPermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput> | MenuPermissionCreateWithoutRoleInput[] | MenuPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutRoleInput | MenuPermissionCreateOrConnectWithoutRoleInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutRoleInput | MenuPermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: MenuPermissionCreateManyRoleInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutRoleInput | MenuPermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutRoleInput | MenuPermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type ActionPermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput> | ActionPermissionCreateWithoutRoleInput[] | ActionPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutRoleInput | ActionPermissionCreateOrConnectWithoutRoleInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutRoleInput | ActionPermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: ActionPermissionCreateManyRoleInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutRoleInput | ActionPermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutRoleInput | ActionPermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type RBACUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput> | RBACCreateWithoutRoleInput[] | RBACUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutRoleInput | RBACCreateOrConnectWithoutRoleInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutRoleInput | RBACUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RBACCreateManyRoleInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutRoleInput | RBACUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutRoleInput | RBACUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type MenuPermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput> | MenuPermissionCreateWithoutRoleInput[] | MenuPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutRoleInput | MenuPermissionCreateOrConnectWithoutRoleInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutRoleInput | MenuPermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: MenuPermissionCreateManyRoleInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutRoleInput | MenuPermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutRoleInput | MenuPermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type ActionPermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput> | ActionPermissionCreateWithoutRoleInput[] | ActionPermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutRoleInput | ActionPermissionCreateOrConnectWithoutRoleInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutRoleInput | ActionPermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: ActionPermissionCreateManyRoleInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutRoleInput | ActionPermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutRoleInput | ActionPermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type RBACUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput> | RBACCreateWithoutRoleInput[] | RBACUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RBACCreateOrConnectWithoutRoleInput | RBACCreateOrConnectWithoutRoleInput[]
    upsert?: RBACUpsertWithWhereUniqueWithoutRoleInput | RBACUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RBACCreateManyRoleInputEnvelope
    set?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    disconnect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    delete?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    connect?: RBACWhereUniqueInput | RBACWhereUniqueInput[]
    update?: RBACUpdateWithWhereUniqueWithoutRoleInput | RBACUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RBACUpdateManyWithWhereWithoutRoleInput | RBACUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RBACScalarWhereInput | RBACScalarWhereInput[]
  }

  export type AppMenuItemCreateNestedManyWithoutAppInput = {
    create?: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput> | AppMenuItemCreateWithoutAppInput[] | AppMenuItemUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutAppInput | AppMenuItemCreateOrConnectWithoutAppInput[]
    createMany?: AppMenuItemCreateManyAppInputEnvelope
    connect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
  }

  export type AppActionCreateNestedManyWithoutAppInput = {
    create?: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput> | AppActionCreateWithoutAppInput[] | AppActionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppActionCreateOrConnectWithoutAppInput | AppActionCreateOrConnectWithoutAppInput[]
    createMany?: AppActionCreateManyAppInputEnvelope
    connect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
  }

  export type AppOrganizationCreateNestedManyWithoutAppInput = {
    create?: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput> | AppOrganizationCreateWithoutAppInput[] | AppOrganizationUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutAppInput | AppOrganizationCreateOrConnectWithoutAppInput[]
    createMany?: AppOrganizationCreateManyAppInputEnvelope
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
  }

  export type MenuPermissionCreateNestedManyWithoutAppInput = {
    create?: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput> | MenuPermissionCreateWithoutAppInput[] | MenuPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppInput | MenuPermissionCreateOrConnectWithoutAppInput[]
    createMany?: MenuPermissionCreateManyAppInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type ActionPermissionCreateNestedManyWithoutAppInput = {
    create?: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput> | ActionPermissionCreateWithoutAppInput[] | ActionPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppInput | ActionPermissionCreateOrConnectWithoutAppInput[]
    createMany?: ActionPermissionCreateManyAppInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type AppMenuItemUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput> | AppMenuItemCreateWithoutAppInput[] | AppMenuItemUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutAppInput | AppMenuItemCreateOrConnectWithoutAppInput[]
    createMany?: AppMenuItemCreateManyAppInputEnvelope
    connect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
  }

  export type AppActionUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput> | AppActionCreateWithoutAppInput[] | AppActionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppActionCreateOrConnectWithoutAppInput | AppActionCreateOrConnectWithoutAppInput[]
    createMany?: AppActionCreateManyAppInputEnvelope
    connect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
  }

  export type AppOrganizationUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput> | AppOrganizationCreateWithoutAppInput[] | AppOrganizationUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutAppInput | AppOrganizationCreateOrConnectWithoutAppInput[]
    createMany?: AppOrganizationCreateManyAppInputEnvelope
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
  }

  export type MenuPermissionUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput> | MenuPermissionCreateWithoutAppInput[] | MenuPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppInput | MenuPermissionCreateOrConnectWithoutAppInput[]
    createMany?: MenuPermissionCreateManyAppInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type ActionPermissionUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput> | ActionPermissionCreateWithoutAppInput[] | ActionPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppInput | ActionPermissionCreateOrConnectWithoutAppInput[]
    createMany?: ActionPermissionCreateManyAppInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type EnumAppTypeFieldUpdateOperationsInput = {
    set?: $Enums.AppType
  }

  export type AppMenuItemUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput> | AppMenuItemCreateWithoutAppInput[] | AppMenuItemUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutAppInput | AppMenuItemCreateOrConnectWithoutAppInput[]
    upsert?: AppMenuItemUpsertWithWhereUniqueWithoutAppInput | AppMenuItemUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppMenuItemCreateManyAppInputEnvelope
    set?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    disconnect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    delete?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    connect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    update?: AppMenuItemUpdateWithWhereUniqueWithoutAppInput | AppMenuItemUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppMenuItemUpdateManyWithWhereWithoutAppInput | AppMenuItemUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppMenuItemScalarWhereInput | AppMenuItemScalarWhereInput[]
  }

  export type AppActionUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput> | AppActionCreateWithoutAppInput[] | AppActionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppActionCreateOrConnectWithoutAppInput | AppActionCreateOrConnectWithoutAppInput[]
    upsert?: AppActionUpsertWithWhereUniqueWithoutAppInput | AppActionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppActionCreateManyAppInputEnvelope
    set?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    disconnect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    delete?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    connect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    update?: AppActionUpdateWithWhereUniqueWithoutAppInput | AppActionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppActionUpdateManyWithWhereWithoutAppInput | AppActionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppActionScalarWhereInput | AppActionScalarWhereInput[]
  }

  export type AppOrganizationUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput> | AppOrganizationCreateWithoutAppInput[] | AppOrganizationUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutAppInput | AppOrganizationCreateOrConnectWithoutAppInput[]
    upsert?: AppOrganizationUpsertWithWhereUniqueWithoutAppInput | AppOrganizationUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppOrganizationCreateManyAppInputEnvelope
    set?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    disconnect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    delete?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    update?: AppOrganizationUpdateWithWhereUniqueWithoutAppInput | AppOrganizationUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppOrganizationUpdateManyWithWhereWithoutAppInput | AppOrganizationUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
  }

  export type MenuPermissionUpdateManyWithoutAppNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput> | MenuPermissionCreateWithoutAppInput[] | MenuPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppInput | MenuPermissionCreateOrConnectWithoutAppInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutAppInput | MenuPermissionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: MenuPermissionCreateManyAppInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutAppInput | MenuPermissionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutAppInput | MenuPermissionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type ActionPermissionUpdateManyWithoutAppNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput> | ActionPermissionCreateWithoutAppInput[] | ActionPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppInput | ActionPermissionCreateOrConnectWithoutAppInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutAppInput | ActionPermissionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: ActionPermissionCreateManyAppInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutAppInput | ActionPermissionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutAppInput | ActionPermissionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type AppMenuItemUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput> | AppMenuItemCreateWithoutAppInput[] | AppMenuItemUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutAppInput | AppMenuItemCreateOrConnectWithoutAppInput[]
    upsert?: AppMenuItemUpsertWithWhereUniqueWithoutAppInput | AppMenuItemUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppMenuItemCreateManyAppInputEnvelope
    set?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    disconnect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    delete?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    connect?: AppMenuItemWhereUniqueInput | AppMenuItemWhereUniqueInput[]
    update?: AppMenuItemUpdateWithWhereUniqueWithoutAppInput | AppMenuItemUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppMenuItemUpdateManyWithWhereWithoutAppInput | AppMenuItemUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppMenuItemScalarWhereInput | AppMenuItemScalarWhereInput[]
  }

  export type AppActionUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput> | AppActionCreateWithoutAppInput[] | AppActionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppActionCreateOrConnectWithoutAppInput | AppActionCreateOrConnectWithoutAppInput[]
    upsert?: AppActionUpsertWithWhereUniqueWithoutAppInput | AppActionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppActionCreateManyAppInputEnvelope
    set?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    disconnect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    delete?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    connect?: AppActionWhereUniqueInput | AppActionWhereUniqueInput[]
    update?: AppActionUpdateWithWhereUniqueWithoutAppInput | AppActionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppActionUpdateManyWithWhereWithoutAppInput | AppActionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppActionScalarWhereInput | AppActionScalarWhereInput[]
  }

  export type AppOrganizationUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput> | AppOrganizationCreateWithoutAppInput[] | AppOrganizationUncheckedCreateWithoutAppInput[]
    connectOrCreate?: AppOrganizationCreateOrConnectWithoutAppInput | AppOrganizationCreateOrConnectWithoutAppInput[]
    upsert?: AppOrganizationUpsertWithWhereUniqueWithoutAppInput | AppOrganizationUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: AppOrganizationCreateManyAppInputEnvelope
    set?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    disconnect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    delete?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    connect?: AppOrganizationWhereUniqueInput | AppOrganizationWhereUniqueInput[]
    update?: AppOrganizationUpdateWithWhereUniqueWithoutAppInput | AppOrganizationUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: AppOrganizationUpdateManyWithWhereWithoutAppInput | AppOrganizationUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
  }

  export type MenuPermissionUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput> | MenuPermissionCreateWithoutAppInput[] | MenuPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppInput | MenuPermissionCreateOrConnectWithoutAppInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutAppInput | MenuPermissionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: MenuPermissionCreateManyAppInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutAppInput | MenuPermissionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutAppInput | MenuPermissionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type ActionPermissionUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput> | ActionPermissionCreateWithoutAppInput[] | ActionPermissionUncheckedCreateWithoutAppInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppInput | ActionPermissionCreateOrConnectWithoutAppInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutAppInput | ActionPermissionUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: ActionPermissionCreateManyAppInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutAppInput | ActionPermissionUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutAppInput | ActionPermissionUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type AppCreateNestedOneWithoutAppOrganizationInput = {
    create?: XOR<AppCreateWithoutAppOrganizationInput, AppUncheckedCreateWithoutAppOrganizationInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppOrganizationInput
    connect?: AppWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutAppOrganizationInput = {
    create?: XOR<OrganizationCreateWithoutAppOrganizationInput, OrganizationUncheckedCreateWithoutAppOrganizationInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAppOrganizationInput
    connect?: OrganizationWhereUniqueInput
  }

  export type AppUpdateOneRequiredWithoutAppOrganizationNestedInput = {
    create?: XOR<AppCreateWithoutAppOrganizationInput, AppUncheckedCreateWithoutAppOrganizationInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppOrganizationInput
    upsert?: AppUpsertWithoutAppOrganizationInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutAppOrganizationInput, AppUpdateWithoutAppOrganizationInput>, AppUncheckedUpdateWithoutAppOrganizationInput>
  }

  export type OrganizationUpdateOneRequiredWithoutAppOrganizationNestedInput = {
    create?: XOR<OrganizationCreateWithoutAppOrganizationInput, OrganizationUncheckedCreateWithoutAppOrganizationInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAppOrganizationInput
    upsert?: OrganizationUpsertWithoutAppOrganizationInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAppOrganizationInput, OrganizationUpdateWithoutAppOrganizationInput>, OrganizationUncheckedUpdateWithoutAppOrganizationInput>
  }

  export type AppCreateNestedOneWithoutAppMenuItemsInput = {
    create?: XOR<AppCreateWithoutAppMenuItemsInput, AppUncheckedCreateWithoutAppMenuItemsInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppMenuItemsInput
    connect?: AppWhereUniqueInput
  }

  export type MenuPermissionCreateNestedManyWithoutAppMenuItemInput = {
    create?: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput> | MenuPermissionCreateWithoutAppMenuItemInput[] | MenuPermissionUncheckedCreateWithoutAppMenuItemInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppMenuItemInput | MenuPermissionCreateOrConnectWithoutAppMenuItemInput[]
    createMany?: MenuPermissionCreateManyAppMenuItemInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type MenuPermissionUncheckedCreateNestedManyWithoutAppMenuItemInput = {
    create?: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput> | MenuPermissionCreateWithoutAppMenuItemInput[] | MenuPermissionUncheckedCreateWithoutAppMenuItemInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppMenuItemInput | MenuPermissionCreateOrConnectWithoutAppMenuItemInput[]
    createMany?: MenuPermissionCreateManyAppMenuItemInputEnvelope
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
  }

  export type AppUpdateOneRequiredWithoutAppMenuItemsNestedInput = {
    create?: XOR<AppCreateWithoutAppMenuItemsInput, AppUncheckedCreateWithoutAppMenuItemsInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppMenuItemsInput
    upsert?: AppUpsertWithoutAppMenuItemsInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutAppMenuItemsInput, AppUpdateWithoutAppMenuItemsInput>, AppUncheckedUpdateWithoutAppMenuItemsInput>
  }

  export type MenuPermissionUpdateManyWithoutAppMenuItemNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput> | MenuPermissionCreateWithoutAppMenuItemInput[] | MenuPermissionUncheckedCreateWithoutAppMenuItemInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppMenuItemInput | MenuPermissionCreateOrConnectWithoutAppMenuItemInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutAppMenuItemInput | MenuPermissionUpsertWithWhereUniqueWithoutAppMenuItemInput[]
    createMany?: MenuPermissionCreateManyAppMenuItemInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutAppMenuItemInput | MenuPermissionUpdateWithWhereUniqueWithoutAppMenuItemInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutAppMenuItemInput | MenuPermissionUpdateManyWithWhereWithoutAppMenuItemInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type MenuPermissionUncheckedUpdateManyWithoutAppMenuItemNestedInput = {
    create?: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput> | MenuPermissionCreateWithoutAppMenuItemInput[] | MenuPermissionUncheckedCreateWithoutAppMenuItemInput[]
    connectOrCreate?: MenuPermissionCreateOrConnectWithoutAppMenuItemInput | MenuPermissionCreateOrConnectWithoutAppMenuItemInput[]
    upsert?: MenuPermissionUpsertWithWhereUniqueWithoutAppMenuItemInput | MenuPermissionUpsertWithWhereUniqueWithoutAppMenuItemInput[]
    createMany?: MenuPermissionCreateManyAppMenuItemInputEnvelope
    set?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    disconnect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    delete?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    connect?: MenuPermissionWhereUniqueInput | MenuPermissionWhereUniqueInput[]
    update?: MenuPermissionUpdateWithWhereUniqueWithoutAppMenuItemInput | MenuPermissionUpdateWithWhereUniqueWithoutAppMenuItemInput[]
    updateMany?: MenuPermissionUpdateManyWithWhereWithoutAppMenuItemInput | MenuPermissionUpdateManyWithWhereWithoutAppMenuItemInput[]
    deleteMany?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
  }

  export type AppCreateNestedOneWithoutAppActionsInput = {
    create?: XOR<AppCreateWithoutAppActionsInput, AppUncheckedCreateWithoutAppActionsInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppActionsInput
    connect?: AppWhereUniqueInput
  }

  export type ActionPermissionCreateNestedManyWithoutAppActionInput = {
    create?: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput> | ActionPermissionCreateWithoutAppActionInput[] | ActionPermissionUncheckedCreateWithoutAppActionInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppActionInput | ActionPermissionCreateOrConnectWithoutAppActionInput[]
    createMany?: ActionPermissionCreateManyAppActionInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type ActionPermissionUncheckedCreateNestedManyWithoutAppActionInput = {
    create?: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput> | ActionPermissionCreateWithoutAppActionInput[] | ActionPermissionUncheckedCreateWithoutAppActionInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppActionInput | ActionPermissionCreateOrConnectWithoutAppActionInput[]
    createMany?: ActionPermissionCreateManyAppActionInputEnvelope
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
  }

  export type EnumAppActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.AppActionType
  }

  export type AppUpdateOneRequiredWithoutAppActionsNestedInput = {
    create?: XOR<AppCreateWithoutAppActionsInput, AppUncheckedCreateWithoutAppActionsInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppActionsInput
    upsert?: AppUpsertWithoutAppActionsInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutAppActionsInput, AppUpdateWithoutAppActionsInput>, AppUncheckedUpdateWithoutAppActionsInput>
  }

  export type ActionPermissionUpdateManyWithoutAppActionNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput> | ActionPermissionCreateWithoutAppActionInput[] | ActionPermissionUncheckedCreateWithoutAppActionInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppActionInput | ActionPermissionCreateOrConnectWithoutAppActionInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutAppActionInput | ActionPermissionUpsertWithWhereUniqueWithoutAppActionInput[]
    createMany?: ActionPermissionCreateManyAppActionInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutAppActionInput | ActionPermissionUpdateWithWhereUniqueWithoutAppActionInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutAppActionInput | ActionPermissionUpdateManyWithWhereWithoutAppActionInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type ActionPermissionUncheckedUpdateManyWithoutAppActionNestedInput = {
    create?: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput> | ActionPermissionCreateWithoutAppActionInput[] | ActionPermissionUncheckedCreateWithoutAppActionInput[]
    connectOrCreate?: ActionPermissionCreateOrConnectWithoutAppActionInput | ActionPermissionCreateOrConnectWithoutAppActionInput[]
    upsert?: ActionPermissionUpsertWithWhereUniqueWithoutAppActionInput | ActionPermissionUpsertWithWhereUniqueWithoutAppActionInput[]
    createMany?: ActionPermissionCreateManyAppActionInputEnvelope
    set?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    disconnect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    delete?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    connect?: ActionPermissionWhereUniqueInput | ActionPermissionWhereUniqueInput[]
    update?: ActionPermissionUpdateWithWhereUniqueWithoutAppActionInput | ActionPermissionUpdateWithWhereUniqueWithoutAppActionInput[]
    updateMany?: ActionPermissionUpdateManyWithWhereWithoutAppActionInput | ActionPermissionUpdateManyWithWhereWithoutAppActionInput[]
    deleteMany?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutMenuPermissionInput = {
    create?: XOR<RoleCreateWithoutMenuPermissionInput, RoleUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutMenuPermissionInput
    connect?: RoleWhereUniqueInput
  }

  export type AppCreateNestedOneWithoutMenuPermissionInput = {
    create?: XOR<AppCreateWithoutMenuPermissionInput, AppUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: AppCreateOrConnectWithoutMenuPermissionInput
    connect?: AppWhereUniqueInput
  }

  export type AppMenuItemCreateNestedOneWithoutMenuPermissionInput = {
    create?: XOR<AppMenuItemCreateWithoutMenuPermissionInput, AppMenuItemUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutMenuPermissionInput
    connect?: AppMenuItemWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutMenuPermissionNestedInput = {
    create?: XOR<RoleCreateWithoutMenuPermissionInput, RoleUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutMenuPermissionInput
    upsert?: RoleUpsertWithoutMenuPermissionInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutMenuPermissionInput, RoleUpdateWithoutMenuPermissionInput>, RoleUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type AppUpdateOneRequiredWithoutMenuPermissionNestedInput = {
    create?: XOR<AppCreateWithoutMenuPermissionInput, AppUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: AppCreateOrConnectWithoutMenuPermissionInput
    upsert?: AppUpsertWithoutMenuPermissionInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutMenuPermissionInput, AppUpdateWithoutMenuPermissionInput>, AppUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type AppMenuItemUpdateOneRequiredWithoutMenuPermissionNestedInput = {
    create?: XOR<AppMenuItemCreateWithoutMenuPermissionInput, AppMenuItemUncheckedCreateWithoutMenuPermissionInput>
    connectOrCreate?: AppMenuItemCreateOrConnectWithoutMenuPermissionInput
    upsert?: AppMenuItemUpsertWithoutMenuPermissionInput
    connect?: AppMenuItemWhereUniqueInput
    update?: XOR<XOR<AppMenuItemUpdateToOneWithWhereWithoutMenuPermissionInput, AppMenuItemUpdateWithoutMenuPermissionInput>, AppMenuItemUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type RoleCreateNestedOneWithoutActionPermissionInput = {
    create?: XOR<RoleCreateWithoutActionPermissionInput, RoleUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutActionPermissionInput
    connect?: RoleWhereUniqueInput
  }

  export type AppCreateNestedOneWithoutActionPermissionInput = {
    create?: XOR<AppCreateWithoutActionPermissionInput, AppUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: AppCreateOrConnectWithoutActionPermissionInput
    connect?: AppWhereUniqueInput
  }

  export type AppActionCreateNestedOneWithoutActionPermissionInput = {
    create?: XOR<AppActionCreateWithoutActionPermissionInput, AppActionUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: AppActionCreateOrConnectWithoutActionPermissionInput
    connect?: AppActionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutActionPermissionNestedInput = {
    create?: XOR<RoleCreateWithoutActionPermissionInput, RoleUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: RoleCreateOrConnectWithoutActionPermissionInput
    upsert?: RoleUpsertWithoutActionPermissionInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutActionPermissionInput, RoleUpdateWithoutActionPermissionInput>, RoleUncheckedUpdateWithoutActionPermissionInput>
  }

  export type AppUpdateOneRequiredWithoutActionPermissionNestedInput = {
    create?: XOR<AppCreateWithoutActionPermissionInput, AppUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: AppCreateOrConnectWithoutActionPermissionInput
    upsert?: AppUpsertWithoutActionPermissionInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutActionPermissionInput, AppUpdateWithoutActionPermissionInput>, AppUncheckedUpdateWithoutActionPermissionInput>
  }

  export type AppActionUpdateOneRequiredWithoutActionPermissionNestedInput = {
    create?: XOR<AppActionCreateWithoutActionPermissionInput, AppActionUncheckedCreateWithoutActionPermissionInput>
    connectOrCreate?: AppActionCreateOrConnectWithoutActionPermissionInput
    upsert?: AppActionUpsertWithoutActionPermissionInput
    connect?: AppActionWhereUniqueInput
    update?: XOR<XOR<AppActionUpdateToOneWithWhereWithoutActionPermissionInput, AppActionUpdateWithoutActionPermissionInput>, AppActionUncheckedUpdateWithoutActionPermissionInput>
  }

  export type OrganizationCreateNestedOneWithoutRbacInput = {
    create?: XOR<OrganizationCreateWithoutRbacInput, OrganizationUncheckedCreateWithoutRbacInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRbacInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRbacInput = {
    create?: XOR<UserCreateWithoutRbacInput, UserUncheckedCreateWithoutRbacInput>
    connectOrCreate?: UserCreateOrConnectWithoutRbacInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutRbacInput = {
    create?: XOR<RoleCreateWithoutRbacInput, RoleUncheckedCreateWithoutRbacInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRbacInput
    connect?: RoleWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutRbacNestedInput = {
    create?: XOR<OrganizationCreateWithoutRbacInput, OrganizationUncheckedCreateWithoutRbacInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutRbacInput
    upsert?: OrganizationUpsertWithoutRbacInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutRbacInput, OrganizationUpdateWithoutRbacInput>, OrganizationUncheckedUpdateWithoutRbacInput>
  }

  export type UserUpdateOneRequiredWithoutRbacNestedInput = {
    create?: XOR<UserCreateWithoutRbacInput, UserUncheckedCreateWithoutRbacInput>
    connectOrCreate?: UserCreateOrConnectWithoutRbacInput
    upsert?: UserUpsertWithoutRbacInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRbacInput, UserUpdateWithoutRbacInput>, UserUncheckedUpdateWithoutRbacInput>
  }

  export type RoleUpdateOneRequiredWithoutRbacNestedInput = {
    create?: XOR<RoleCreateWithoutRbacInput, RoleUncheckedCreateWithoutRbacInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRbacInput
    upsert?: RoleUpsertWithoutRbacInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutRbacInput, RoleUpdateWithoutRbacInput>, RoleUncheckedUpdateWithoutRbacInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAppTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppType | EnumAppTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppTypeFilter<$PrismaModel> | $Enums.AppType
  }

  export type NestedEnumAppTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppType | EnumAppTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppType[] | ListEnumAppTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppTypeFilter<$PrismaModel>
    _max?: NestedEnumAppTypeFilter<$PrismaModel>
  }

  export type NestedEnumAppActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppActionType | EnumAppActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppActionTypeFilter<$PrismaModel> | $Enums.AppActionType
  }

  export type NestedEnumAppActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppActionType | EnumAppActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppActionType[] | ListEnumAppActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppActionTypeFilter<$PrismaModel>
    _max?: NestedEnumAppActionTypeFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TwoFactorCreateWithoutUserInput = {
    id: string
    secret: string
    backupCodes: string
  }

  export type TwoFactorUncheckedCreateWithoutUserInput = {
    id: string
    secret: string
    backupCodes: string
  }

  export type TwoFactorCreateOrConnectWithoutUserInput = {
    where: TwoFactorWhereUniqueInput
    create: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput>
  }

  export type TwoFactorCreateManyUserInputEnvelope = {
    data: TwoFactorCreateManyUserInput | TwoFactorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MemberCreateWithoutUserInput = {
    id: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutMembersInput
  }

  export type MemberUncheckedCreateWithoutUserInput = {
    id: string
    organizationId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberCreateOrConnectWithoutUserInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberCreateManyUserInputEnvelope = {
    data: MemberCreateManyUserInput | MemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutUserInput = {
    id: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    organization: OrganizationCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutUserInput = {
    id: string
    organizationId: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
  }

  export type InvitationCreateOrConnectWithoutUserInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
  }

  export type InvitationCreateManyUserInputEnvelope = {
    data: InvitationCreateManyUserInput | InvitationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RBACCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutRbacInput
    role: RoleCreateNestedOneWithoutRbacInput
  }

  export type RBACUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACCreateOrConnectWithoutUserInput = {
    where: RBACWhereUniqueInput
    create: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput>
  }

  export type RBACCreateManyUserInputEnvelope = {
    data: RBACCreateManyUserInput | RBACCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OauthApplicationCreateWithoutUserInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutOauthapplicationInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationUncheckedCreateWithoutUserInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutOauthapplicationInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationCreateOrConnectWithoutUserInput = {
    where: OauthApplicationWhereUniqueInput
    create: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput>
  }

  export type OauthApplicationCreateManyUserInputEnvelope = {
    data: OauthApplicationCreateManyUserInput | OauthApplicationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OauthAccessTokenCreateWithoutUserInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthapplication?: OauthApplicationCreateNestedOneWithoutOauthaccesstokensInput
  }

  export type OauthAccessTokenUncheckedCreateWithoutUserInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    clientId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthAccessTokenCreateOrConnectWithoutUserInput = {
    where: OauthAccessTokenWhereUniqueInput
    create: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput>
  }

  export type OauthAccessTokenCreateManyUserInputEnvelope = {
    data: OauthAccessTokenCreateManyUserInput | OauthAccessTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OauthConsentCreateWithoutUserInput = {
    id: string
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
    oauthapplication?: OauthApplicationCreateNestedOneWithoutOauthconsentsInput
  }

  export type OauthConsentUncheckedCreateWithoutUserInput = {
    id: string
    clientId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type OauthConsentCreateOrConnectWithoutUserInput = {
    where: OauthConsentWhereUniqueInput
    create: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput>
  }

  export type OauthConsentCreateManyUserInputEnvelope = {
    data: OauthConsentCreateManyUserInput | OauthConsentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    activeOrganizationId?: StringNullableFilter<"Session"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type TwoFactorUpsertWithWhereUniqueWithoutUserInput = {
    where: TwoFactorWhereUniqueInput
    update: XOR<TwoFactorUpdateWithoutUserInput, TwoFactorUncheckedUpdateWithoutUserInput>
    create: XOR<TwoFactorCreateWithoutUserInput, TwoFactorUncheckedCreateWithoutUserInput>
  }

  export type TwoFactorUpdateWithWhereUniqueWithoutUserInput = {
    where: TwoFactorWhereUniqueInput
    data: XOR<TwoFactorUpdateWithoutUserInput, TwoFactorUncheckedUpdateWithoutUserInput>
  }

  export type TwoFactorUpdateManyWithWhereWithoutUserInput = {
    where: TwoFactorScalarWhereInput
    data: XOR<TwoFactorUpdateManyMutationInput, TwoFactorUncheckedUpdateManyWithoutUserInput>
  }

  export type TwoFactorScalarWhereInput = {
    AND?: TwoFactorScalarWhereInput | TwoFactorScalarWhereInput[]
    OR?: TwoFactorScalarWhereInput[]
    NOT?: TwoFactorScalarWhereInput | TwoFactorScalarWhereInput[]
    id?: StringFilter<"TwoFactor"> | string
    secret?: StringFilter<"TwoFactor"> | string
    backupCodes?: StringFilter<"TwoFactor"> | string
    userId?: StringFilter<"TwoFactor"> | string
  }

  export type MemberUpsertWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
  }

  export type MemberUpdateManyWithWhereWithoutUserInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUserInput>
  }

  export type MemberScalarWhereInput = {
    AND?: MemberScalarWhereInput | MemberScalarWhereInput[]
    OR?: MemberScalarWhereInput[]
    NOT?: MemberScalarWhereInput | MemberScalarWhereInput[]
    id?: StringFilter<"Member"> | string
    organizationId?: StringFilter<"Member"> | string
    userId?: StringFilter<"Member"> | string
    role?: StringFilter<"Member"> | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
  }

  export type InvitationUpsertWithWhereUniqueWithoutUserInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
    create: XOR<InvitationCreateWithoutUserInput, InvitationUncheckedCreateWithoutUserInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutUserInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutUserInput, InvitationUncheckedUpdateWithoutUserInput>
  }

  export type InvitationUpdateManyWithWhereWithoutUserInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutUserInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    OR?: InvitationScalarWhereInput[]
    NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    id?: StringFilter<"Invitation"> | string
    organizationId?: StringFilter<"Invitation"> | string
    email?: StringFilter<"Invitation"> | string
    role?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    inviterId?: StringFilter<"Invitation"> | string
  }

  export type RBACUpsertWithWhereUniqueWithoutUserInput = {
    where: RBACWhereUniqueInput
    update: XOR<RBACUpdateWithoutUserInput, RBACUncheckedUpdateWithoutUserInput>
    create: XOR<RBACCreateWithoutUserInput, RBACUncheckedCreateWithoutUserInput>
  }

  export type RBACUpdateWithWhereUniqueWithoutUserInput = {
    where: RBACWhereUniqueInput
    data: XOR<RBACUpdateWithoutUserInput, RBACUncheckedUpdateWithoutUserInput>
  }

  export type RBACUpdateManyWithWhereWithoutUserInput = {
    where: RBACScalarWhereInput
    data: XOR<RBACUpdateManyMutationInput, RBACUncheckedUpdateManyWithoutUserInput>
  }

  export type RBACScalarWhereInput = {
    AND?: RBACScalarWhereInput | RBACScalarWhereInput[]
    OR?: RBACScalarWhereInput[]
    NOT?: RBACScalarWhereInput | RBACScalarWhereInput[]
    id?: StringFilter<"RBAC"> | string
    organizationId?: StringFilter<"RBAC"> | string
    userId?: StringFilter<"RBAC"> | string
    roleId?: StringFilter<"RBAC"> | string
    createdAt?: DateTimeFilter<"RBAC"> | Date | string
    updatedAt?: DateTimeFilter<"RBAC"> | Date | string
  }

  export type OauthApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: OauthApplicationWhereUniqueInput
    update: XOR<OauthApplicationUpdateWithoutUserInput, OauthApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<OauthApplicationCreateWithoutUserInput, OauthApplicationUncheckedCreateWithoutUserInput>
  }

  export type OauthApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: OauthApplicationWhereUniqueInput
    data: XOR<OauthApplicationUpdateWithoutUserInput, OauthApplicationUncheckedUpdateWithoutUserInput>
  }

  export type OauthApplicationUpdateManyWithWhereWithoutUserInput = {
    where: OauthApplicationScalarWhereInput
    data: XOR<OauthApplicationUpdateManyMutationInput, OauthApplicationUncheckedUpdateManyWithoutUserInput>
  }

  export type OauthApplicationScalarWhereInput = {
    AND?: OauthApplicationScalarWhereInput | OauthApplicationScalarWhereInput[]
    OR?: OauthApplicationScalarWhereInput[]
    NOT?: OauthApplicationScalarWhereInput | OauthApplicationScalarWhereInput[]
    id?: StringFilter<"OauthApplication"> | string
    name?: StringNullableFilter<"OauthApplication"> | string | null
    icon?: StringNullableFilter<"OauthApplication"> | string | null
    metadata?: StringNullableFilter<"OauthApplication"> | string | null
    clientId?: StringNullableFilter<"OauthApplication"> | string | null
    clientSecret?: StringNullableFilter<"OauthApplication"> | string | null
    redirectURLs?: StringNullableFilter<"OauthApplication"> | string | null
    type?: StringNullableFilter<"OauthApplication"> | string | null
    disabled?: BoolNullableFilter<"OauthApplication"> | boolean | null
    userId?: StringNullableFilter<"OauthApplication"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthApplication"> | Date | string | null
  }

  export type OauthAccessTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: OauthAccessTokenWhereUniqueInput
    update: XOR<OauthAccessTokenUpdateWithoutUserInput, OauthAccessTokenUncheckedUpdateWithoutUserInput>
    create: XOR<OauthAccessTokenCreateWithoutUserInput, OauthAccessTokenUncheckedCreateWithoutUserInput>
  }

  export type OauthAccessTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: OauthAccessTokenWhereUniqueInput
    data: XOR<OauthAccessTokenUpdateWithoutUserInput, OauthAccessTokenUncheckedUpdateWithoutUserInput>
  }

  export type OauthAccessTokenUpdateManyWithWhereWithoutUserInput = {
    where: OauthAccessTokenScalarWhereInput
    data: XOR<OauthAccessTokenUpdateManyMutationInput, OauthAccessTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type OauthAccessTokenScalarWhereInput = {
    AND?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
    OR?: OauthAccessTokenScalarWhereInput[]
    NOT?: OauthAccessTokenScalarWhereInput | OauthAccessTokenScalarWhereInput[]
    id?: StringFilter<"OauthAccessToken"> | string
    accessToken?: StringNullableFilter<"OauthAccessToken"> | string | null
    refreshToken?: StringNullableFilter<"OauthAccessToken"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    clientId?: StringNullableFilter<"OauthAccessToken"> | string | null
    userId?: StringNullableFilter<"OauthAccessToken"> | string | null
    scopes?: StringNullableFilter<"OauthAccessToken"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthAccessToken"> | Date | string | null
  }

  export type OauthConsentUpsertWithWhereUniqueWithoutUserInput = {
    where: OauthConsentWhereUniqueInput
    update: XOR<OauthConsentUpdateWithoutUserInput, OauthConsentUncheckedUpdateWithoutUserInput>
    create: XOR<OauthConsentCreateWithoutUserInput, OauthConsentUncheckedCreateWithoutUserInput>
  }

  export type OauthConsentUpdateWithWhereUniqueWithoutUserInput = {
    where: OauthConsentWhereUniqueInput
    data: XOR<OauthConsentUpdateWithoutUserInput, OauthConsentUncheckedUpdateWithoutUserInput>
  }

  export type OauthConsentUpdateManyWithWhereWithoutUserInput = {
    where: OauthConsentScalarWhereInput
    data: XOR<OauthConsentUpdateManyMutationInput, OauthConsentUncheckedUpdateManyWithoutUserInput>
  }

  export type OauthConsentScalarWhereInput = {
    AND?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
    OR?: OauthConsentScalarWhereInput[]
    NOT?: OauthConsentScalarWhereInput | OauthConsentScalarWhereInput[]
    id?: StringFilter<"OauthConsent"> | string
    clientId?: StringNullableFilter<"OauthConsent"> | string | null
    userId?: StringNullableFilter<"OauthConsent"> | string | null
    scopes?: StringNullableFilter<"OauthConsent"> | string | null
    createdAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"OauthConsent"> | Date | string | null
    consentGiven?: BoolNullableFilter<"OauthConsent"> | boolean | null
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTwofactorsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTwofactorsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTwofactorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTwofactorsInput, UserUncheckedCreateWithoutTwofactorsInput>
  }

  export type UserUpsertWithoutTwofactorsInput = {
    update: XOR<UserUpdateWithoutTwofactorsInput, UserUncheckedUpdateWithoutTwofactorsInput>
    create: XOR<UserCreateWithoutTwofactorsInput, UserUncheckedCreateWithoutTwofactorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTwofactorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTwofactorsInput, UserUncheckedUpdateWithoutTwofactorsInput>
  }

  export type UserUpdateWithoutTwofactorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTwofactorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemberCreateWithoutOrganizationInput = {
    id: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMembersInput
  }

  export type MemberUncheckedCreateWithoutOrganizationInput = {
    id: string
    userId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberCreateOrConnectWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
  }

  export type MemberCreateManyOrganizationInputEnvelope = {
    data: MemberCreateManyOrganizationInput | MemberCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutOrganizationInput = {
    id: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutOrganizationInput = {
    id: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type InvitationCreateOrConnectWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationCreateManyOrganizationInputEnvelope = {
    data: InvitationCreateManyOrganizationInput | InvitationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AppOrganizationCreateWithoutOrganizationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppOrganizationInput
  }

  export type AppOrganizationUncheckedCreateWithoutOrganizationInput = {
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppOrganizationCreateOrConnectWithoutOrganizationInput = {
    where: AppOrganizationWhereUniqueInput
    create: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput>
  }

  export type AppOrganizationCreateManyOrganizationInputEnvelope = {
    data: AppOrganizationCreateManyOrganizationInput | AppOrganizationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type RBACCreateWithoutOrganizationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRbacInput
    role: RoleCreateNestedOneWithoutRbacInput
  }

  export type RBACUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACCreateOrConnectWithoutOrganizationInput = {
    where: RBACWhereUniqueInput
    create: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput>
  }

  export type RBACCreateManyOrganizationInputEnvelope = {
    data: RBACCreateManyOrganizationInput | RBACCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
    create: XOR<MemberCreateWithoutOrganizationInput, MemberUncheckedCreateWithoutOrganizationInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutOrganizationInput, MemberUncheckedUpdateWithoutOrganizationInput>
  }

  export type MemberUpdateManyWithWhereWithoutOrganizationInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type InvitationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<InvitationCreateWithoutOrganizationInput, InvitationUncheckedCreateWithoutOrganizationInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutOrganizationInput, InvitationUncheckedUpdateWithoutOrganizationInput>
  }

  export type InvitationUpdateManyWithWhereWithoutOrganizationInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AppOrganizationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AppOrganizationWhereUniqueInput
    update: XOR<AppOrganizationUpdateWithoutOrganizationInput, AppOrganizationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AppOrganizationCreateWithoutOrganizationInput, AppOrganizationUncheckedCreateWithoutOrganizationInput>
  }

  export type AppOrganizationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AppOrganizationWhereUniqueInput
    data: XOR<AppOrganizationUpdateWithoutOrganizationInput, AppOrganizationUncheckedUpdateWithoutOrganizationInput>
  }

  export type AppOrganizationUpdateManyWithWhereWithoutOrganizationInput = {
    where: AppOrganizationScalarWhereInput
    data: XOR<AppOrganizationUpdateManyMutationInput, AppOrganizationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AppOrganizationScalarWhereInput = {
    AND?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
    OR?: AppOrganizationScalarWhereInput[]
    NOT?: AppOrganizationScalarWhereInput | AppOrganizationScalarWhereInput[]
    appId?: StringFilter<"AppOrganization"> | string
    organizationId?: StringFilter<"AppOrganization"> | string
    createdAt?: DateTimeFilter<"AppOrganization"> | Date | string
    updatedAt?: DateTimeFilter<"AppOrganization"> | Date | string
  }

  export type RBACUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: RBACWhereUniqueInput
    update: XOR<RBACUpdateWithoutOrganizationInput, RBACUncheckedUpdateWithoutOrganizationInput>
    create: XOR<RBACCreateWithoutOrganizationInput, RBACUncheckedCreateWithoutOrganizationInput>
  }

  export type RBACUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: RBACWhereUniqueInput
    data: XOR<RBACUpdateWithoutOrganizationInput, RBACUncheckedUpdateWithoutOrganizationInput>
  }

  export type RBACUpdateManyWithWhereWithoutOrganizationInput = {
    where: RBACScalarWhereInput
    data: XOR<RBACUpdateManyMutationInput, RBACUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationCreateWithoutMembersInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutOrganizationInput
    rbac?: RBACCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembersInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    rbac?: RBACUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutMembersInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMembersInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
  }

  export type OrganizationUpsertWithoutMembersInput = {
    update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMembersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutMembersInput = {
    update: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
    create: XOR<UserCreateWithoutMembersInput, UserUncheckedCreateWithoutMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMembersInput, UserUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutInvitationsInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutOrganizationInput
    rbac?: RBACCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvitationsInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    rbac?: RBACUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvitationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
  }

  export type UserCreateWithoutInvitationsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitationsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
  }

  export type OrganizationUpsertWithoutInvitationsInput = {
    update: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
    create: XOR<OrganizationCreateWithoutInvitationsInput, OrganizationUncheckedCreateWithoutInvitationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvitationsInput, OrganizationUncheckedUpdateWithoutInvitationsInput>
  }

  export type OrganizationUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutInvitationsInput = {
    update: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOauthapplicationsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOauthapplicationsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOauthapplicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauthapplicationsInput, UserUncheckedCreateWithoutOauthapplicationsInput>
  }

  export type OauthAccessTokenCreateWithoutOauthapplicationInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutOauthaccesstokensInput
  }

  export type OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthAccessTokenCreateOrConnectWithoutOauthapplicationInput = {
    where: OauthAccessTokenWhereUniqueInput
    create: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput>
  }

  export type OauthAccessTokenCreateManyOauthapplicationInputEnvelope = {
    data: OauthAccessTokenCreateManyOauthapplicationInput | OauthAccessTokenCreateManyOauthapplicationInput[]
    skipDuplicates?: boolean
  }

  export type OauthConsentCreateWithoutOauthapplicationInput = {
    id: string
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
    user?: UserCreateNestedOneWithoutOauthconsentsInput
  }

  export type OauthConsentUncheckedCreateWithoutOauthapplicationInput = {
    id: string
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type OauthConsentCreateOrConnectWithoutOauthapplicationInput = {
    where: OauthConsentWhereUniqueInput
    create: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput>
  }

  export type OauthConsentCreateManyOauthapplicationInputEnvelope = {
    data: OauthConsentCreateManyOauthapplicationInput | OauthConsentCreateManyOauthapplicationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOauthapplicationsInput = {
    update: XOR<UserUpdateWithoutOauthapplicationsInput, UserUncheckedUpdateWithoutOauthapplicationsInput>
    create: XOR<UserCreateWithoutOauthapplicationsInput, UserUncheckedCreateWithoutOauthapplicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauthapplicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauthapplicationsInput, UserUncheckedUpdateWithoutOauthapplicationsInput>
  }

  export type UserUpdateWithoutOauthapplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOauthapplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OauthAccessTokenUpsertWithWhereUniqueWithoutOauthapplicationInput = {
    where: OauthAccessTokenWhereUniqueInput
    update: XOR<OauthAccessTokenUpdateWithoutOauthapplicationInput, OauthAccessTokenUncheckedUpdateWithoutOauthapplicationInput>
    create: XOR<OauthAccessTokenCreateWithoutOauthapplicationInput, OauthAccessTokenUncheckedCreateWithoutOauthapplicationInput>
  }

  export type OauthAccessTokenUpdateWithWhereUniqueWithoutOauthapplicationInput = {
    where: OauthAccessTokenWhereUniqueInput
    data: XOR<OauthAccessTokenUpdateWithoutOauthapplicationInput, OauthAccessTokenUncheckedUpdateWithoutOauthapplicationInput>
  }

  export type OauthAccessTokenUpdateManyWithWhereWithoutOauthapplicationInput = {
    where: OauthAccessTokenScalarWhereInput
    data: XOR<OauthAccessTokenUpdateManyMutationInput, OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationInput>
  }

  export type OauthConsentUpsertWithWhereUniqueWithoutOauthapplicationInput = {
    where: OauthConsentWhereUniqueInput
    update: XOR<OauthConsentUpdateWithoutOauthapplicationInput, OauthConsentUncheckedUpdateWithoutOauthapplicationInput>
    create: XOR<OauthConsentCreateWithoutOauthapplicationInput, OauthConsentUncheckedCreateWithoutOauthapplicationInput>
  }

  export type OauthConsentUpdateWithWhereUniqueWithoutOauthapplicationInput = {
    where: OauthConsentWhereUniqueInput
    data: XOR<OauthConsentUpdateWithoutOauthapplicationInput, OauthConsentUncheckedUpdateWithoutOauthapplicationInput>
  }

  export type OauthConsentUpdateManyWithWhereWithoutOauthapplicationInput = {
    where: OauthConsentScalarWhereInput
    data: XOR<OauthConsentUpdateManyMutationInput, OauthConsentUncheckedUpdateManyWithoutOauthapplicationInput>
  }

  export type OauthApplicationCreateWithoutOauthaccesstokensInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutOauthapplicationsInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationUncheckedCreateWithoutOauthaccesstokensInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    userId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationCreateOrConnectWithoutOauthaccesstokensInput = {
    where: OauthApplicationWhereUniqueInput
    create: XOR<OauthApplicationCreateWithoutOauthaccesstokensInput, OauthApplicationUncheckedCreateWithoutOauthaccesstokensInput>
  }

  export type UserCreateWithoutOauthaccesstokensInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOauthaccesstokensInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOauthaccesstokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauthaccesstokensInput, UserUncheckedCreateWithoutOauthaccesstokensInput>
  }

  export type OauthApplicationUpsertWithoutOauthaccesstokensInput = {
    update: XOR<OauthApplicationUpdateWithoutOauthaccesstokensInput, OauthApplicationUncheckedUpdateWithoutOauthaccesstokensInput>
    create: XOR<OauthApplicationCreateWithoutOauthaccesstokensInput, OauthApplicationUncheckedCreateWithoutOauthaccesstokensInput>
    where?: OauthApplicationWhereInput
  }

  export type OauthApplicationUpdateToOneWithWhereWithoutOauthaccesstokensInput = {
    where?: OauthApplicationWhereInput
    data: XOR<OauthApplicationUpdateWithoutOauthaccesstokensInput, OauthApplicationUncheckedUpdateWithoutOauthaccesstokensInput>
  }

  export type OauthApplicationUpdateWithoutOauthaccesstokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutOauthapplicationsNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationUncheckedUpdateWithoutOauthaccesstokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutOauthapplicationNestedInput
  }

  export type UserUpsertWithoutOauthaccesstokensInput = {
    update: XOR<UserUpdateWithoutOauthaccesstokensInput, UserUncheckedUpdateWithoutOauthaccesstokensInput>
    create: XOR<UserCreateWithoutOauthaccesstokensInput, UserUncheckedCreateWithoutOauthaccesstokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauthaccesstokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauthaccesstokensInput, UserUncheckedUpdateWithoutOauthaccesstokensInput>
  }

  export type UserUpdateWithoutOauthaccesstokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOauthaccesstokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OauthApplicationCreateWithoutOauthconsentsInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutOauthapplicationsInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationUncheckedCreateWithoutOauthconsentsInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    userId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutOauthapplicationInput
  }

  export type OauthApplicationCreateOrConnectWithoutOauthconsentsInput = {
    where: OauthApplicationWhereUniqueInput
    create: XOR<OauthApplicationCreateWithoutOauthconsentsInput, OauthApplicationUncheckedCreateWithoutOauthconsentsInput>
  }

  export type UserCreateWithoutOauthconsentsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    rbac?: RBACCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOauthconsentsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    rbac?: RBACUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOauthconsentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOauthconsentsInput, UserUncheckedCreateWithoutOauthconsentsInput>
  }

  export type OauthApplicationUpsertWithoutOauthconsentsInput = {
    update: XOR<OauthApplicationUpdateWithoutOauthconsentsInput, OauthApplicationUncheckedUpdateWithoutOauthconsentsInput>
    create: XOR<OauthApplicationCreateWithoutOauthconsentsInput, OauthApplicationUncheckedCreateWithoutOauthconsentsInput>
    where?: OauthApplicationWhereInput
  }

  export type OauthApplicationUpdateToOneWithWhereWithoutOauthconsentsInput = {
    where?: OauthApplicationWhereInput
    data: XOR<OauthApplicationUpdateWithoutOauthconsentsInput, OauthApplicationUncheckedUpdateWithoutOauthconsentsInput>
  }

  export type OauthApplicationUpdateWithoutOauthconsentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutOauthapplicationsNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationUncheckedUpdateWithoutOauthconsentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationNestedInput
  }

  export type UserUpsertWithoutOauthconsentsInput = {
    update: XOR<UserUpdateWithoutOauthconsentsInput, UserUncheckedUpdateWithoutOauthconsentsInput>
    create: XOR<UserCreateWithoutOauthconsentsInput, UserUncheckedCreateWithoutOauthconsentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOauthconsentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOauthconsentsInput, UserUncheckedUpdateWithoutOauthconsentsInput>
  }

  export type UserUpdateWithoutOauthconsentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    rbac?: RBACUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOauthconsentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MenuPermissionCreateWithoutRoleInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutMenuPermissionInput
    appMenuItem: AppMenuItemCreateNestedOneWithoutMenuPermissionInput
  }

  export type MenuPermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    appId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionCreateOrConnectWithoutRoleInput = {
    where: MenuPermissionWhereUniqueInput
    create: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput>
  }

  export type MenuPermissionCreateManyRoleInputEnvelope = {
    data: MenuPermissionCreateManyRoleInput | MenuPermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type ActionPermissionCreateWithoutRoleInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutActionPermissionInput
    appAction: AppActionCreateNestedOneWithoutActionPermissionInput
  }

  export type ActionPermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    appId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionCreateOrConnectWithoutRoleInput = {
    where: ActionPermissionWhereUniqueInput
    create: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput>
  }

  export type ActionPermissionCreateManyRoleInputEnvelope = {
    data: ActionPermissionCreateManyRoleInput | ActionPermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RBACCreateWithoutRoleInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutRbacInput
    user: UserCreateNestedOneWithoutRbacInput
  }

  export type RBACUncheckedCreateWithoutRoleInput = {
    id?: string
    organizationId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACCreateOrConnectWithoutRoleInput = {
    where: RBACWhereUniqueInput
    create: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput>
  }

  export type RBACCreateManyRoleInputEnvelope = {
    data: RBACCreateManyRoleInput | RBACCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type MenuPermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: MenuPermissionWhereUniqueInput
    update: XOR<MenuPermissionUpdateWithoutRoleInput, MenuPermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<MenuPermissionCreateWithoutRoleInput, MenuPermissionUncheckedCreateWithoutRoleInput>
  }

  export type MenuPermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: MenuPermissionWhereUniqueInput
    data: XOR<MenuPermissionUpdateWithoutRoleInput, MenuPermissionUncheckedUpdateWithoutRoleInput>
  }

  export type MenuPermissionUpdateManyWithWhereWithoutRoleInput = {
    where: MenuPermissionScalarWhereInput
    data: XOR<MenuPermissionUpdateManyMutationInput, MenuPermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type MenuPermissionScalarWhereInput = {
    AND?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
    OR?: MenuPermissionScalarWhereInput[]
    NOT?: MenuPermissionScalarWhereInput | MenuPermissionScalarWhereInput[]
    id?: StringFilter<"MenuPermission"> | string
    roleId?: StringFilter<"MenuPermission"> | string
    appId?: StringFilter<"MenuPermission"> | string
    appMenuItemId?: StringFilter<"MenuPermission"> | string
    createdAt?: DateTimeFilter<"MenuPermission"> | Date | string
    updatedAt?: DateTimeFilter<"MenuPermission"> | Date | string
  }

  export type ActionPermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: ActionPermissionWhereUniqueInput
    update: XOR<ActionPermissionUpdateWithoutRoleInput, ActionPermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<ActionPermissionCreateWithoutRoleInput, ActionPermissionUncheckedCreateWithoutRoleInput>
  }

  export type ActionPermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: ActionPermissionWhereUniqueInput
    data: XOR<ActionPermissionUpdateWithoutRoleInput, ActionPermissionUncheckedUpdateWithoutRoleInput>
  }

  export type ActionPermissionUpdateManyWithWhereWithoutRoleInput = {
    where: ActionPermissionScalarWhereInput
    data: XOR<ActionPermissionUpdateManyMutationInput, ActionPermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type ActionPermissionScalarWhereInput = {
    AND?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
    OR?: ActionPermissionScalarWhereInput[]
    NOT?: ActionPermissionScalarWhereInput | ActionPermissionScalarWhereInput[]
    id?: StringFilter<"ActionPermission"> | string
    roleId?: StringFilter<"ActionPermission"> | string
    appId?: StringFilter<"ActionPermission"> | string
    appActionId?: StringFilter<"ActionPermission"> | string
    createdAt?: DateTimeFilter<"ActionPermission"> | Date | string
    updatedAt?: DateTimeFilter<"ActionPermission"> | Date | string
  }

  export type RBACUpsertWithWhereUniqueWithoutRoleInput = {
    where: RBACWhereUniqueInput
    update: XOR<RBACUpdateWithoutRoleInput, RBACUncheckedUpdateWithoutRoleInput>
    create: XOR<RBACCreateWithoutRoleInput, RBACUncheckedCreateWithoutRoleInput>
  }

  export type RBACUpdateWithWhereUniqueWithoutRoleInput = {
    where: RBACWhereUniqueInput
    data: XOR<RBACUpdateWithoutRoleInput, RBACUncheckedUpdateWithoutRoleInput>
  }

  export type RBACUpdateManyWithWhereWithoutRoleInput = {
    where: RBACScalarWhereInput
    data: XOR<RBACUpdateManyMutationInput, RBACUncheckedUpdateManyWithoutRoleInput>
  }

  export type AppMenuItemCreateWithoutAppInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppMenuItemInput
  }

  export type AppMenuItemUncheckedCreateWithoutAppInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppMenuItemInput
  }

  export type AppMenuItemCreateOrConnectWithoutAppInput = {
    where: AppMenuItemWhereUniqueInput
    create: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput>
  }

  export type AppMenuItemCreateManyAppInputEnvelope = {
    data: AppMenuItemCreateManyAppInput | AppMenuItemCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type AppActionCreateWithoutAppInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppActionInput
  }

  export type AppActionUncheckedCreateWithoutAppInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppActionInput
  }

  export type AppActionCreateOrConnectWithoutAppInput = {
    where: AppActionWhereUniqueInput
    create: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput>
  }

  export type AppActionCreateManyAppInputEnvelope = {
    data: AppActionCreateManyAppInput | AppActionCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type AppOrganizationCreateWithoutAppInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAppOrganizationInput
  }

  export type AppOrganizationUncheckedCreateWithoutAppInput = {
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppOrganizationCreateOrConnectWithoutAppInput = {
    where: AppOrganizationWhereUniqueInput
    create: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput>
  }

  export type AppOrganizationCreateManyAppInputEnvelope = {
    data: AppOrganizationCreateManyAppInput | AppOrganizationCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type MenuPermissionCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutMenuPermissionInput
    appMenuItem: AppMenuItemCreateNestedOneWithoutMenuPermissionInput
  }

  export type MenuPermissionUncheckedCreateWithoutAppInput = {
    id?: string
    roleId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionCreateOrConnectWithoutAppInput = {
    where: MenuPermissionWhereUniqueInput
    create: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput>
  }

  export type MenuPermissionCreateManyAppInputEnvelope = {
    data: MenuPermissionCreateManyAppInput | MenuPermissionCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type ActionPermissionCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutActionPermissionInput
    appAction: AppActionCreateNestedOneWithoutActionPermissionInput
  }

  export type ActionPermissionUncheckedCreateWithoutAppInput = {
    id?: string
    roleId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionCreateOrConnectWithoutAppInput = {
    where: ActionPermissionWhereUniqueInput
    create: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput>
  }

  export type ActionPermissionCreateManyAppInputEnvelope = {
    data: ActionPermissionCreateManyAppInput | ActionPermissionCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type AppMenuItemUpsertWithWhereUniqueWithoutAppInput = {
    where: AppMenuItemWhereUniqueInput
    update: XOR<AppMenuItemUpdateWithoutAppInput, AppMenuItemUncheckedUpdateWithoutAppInput>
    create: XOR<AppMenuItemCreateWithoutAppInput, AppMenuItemUncheckedCreateWithoutAppInput>
  }

  export type AppMenuItemUpdateWithWhereUniqueWithoutAppInput = {
    where: AppMenuItemWhereUniqueInput
    data: XOR<AppMenuItemUpdateWithoutAppInput, AppMenuItemUncheckedUpdateWithoutAppInput>
  }

  export type AppMenuItemUpdateManyWithWhereWithoutAppInput = {
    where: AppMenuItemScalarWhereInput
    data: XOR<AppMenuItemUpdateManyMutationInput, AppMenuItemUncheckedUpdateManyWithoutAppInput>
  }

  export type AppMenuItemScalarWhereInput = {
    AND?: AppMenuItemScalarWhereInput | AppMenuItemScalarWhereInput[]
    OR?: AppMenuItemScalarWhereInput[]
    NOT?: AppMenuItemScalarWhereInput | AppMenuItemScalarWhereInput[]
    id?: StringFilter<"AppMenuItem"> | string
    name?: StringFilter<"AppMenuItem"> | string
    description?: StringFilter<"AppMenuItem"> | string
    slug?: StringFilter<"AppMenuItem"> | string
    icon?: StringNullableFilter<"AppMenuItem"> | string | null
    appId?: StringFilter<"AppMenuItem"> | string
    createdAt?: DateTimeFilter<"AppMenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"AppMenuItem"> | Date | string
  }

  export type AppActionUpsertWithWhereUniqueWithoutAppInput = {
    where: AppActionWhereUniqueInput
    update: XOR<AppActionUpdateWithoutAppInput, AppActionUncheckedUpdateWithoutAppInput>
    create: XOR<AppActionCreateWithoutAppInput, AppActionUncheckedCreateWithoutAppInput>
  }

  export type AppActionUpdateWithWhereUniqueWithoutAppInput = {
    where: AppActionWhereUniqueInput
    data: XOR<AppActionUpdateWithoutAppInput, AppActionUncheckedUpdateWithoutAppInput>
  }

  export type AppActionUpdateManyWithWhereWithoutAppInput = {
    where: AppActionScalarWhereInput
    data: XOR<AppActionUpdateManyMutationInput, AppActionUncheckedUpdateManyWithoutAppInput>
  }

  export type AppActionScalarWhereInput = {
    AND?: AppActionScalarWhereInput | AppActionScalarWhereInput[]
    OR?: AppActionScalarWhereInput[]
    NOT?: AppActionScalarWhereInput | AppActionScalarWhereInput[]
    id?: StringFilter<"AppAction"> | string
    actionName?: StringFilter<"AppAction"> | string
    description?: StringFilter<"AppAction"> | string
    actionType?: EnumAppActionTypeFilter<"AppAction"> | $Enums.AppActionType
    icon?: StringNullableFilter<"AppAction"> | string | null
    appId?: StringFilter<"AppAction"> | string
    createdAt?: DateTimeFilter<"AppAction"> | Date | string
    updatedAt?: DateTimeFilter<"AppAction"> | Date | string
  }

  export type AppOrganizationUpsertWithWhereUniqueWithoutAppInput = {
    where: AppOrganizationWhereUniqueInput
    update: XOR<AppOrganizationUpdateWithoutAppInput, AppOrganizationUncheckedUpdateWithoutAppInput>
    create: XOR<AppOrganizationCreateWithoutAppInput, AppOrganizationUncheckedCreateWithoutAppInput>
  }

  export type AppOrganizationUpdateWithWhereUniqueWithoutAppInput = {
    where: AppOrganizationWhereUniqueInput
    data: XOR<AppOrganizationUpdateWithoutAppInput, AppOrganizationUncheckedUpdateWithoutAppInput>
  }

  export type AppOrganizationUpdateManyWithWhereWithoutAppInput = {
    where: AppOrganizationScalarWhereInput
    data: XOR<AppOrganizationUpdateManyMutationInput, AppOrganizationUncheckedUpdateManyWithoutAppInput>
  }

  export type MenuPermissionUpsertWithWhereUniqueWithoutAppInput = {
    where: MenuPermissionWhereUniqueInput
    update: XOR<MenuPermissionUpdateWithoutAppInput, MenuPermissionUncheckedUpdateWithoutAppInput>
    create: XOR<MenuPermissionCreateWithoutAppInput, MenuPermissionUncheckedCreateWithoutAppInput>
  }

  export type MenuPermissionUpdateWithWhereUniqueWithoutAppInput = {
    where: MenuPermissionWhereUniqueInput
    data: XOR<MenuPermissionUpdateWithoutAppInput, MenuPermissionUncheckedUpdateWithoutAppInput>
  }

  export type MenuPermissionUpdateManyWithWhereWithoutAppInput = {
    where: MenuPermissionScalarWhereInput
    data: XOR<MenuPermissionUpdateManyMutationInput, MenuPermissionUncheckedUpdateManyWithoutAppInput>
  }

  export type ActionPermissionUpsertWithWhereUniqueWithoutAppInput = {
    where: ActionPermissionWhereUniqueInput
    update: XOR<ActionPermissionUpdateWithoutAppInput, ActionPermissionUncheckedUpdateWithoutAppInput>
    create: XOR<ActionPermissionCreateWithoutAppInput, ActionPermissionUncheckedCreateWithoutAppInput>
  }

  export type ActionPermissionUpdateWithWhereUniqueWithoutAppInput = {
    where: ActionPermissionWhereUniqueInput
    data: XOR<ActionPermissionUpdateWithoutAppInput, ActionPermissionUncheckedUpdateWithoutAppInput>
  }

  export type ActionPermissionUpdateManyWithWhereWithoutAppInput = {
    where: ActionPermissionScalarWhereInput
    data: XOR<ActionPermissionUpdateManyMutationInput, ActionPermissionUncheckedUpdateManyWithoutAppInput>
  }

  export type AppCreateWithoutAppOrganizationInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemCreateNestedManyWithoutAppInput
    appActions?: AppActionCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutAppOrganizationInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemUncheckedCreateNestedManyWithoutAppInput
    appActions?: AppActionUncheckedCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutAppOrganizationInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutAppOrganizationInput, AppUncheckedCreateWithoutAppOrganizationInput>
  }

  export type OrganizationCreateWithoutAppOrganizationInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    rbac?: RBACCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAppOrganizationInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    rbac?: RBACUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAppOrganizationInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAppOrganizationInput, OrganizationUncheckedCreateWithoutAppOrganizationInput>
  }

  export type AppUpsertWithoutAppOrganizationInput = {
    update: XOR<AppUpdateWithoutAppOrganizationInput, AppUncheckedUpdateWithoutAppOrganizationInput>
    create: XOR<AppCreateWithoutAppOrganizationInput, AppUncheckedCreateWithoutAppOrganizationInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutAppOrganizationInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutAppOrganizationInput, AppUncheckedUpdateWithoutAppOrganizationInput>
  }

  export type AppUpdateWithoutAppOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUpdateManyWithoutAppNestedInput
    appActions?: AppActionUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutAppOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUncheckedUpdateManyWithoutAppNestedInput
    appActions?: AppActionUncheckedUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type OrganizationUpsertWithoutAppOrganizationInput = {
    update: XOR<OrganizationUpdateWithoutAppOrganizationInput, OrganizationUncheckedUpdateWithoutAppOrganizationInput>
    create: XOR<OrganizationCreateWithoutAppOrganizationInput, OrganizationUncheckedCreateWithoutAppOrganizationInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAppOrganizationInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAppOrganizationInput, OrganizationUncheckedUpdateWithoutAppOrganizationInput>
  }

  export type OrganizationUpdateWithoutAppOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAppOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type AppCreateWithoutAppMenuItemsInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appActions?: AppActionCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutAppMenuItemsInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appActions?: AppActionUncheckedCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutAppMenuItemsInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutAppMenuItemsInput, AppUncheckedCreateWithoutAppMenuItemsInput>
  }

  export type MenuPermissionCreateWithoutAppMenuItemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutMenuPermissionInput
    app: AppCreateNestedOneWithoutMenuPermissionInput
  }

  export type MenuPermissionUncheckedCreateWithoutAppMenuItemInput = {
    id?: string
    roleId: string
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionCreateOrConnectWithoutAppMenuItemInput = {
    where: MenuPermissionWhereUniqueInput
    create: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput>
  }

  export type MenuPermissionCreateManyAppMenuItemInputEnvelope = {
    data: MenuPermissionCreateManyAppMenuItemInput | MenuPermissionCreateManyAppMenuItemInput[]
    skipDuplicates?: boolean
  }

  export type AppUpsertWithoutAppMenuItemsInput = {
    update: XOR<AppUpdateWithoutAppMenuItemsInput, AppUncheckedUpdateWithoutAppMenuItemsInput>
    create: XOR<AppCreateWithoutAppMenuItemsInput, AppUncheckedCreateWithoutAppMenuItemsInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutAppMenuItemsInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutAppMenuItemsInput, AppUncheckedUpdateWithoutAppMenuItemsInput>
  }

  export type AppUpdateWithoutAppMenuItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appActions?: AppActionUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutAppMenuItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appActions?: AppActionUncheckedUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type MenuPermissionUpsertWithWhereUniqueWithoutAppMenuItemInput = {
    where: MenuPermissionWhereUniqueInput
    update: XOR<MenuPermissionUpdateWithoutAppMenuItemInput, MenuPermissionUncheckedUpdateWithoutAppMenuItemInput>
    create: XOR<MenuPermissionCreateWithoutAppMenuItemInput, MenuPermissionUncheckedCreateWithoutAppMenuItemInput>
  }

  export type MenuPermissionUpdateWithWhereUniqueWithoutAppMenuItemInput = {
    where: MenuPermissionWhereUniqueInput
    data: XOR<MenuPermissionUpdateWithoutAppMenuItemInput, MenuPermissionUncheckedUpdateWithoutAppMenuItemInput>
  }

  export type MenuPermissionUpdateManyWithWhereWithoutAppMenuItemInput = {
    where: MenuPermissionScalarWhereInput
    data: XOR<MenuPermissionUpdateManyMutationInput, MenuPermissionUncheckedUpdateManyWithoutAppMenuItemInput>
  }

  export type AppCreateWithoutAppActionsInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutAppActionsInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemUncheckedCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutAppActionsInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutAppActionsInput, AppUncheckedCreateWithoutAppActionsInput>
  }

  export type ActionPermissionCreateWithoutAppActionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutActionPermissionInput
    app: AppCreateNestedOneWithoutActionPermissionInput
  }

  export type ActionPermissionUncheckedCreateWithoutAppActionInput = {
    id?: string
    roleId: string
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionCreateOrConnectWithoutAppActionInput = {
    where: ActionPermissionWhereUniqueInput
    create: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput>
  }

  export type ActionPermissionCreateManyAppActionInputEnvelope = {
    data: ActionPermissionCreateManyAppActionInput | ActionPermissionCreateManyAppActionInput[]
    skipDuplicates?: boolean
  }

  export type AppUpsertWithoutAppActionsInput = {
    update: XOR<AppUpdateWithoutAppActionsInput, AppUncheckedUpdateWithoutAppActionsInput>
    create: XOR<AppCreateWithoutAppActionsInput, AppUncheckedCreateWithoutAppActionsInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutAppActionsInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutAppActionsInput, AppUncheckedUpdateWithoutAppActionsInput>
  }

  export type AppUpdateWithoutAppActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutAppActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUncheckedUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type ActionPermissionUpsertWithWhereUniqueWithoutAppActionInput = {
    where: ActionPermissionWhereUniqueInput
    update: XOR<ActionPermissionUpdateWithoutAppActionInput, ActionPermissionUncheckedUpdateWithoutAppActionInput>
    create: XOR<ActionPermissionCreateWithoutAppActionInput, ActionPermissionUncheckedCreateWithoutAppActionInput>
  }

  export type ActionPermissionUpdateWithWhereUniqueWithoutAppActionInput = {
    where: ActionPermissionWhereUniqueInput
    data: XOR<ActionPermissionUpdateWithoutAppActionInput, ActionPermissionUncheckedUpdateWithoutAppActionInput>
  }

  export type ActionPermissionUpdateManyWithWhereWithoutAppActionInput = {
    where: ActionPermissionScalarWhereInput
    data: XOR<ActionPermissionUpdateManyMutationInput, ActionPermissionUncheckedUpdateManyWithoutAppActionInput>
  }

  export type RoleCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actionPermission?: ActionPermissionCreateNestedManyWithoutRoleInput
    rbac?: RBACCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutRoleInput
    rbac?: RBACUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutMenuPermissionInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutMenuPermissionInput, RoleUncheckedCreateWithoutMenuPermissionInput>
  }

  export type AppCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemCreateNestedManyWithoutAppInput
    appActions?: AppActionCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemUncheckedCreateNestedManyWithoutAppInput
    appActions?: AppActionUncheckedCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutAppInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutMenuPermissionInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutMenuPermissionInput, AppUncheckedCreateWithoutMenuPermissionInput>
  }

  export type AppMenuItemCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppMenuItemsInput
  }

  export type AppMenuItemUncheckedCreateWithoutMenuPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppMenuItemCreateOrConnectWithoutMenuPermissionInput = {
    where: AppMenuItemWhereUniqueInput
    create: XOR<AppMenuItemCreateWithoutMenuPermissionInput, AppMenuItemUncheckedCreateWithoutMenuPermissionInput>
  }

  export type RoleUpsertWithoutMenuPermissionInput = {
    update: XOR<RoleUpdateWithoutMenuPermissionInput, RoleUncheckedUpdateWithoutMenuPermissionInput>
    create: XOR<RoleCreateWithoutMenuPermissionInput, RoleUncheckedCreateWithoutMenuPermissionInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutMenuPermissionInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutMenuPermissionInput, RoleUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type RoleUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionPermission?: ActionPermissionUpdateManyWithoutRoleNestedInput
    rbac?: RBACUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutRoleNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type AppUpsertWithoutMenuPermissionInput = {
    update: XOR<AppUpdateWithoutMenuPermissionInput, AppUncheckedUpdateWithoutMenuPermissionInput>
    create: XOR<AppCreateWithoutMenuPermissionInput, AppUncheckedCreateWithoutMenuPermissionInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutMenuPermissionInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutMenuPermissionInput, AppUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type AppUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUpdateManyWithoutAppNestedInput
    appActions?: AppActionUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUncheckedUpdateManyWithoutAppNestedInput
    appActions?: AppActionUncheckedUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutAppNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppMenuItemUpsertWithoutMenuPermissionInput = {
    update: XOR<AppMenuItemUpdateWithoutMenuPermissionInput, AppMenuItemUncheckedUpdateWithoutMenuPermissionInput>
    create: XOR<AppMenuItemCreateWithoutMenuPermissionInput, AppMenuItemUncheckedCreateWithoutMenuPermissionInput>
    where?: AppMenuItemWhereInput
  }

  export type AppMenuItemUpdateToOneWithWhereWithoutMenuPermissionInput = {
    where?: AppMenuItemWhereInput
    data: XOR<AppMenuItemUpdateWithoutMenuPermissionInput, AppMenuItemUncheckedUpdateWithoutMenuPermissionInput>
  }

  export type AppMenuItemUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppMenuItemsNestedInput
  }

  export type AppMenuItemUncheckedUpdateWithoutMenuPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateWithoutActionPermissionInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionCreateNestedManyWithoutRoleInput
    rbac?: RBACCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutActionPermissionInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutRoleInput
    rbac?: RBACUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutActionPermissionInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutActionPermissionInput, RoleUncheckedCreateWithoutActionPermissionInput>
  }

  export type AppCreateWithoutActionPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemCreateNestedManyWithoutAppInput
    appActions?: AppActionCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutActionPermissionInput = {
    id?: string
    name: string
    description: string
    slug: string
    type: $Enums.AppType
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appMenuItems?: AppMenuItemUncheckedCreateNestedManyWithoutAppInput
    appActions?: AppActionUncheckedCreateNestedManyWithoutAppInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutAppInput
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutActionPermissionInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutActionPermissionInput, AppUncheckedCreateWithoutActionPermissionInput>
  }

  export type AppActionCreateWithoutActionPermissionInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    app: AppCreateNestedOneWithoutAppActionsInput
  }

  export type AppActionUncheckedCreateWithoutActionPermissionInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppActionCreateOrConnectWithoutActionPermissionInput = {
    where: AppActionWhereUniqueInput
    create: XOR<AppActionCreateWithoutActionPermissionInput, AppActionUncheckedCreateWithoutActionPermissionInput>
  }

  export type RoleUpsertWithoutActionPermissionInput = {
    update: XOR<RoleUpdateWithoutActionPermissionInput, RoleUncheckedUpdateWithoutActionPermissionInput>
    create: XOR<RoleCreateWithoutActionPermissionInput, RoleUncheckedCreateWithoutActionPermissionInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutActionPermissionInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutActionPermissionInput, RoleUncheckedUpdateWithoutActionPermissionInput>
  }

  export type RoleUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUpdateManyWithoutRoleNestedInput
    rbac?: RBACUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutRoleNestedInput
    rbac?: RBACUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type AppUpsertWithoutActionPermissionInput = {
    update: XOR<AppUpdateWithoutActionPermissionInput, AppUncheckedUpdateWithoutActionPermissionInput>
    create: XOR<AppCreateWithoutActionPermissionInput, AppUncheckedCreateWithoutActionPermissionInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutActionPermissionInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutActionPermissionInput, AppUncheckedUpdateWithoutActionPermissionInput>
  }

  export type AppUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUpdateManyWithoutAppNestedInput
    appActions?: AppActionUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumAppTypeFieldUpdateOperationsInput | $Enums.AppType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appMenuItems?: AppMenuItemUncheckedUpdateManyWithoutAppNestedInput
    appActions?: AppActionUncheckedUpdateManyWithoutAppNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutAppNestedInput
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppActionUpsertWithoutActionPermissionInput = {
    update: XOR<AppActionUpdateWithoutActionPermissionInput, AppActionUncheckedUpdateWithoutActionPermissionInput>
    create: XOR<AppActionCreateWithoutActionPermissionInput, AppActionUncheckedCreateWithoutActionPermissionInput>
    where?: AppActionWhereInput
  }

  export type AppActionUpdateToOneWithWhereWithoutActionPermissionInput = {
    where?: AppActionWhereInput
    data: XOR<AppActionUpdateWithoutActionPermissionInput, AppActionUncheckedUpdateWithoutActionPermissionInput>
  }

  export type AppActionUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppActionsNestedInput
  }

  export type AppActionUncheckedUpdateWithoutActionPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateWithoutRbacInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutRbacInput = {
    id: string
    name: string
    slug?: string | null
    logo?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MemberUncheckedCreateNestedManyWithoutOrganizationInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutOrganizationInput
    appOrganization?: AppOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutRbacInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutRbacInput, OrganizationUncheckedCreateWithoutRbacInput>
  }

  export type UserCreateWithoutRbacInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorCreateNestedManyWithoutUserInput
    members?: MemberCreateNestedManyWithoutUserInput
    invitations?: InvitationCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRbacInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    twoFactorEnabled?: boolean | null
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    username?: string | null
    displayUsername?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    twofactors?: TwoFactorUncheckedCreateNestedManyWithoutUserInput
    members?: MemberUncheckedCreateNestedManyWithoutUserInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutUserInput
    oauthapplications?: OauthApplicationUncheckedCreateNestedManyWithoutUserInput
    oauthaccesstokens?: OauthAccessTokenUncheckedCreateNestedManyWithoutUserInput
    oauthconsents?: OauthConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRbacInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRbacInput, UserUncheckedCreateWithoutRbacInput>
  }

  export type RoleCreateWithoutRbacInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionCreateNestedManyWithoutRoleInput
    actionPermission?: ActionPermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutRbacInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    menuPermission?: MenuPermissionUncheckedCreateNestedManyWithoutRoleInput
    actionPermission?: ActionPermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutRbacInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutRbacInput, RoleUncheckedCreateWithoutRbacInput>
  }

  export type OrganizationUpsertWithoutRbacInput = {
    update: XOR<OrganizationUpdateWithoutRbacInput, OrganizationUncheckedUpdateWithoutRbacInput>
    create: XOR<OrganizationCreateWithoutRbacInput, OrganizationUncheckedCreateWithoutRbacInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutRbacInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutRbacInput, OrganizationUncheckedUpdateWithoutRbacInput>
  }

  export type OrganizationUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput
    appOrganization?: AppOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutRbacInput = {
    update: XOR<UserUpdateWithoutRbacInput, UserUncheckedUpdateWithoutRbacInput>
    create: XOR<UserCreateWithoutRbacInput, UserUncheckedCreateWithoutRbacInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRbacInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRbacInput, UserUncheckedUpdateWithoutRbacInput>
  }

  export type UserUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUpdateManyWithoutUserNestedInput
    members?: MemberUpdateManyWithoutUserNestedInput
    invitations?: InvitationUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayUsername?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    twofactors?: TwoFactorUncheckedUpdateManyWithoutUserNestedInput
    members?: MemberUncheckedUpdateManyWithoutUserNestedInput
    invitations?: InvitationUncheckedUpdateManyWithoutUserNestedInput
    oauthapplications?: OauthApplicationUncheckedUpdateManyWithoutUserNestedInput
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutUserNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutRbacInput = {
    update: XOR<RoleUpdateWithoutRbacInput, RoleUncheckedUpdateWithoutRbacInput>
    create: XOR<RoleCreateWithoutRbacInput, RoleUncheckedCreateWithoutRbacInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutRbacInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutRbacInput, RoleUncheckedUpdateWithoutRbacInput>
  }

  export type RoleUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUpdateManyWithoutRoleNestedInput
    actionPermission?: ActionPermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutRbacInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutRoleNestedInput
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    activeOrganizationId?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwoFactorCreateManyUserInput = {
    id: string
    secret: string
    backupCodes: string
  }

  export type MemberCreateManyUserInput = {
    id: string
    organizationId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationCreateManyUserInput = {
    id: string
    organizationId: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
  }

  export type RBACCreateManyUserInput = {
    id?: string
    organizationId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OauthApplicationCreateManyUserInput = {
    id: string
    name?: string | null
    icon?: string | null
    metadata?: string | null
    clientId?: string | null
    clientSecret?: string | null
    redirectURLs?: string | null
    type?: string | null
    disabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthAccessTokenCreateManyUserInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    clientId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthConsentCreateManyUserInput = {
    id: string
    clientId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    activeOrganizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoFactorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
  }

  export type TwoFactorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: StringFieldUpdateOperationsInput | string
  }

  export type MemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutRbacNestedInput
    role?: RoleUpdateOneRequiredWithoutRbacNestedInput
  }

  export type RBACUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OauthApplicationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthaccesstokens?: OauthAccessTokenUpdateManyWithoutOauthapplicationNestedInput
    oauthconsents?: OauthConsentUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthaccesstokens?: OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationNestedInput
    oauthconsents?: OauthConsentUncheckedUpdateManyWithoutOauthapplicationNestedInput
  }

  export type OauthApplicationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    clientSecret?: NullableStringFieldUpdateOperationsInput | string | null
    redirectURLs?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    disabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    oauthapplication?: OauthApplicationUpdateOneWithoutOauthaccesstokensNestedInput
  }

  export type OauthAccessTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthConsentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oauthapplication?: OauthApplicationUpdateOneWithoutOauthconsentsNestedInput
  }

  export type OauthConsentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OauthConsentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MemberCreateManyOrganizationInput = {
    id: string
    userId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationCreateManyOrganizationInput = {
    id: string
    email: string
    role?: string | null
    status: string
    expiresAt: Date | string
    inviterId: string
  }

  export type AppOrganizationCreateManyOrganizationInput = {
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACCreateManyOrganizationInput = {
    id?: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MemberUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MemberUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type AppOrganizationUpdateWithoutOrganizationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutAppOrganizationNestedInput
  }

  export type AppOrganizationUncheckedUpdateWithoutOrganizationInput = {
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationUncheckedUpdateManyWithoutOrganizationInput = {
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRbacNestedInput
    role?: RoleUpdateOneRequiredWithoutRbacNestedInput
  }

  export type RBACUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OauthAccessTokenCreateManyOauthapplicationInput = {
    id: string
    accessToken?: string | null
    refreshToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OauthConsentCreateManyOauthapplicationInput = {
    id: string
    userId?: string | null
    scopes?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    consentGiven?: boolean | null
  }

  export type OauthAccessTokenUpdateWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutOauthaccesstokensNestedInput
  }

  export type OauthAccessTokenUncheckedUpdateWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthAccessTokenUncheckedUpdateManyWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OauthConsentUpdateWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
    user?: UserUpdateOneWithoutOauthconsentsNestedInput
  }

  export type OauthConsentUncheckedUpdateWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OauthConsentUncheckedUpdateManyWithoutOauthapplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentGiven?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MenuPermissionCreateManyRoleInput = {
    id?: string
    appId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionCreateManyRoleInput = {
    id?: string
    appId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RBACCreateManyRoleInput = {
    id?: string
    organizationId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutMenuPermissionNestedInput
    appMenuItem?: AppMenuItemUpdateOneRequiredWithoutMenuPermissionNestedInput
  }

  export type MenuPermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    app?: AppUpdateOneRequiredWithoutActionPermissionNestedInput
    appAction?: AppActionUpdateOneRequiredWithoutActionPermissionNestedInput
  }

  export type ActionPermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutRbacNestedInput
    user?: UserUpdateOneRequiredWithoutRbacNestedInput
  }

  export type RBACUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RBACUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppMenuItemCreateManyAppInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppActionCreateManyAppInput = {
    id?: string
    actionName: string
    description: string
    actionType: $Enums.AppActionType
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppOrganizationCreateManyAppInput = {
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionCreateManyAppInput = {
    id?: string
    roleId: string
    appMenuItemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionCreateManyAppInput = {
    id?: string
    roleId: string
    appActionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppMenuItemUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUpdateManyWithoutAppMenuItemNestedInput
  }

  export type AppMenuItemUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuPermission?: MenuPermissionUncheckedUpdateManyWithoutAppMenuItemNestedInput
  }

  export type AppMenuItemUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppActionUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionPermission?: ActionPermissionUpdateManyWithoutAppActionNestedInput
  }

  export type AppActionUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionPermission?: ActionPermissionUncheckedUpdateManyWithoutAppActionNestedInput
  }

  export type AppActionUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAppActionTypeFieldUpdateOperationsInput | $Enums.AppActionType
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationUpdateWithoutAppInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAppOrganizationNestedInput
  }

  export type AppOrganizationUncheckedUpdateWithoutAppInput = {
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppOrganizationUncheckedUpdateManyWithoutAppInput = {
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutMenuPermissionNestedInput
    appMenuItem?: AppMenuItemUpdateOneRequiredWithoutMenuPermissionNestedInput
  }

  export type MenuPermissionUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appMenuItemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutActionPermissionNestedInput
    appAction?: AppActionUpdateOneRequiredWithoutActionPermissionNestedInput
  }

  export type ActionPermissionUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appActionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionCreateManyAppMenuItemInput = {
    id?: string
    roleId: string
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuPermissionUpdateWithoutAppMenuItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutMenuPermissionNestedInput
    app?: AppUpdateOneRequiredWithoutMenuPermissionNestedInput
  }

  export type MenuPermissionUncheckedUpdateWithoutAppMenuItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuPermissionUncheckedUpdateManyWithoutAppMenuItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionCreateManyAppActionInput = {
    id?: string
    roleId: string
    appId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActionPermissionUpdateWithoutAppActionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutActionPermissionNestedInput
    app?: AppUpdateOneRequiredWithoutActionPermissionNestedInput
  }

  export type ActionPermissionUncheckedUpdateWithoutAppActionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionPermissionUncheckedUpdateManyWithoutAppActionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}